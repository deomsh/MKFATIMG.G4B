!BAT
#-#+ MKFATIMG.G4B v0.7 (20250910), by deomsh
if "%~1"=="" && echo Use 1:    MKFATIMG.G4B --size=n|--sectors=N|--CHS=C/H/S FILE switches
if "%~1"=="" && echo Switches: [/HDD|/FDD] [/FAT12[:nk]|/FAT16[:nk]|/FAT32[:nk]] [/V:VOLUMENAME]
if "%~1"=="" && echo $[]          [/BOOT[:OS]] [/NOTACTIVE] [/LOG] [/CON] [/R] [/SPT:S] [/HEADS:H]
if "%~1"=="" && echo $[]          [/RSRV:n] [/SPC:N] [/NOTRM] [/FHD] [/NOTRM] [/HIDDSEC:n] [/RDBASE:n]
if "%~1"=="" && echo $[]          [/RDSIZE:n] [/Q|/T] [/Y]
if "%~1"=="" && echo Use 2:    MKFATIMG.G4B FILE /F:floppysize switches
if "%~1"=="" && echo Switches: [/V:VOLUMENAME] [/BOOT[:OS]] [/FAT16|/FAT32] [/CON] [/RSRV:n]
if "%~1"=="" && echo $[]          [/ROOTENTR:n] [/FHD] [/NOTRM] [/HIDDSEC:n] [/RDBASE:n] [/RDSIZE:n]
if "%~1"=="" && echo $[]          [/Q|/T] [/Y]
if "%~1"=="" && echo Use 3:    MKFATIMG.G4B FILE /D:disktype switches
if "%~1"=="" && echo Switches: [/SPT:S] [/HEADS:H] [/LOG] [/BOOT[:OS]] [/NOTACTIVE] [/R] [/CON]
if "%~1"=="" && echo $[]          [/FAT12|/FAT16|/FAT32] [/V:VOLUMENAME] [/ROOTENTR:n] [/RSRV:n]
if "%~1"=="" && echo $[]          [/RDBASE:n] [/RDSIZE:n] [/Q|/T] [/Y]
if "%~1"=="" && echo Use 4:    MKFATIMG.G4B FILE /COPY [/CON] [/Q|/T] [/Y]
#TODO/CHECK#: '/RD:n|FILE2' with '/COPY'
if "%~1"=="" && echo Help:     MKFATIMG.G4B /?|--?|? && goto :examples
## '/BOOT:OS' not functional yet for '/BOOT:OS OS=ZERO'
## OS: EFI = to check !
if exist @uefi && graphicsmode > nul &; if %@retval%<=0xFF && echo Textmode of Grub4dos for UEFI not supported && goto :eof
setlocal && set /a version=*0x8278&0xffffffff > nul &; if %version%>=20170830 && endlocal ! echo Grub4dos version %version% too old, use version 20170830 or later && endlocal && goto :eof
setlocal && set * && set "RAMDISK=%RAMDISK%"
set "rt=%@root%" &; if not exist @uefi && if "%rt:~0,3%"=="(cd" && set /A drvnum=*0x82A0&0xff > nul &; if "%rt:~3,1%"==")" && set "rt=(%drvnum%)%rt:~4%" ! set "rt=(%drvnum%)%rt:~5%"
set "source=%~dp0" && set "srcDRIVE=%~d0" &; if not exist @uefi && if "%source:~0,3%"=="(cd" &; if "%source:~3,1%"==")" && set "source=(%drvnum%)%source:~4%" ! set "source=(%drvnum%)%source:~5%" &; set srcDRIVE=(%drvnum%)
debug status > nul ;; set /a debugsts=%@retval% > nul
debug 1
pager status > nul ;; set /a pagersts=%@retval% > nul
if not "%~1"=="/?" if not "%~1"=="--?" if not "%~1"=="?" || goto :help
debug msg=0
if not exist SIZE && if not exist SECTORS && if not exist CHS &; if /i "%~1"=="--SIZE" && set /a SIZE=%~2 && shift && shift
if not exist SIZE && if not exist SECTORS && if not exist CHS &; if /i "%~1"=="--SECTORS" && set /a SECTORS=%~2 && shift && shift
if not exist SIZE && if not exist SECTORS && if not exist CHS &; if not /i "%~1"=="--CHS" if not /i "%~1"=="--C/H/S" |; set CHS=%~2 && shift && shift
set "arg=%~1" &; set /a larg=%@retval%
call Fn.11 "%~1" "/" && set "PATH=%~p1"
#BAD:ForLfnWithPathOnly#call Fn.11 "%~1" ")/" && set "PATH=%~p1"
delmod -l fat > nul && set INSMOD=fat ! set INSMOD=INSMOD ;; delmod -l FATLFN.LLL > nul && set INSMOD=%INSMOD%;FATLFN.LLL ;; delmod -l ATTRIBFT.LLL > nul && set INSMOD=%INSMOD%;ATTRIBFT.LLL
if exist PATH &; delmod -l fat > nul || insmod %rt%/fat > nul || insmod %srcDRIVE%/fat > nul || insmod %srcDRIVE%/grub/fat > nul || insmod %srcDRIVE%/boot/grub/fat > nul || insmod %srcDRIVE%/g4dll/fat > nul || insmod (bd)/boot/grub/fat > nul || insmod (bd)/fat > nul || insmod (bd)/boot/grub/fat > nul || insmod (bd)/grub/fat > nul || insmod (bd)/g4dll/fat > nul |; if not exist NULL && call :Fn.4 &; set v0=%v% && set v= && set h= &; echo Can not load grubutil 'fat', continue make (partial) image in ram-disk only?%NULL% &; set /p /u "continue= Continue? (Yes=Y, No=N) > " && echo ! echo && set continue=N &; if not %continue:~0,1%==Y && set result=0 && goto :eov
if exist PATH &; delmod -l ATTRIBFT.LLL > nul || insmod %rt%/ATTRIBFT.LLL > nul || insmod %srcDRIVE%/ATTRIBFT.LLL > nul || insmod /ATTRIBFT.LLL > nul || insmod (bd)/boot/grub/ATTRIBFT.LLL > nul || insmod (bd)/ATTRIBFT.LLL > nul || insmod (bd)/grub/ATTRIBFT.LLL > nul || insmod (bd)/g4dll/ATTRIBFT.LLL > nul || insmod %@root%/ATTRIBFT.LLL > nul || set ATTRIBFT=N
if exist PATH && if not %ATTRIBFT%==N &; delmod -l FATLFN.LLL > nul || insmod %rt%/FATLFN.LLL > nul || insmod %srcDRIVE%/FATLFN.LLL > nul || insmod /FATLFN.LLL > nul || insmod (bd)/boot/grub/FATLFN.LLL > nul || insmod (bd)/FATLFN.LLL > nul || insmod (bd)/grub/FATLFN.LLL > nul || insmod (bd)/g4dll/FATLFN.LLL > nul || insmod %@root%/FATLFN.LLL > nul || set FATLFN=N
if exist PATH && set ATTRIBFT= && set FATLFN= &; delmod -l FATLFN.LLL > nul && delmod -l ATTRIBFT.LLL > nul && set ?_BOOT=fatlfn ! if not %continue%==Y && set ?_BOOT=fat ! set continue=%continue% &; if not %continue%==Y && if %?_BOOT%==fat && echo Libraries FATLFN.LLL and ATTRIBFT.LLL not loaded: 8+3 Short File Names only ! set continue=
if not "%arg%"=="(rd)" &; call Fn.11 "%*" "/T " && echo Possible driver: %?_BOOT%
#ORG#call Fn.11 "%*" "/T " && echo Possible driver: %?_BOOT%
if exist PATH && if not "%PATH%"=="/" && call Fn.11 "%PATH%" " " && echo -e "%PATH%" | set PATH= &; set "PATH=%PATH:~1,-1%" &; call :lsspaces PATH "%PATH%"
#ORG#if not "%PATH%"=="/" && call Fn.11 "%PATH%" " " && echo -e "%PATH%" | set PATH= &; set "PATH=%PATH:~1,-1%" &; call :lsspaces PATH "%PATH%"
if exist PATH && if not "%PATH%"=="/" && setlocal && call :SFN "PATH" "%PATH%" &; if %SFN%==N && if %?_BOOT%==fat && endlocal && echo -e PATH$[0x00]"$[]'%PATH%'$[0x00]"$[]must consist of 8+3 file names only && set result=0 && goto :eov ! endlocal && set PATHSFN=%SFN%
#ORG#if not "%PATH%"=="/" && setlocal && call :SFN "PATH" "%PATH%" &; if %SFN%==N && if %?_BOOT%==fat && endlocal && echo -e PATH$[0x00]"$[]'%PATH%'$[0x00]"$[]must consist of 8+3 file names only && set result=0 && goto :eov ! endlocal && set PATHSFN=%SFN%
if not %~d1==(rd) &; call Fn.11 "%arg%" "/" || echo Path is missing in target '%~1' && set result=0 && goto :eov
set "ARGNAME=%~n1" &; if exist ARGNAME && call Fn.11 "%ARGNAME%" " " && echo -e "%ARGNAME%" | set ARGNAME= &; set "ARGNAME=%ARGNAME:~1,-1%" &; call :lsspaces ARGNAME "%ARGNAME%"
set "ARGEXT=%~x1" &; if exist ARGEXT && call Fn.11 "%ARGEXT%" " " && echo -e "%ARGEXT%" | set ARGEXT= &; set "ARGEXT=%ARGEXT:~1,-1%" &; call :lsspaces ARGEXT "%ARGEXT%"
if exist ARGNAME && setlocal && call :SFN "FILE" "%ARGNAME%%%ARGEXT%" &; if %SFN%==N && if %?_BOOT%==fat && endlocal && echo -e File name$[0x00]"$[]'%ARGNAME%%%ARGEXT%'$[0x00]"$[]is not a 8+3 file name && set result=0 && goto :eov ! endlocal && set FILESFN=%SFN%
if exist PATH && if exist ARGNAME && if exist ARGEXT &; if not %PATHSFN%==N && if not %FILESFN%==N && set ?_BOOT=fat && set PATHSFN= && set FILESFN= ! set PATHSFN= && set FILESFN=
#ORG#if not %PATHSFN%==N && if not %FILESFN%==N && set ?_BOOT=fat && set PATHSFN= && set FILESFN= ! set PATHSFN= && set FILESFN=
if "%arg:~0,3%"=="(rd" &; call Fn.11 "%arg%" "/" && set result=0 ! if not exist ARGNAME if not exist ARGEXT || set result=0 ! call Fn.11 "%arg%" "," set result=0 &; if %result%==0 && echo Target '%~1' not supported && goto :eov
#BAD#if "%arg:~0,3%"=="(rd" &; call Fn.11 "%arg%" "/" set result=0 ! if not exist ARGNAME if not exist ARGEXT || set result=0 ! call Fn.11 "%arg%" "," set result=0 &; if %result%==0 && echo Target '%~1' not supported && goto :eov
if not "%arg%"=="(rd)" &; if not /i "%ARGEXT%"==".IMG" && if not /i "%ARGEXT%"==".IMA" && if not /i "%ARGEXT%"==".RAW" && if not /i "%ARGEXT%"==".BIN" && if not /i "%ARGEXT%"==".HDD" && if not /i "%ARGEXT%"==".VMDK" && echo -e $[0x00]"$[]'%~x1'$[0x00]"$[]is not an accepted extension%NULL% && set result=0 && goto :eov
if not "%arg%"=="(rd)" &; if not /i "%ARGEXT%"==".IMG" if not /i "%ARGEXT%"==".IMA" if not /i "%ARGEXT%"==".RAW" if not /i "%ARGEXT%"==".BIN" if not /i "%ARGEXT%"==".HDD" if not /i "%ARGEXT%"==".VMDK" || set "FILE=%~d1%PATH%%%ARGNAME%%%ARGEXT%" && set DEVICE=%~d1 && set "NAME=%ARGNAME%" && set "EXT=%ARGEXT%" && shift
if "%arg%"=="(rd)" && set DEVICE=(rd) && shift
set "active=/A"
if not "%arg%"=="(rd)" &; call Fn.11 "%*" "/T " && echo Actual driver:   %?_BOOT%
#ORG#call Fn.11 "%*" "/T " && echo Actual driver:   %?_BOOT%
:argloop
if "%~1"=="" && goto :endofargloop
set "arg=%~1"
if not exist fattype && if /i "%arg:~0,4%"=="/FAT" &; if not "%arg:~6%"=="" && if not %arg:~6,1%==: && echo Abort: switch '%arg%' is not valid && goto :eov ! if /i "%arg:~0,6%"=="/FAT12" && set fattype=FAT12%arg:~6% && shift && goto :argloop ! if /i "%arg:~0,6%"=="/FAT16" && set fattype=FAT16%arg:~6% && shift && goto :argloop ! if /i "%arg:~0,6%"=="/FAT32" && set fattype=FAT32%arg:~6% && shift && goto :argloop
if not exist VOLLABEL &; if /i "%arg:~0,3%"=="/V:" && set /u "VOLLABEL=%arg:~3,11%" && shift && goto :argloop
if not exist FLOPTYPE && if not exist DISKTYPE &; if /i "%arg:~0,3%"=="/F:" && set "FLOPTYPE=%arg:~3%" && set disk=(fd && shift && goto :argloop
if not exist DISKTYPE && if not exist FLOPTYPE &; if /i "%arg:~0,3%"=="/D:" && set "DISKTYPE=%arg:~3%" && set disk=(hd && shift && goto :argloop
if not exist disk && if not exist DISKTYPE && if not exist FLOPTYPE &; if /i "%arg%"=="/HDD" && set disk=(hd && shift && goto :argloop
if not exist disk && if not exist DISKTYPE && if not exist FLOPTYPE &; if /i "%arg%"=="/FDD" && set disk=(fd && shift && goto :argloop
if not exist contigu &; if /i "%arg%"=="/CON" && set contigu=Y && shift && goto :argloop
if not exist floppy &; if /i "%arg%"=="/NOTRM" && set floppy=NORM && shift && goto :argloop
if not exist ddcopy &; if /i "%arg%"=="/COPY" && set ddcopy=Y && shift && goto :argloop
if not exist drivenum &; if /i "%arg%"=="/FHD" && set drivenum=x80 && shift && goto :argloop
if exist active &; if /i "%arg%"=="/NOTACTIVE" && set active= && shift && goto :argloop
if not exist bootcode &; if /i "%arg%"=="/BOOT" && set bootcode=DEF && shift && goto :argloop
if not exist bootcode &; if /i "%arg:~0,6%"=="/BOOT:" && set /u bootcode=%arg:~6% && shift && goto :argloop
if not exist LOG &; if /i "%arg%"=="/LOG" && set LOG=/LOG && shift && goto :argloop
if not exist V if not exist Q &; if /i "%arg%"=="/Q" && set Q=/Q && shift && goto :argloop
if not exist Q if not exist V &; if not /i "%arg%"=="/T" if not /i "%arg%"=="/DEBUG" if not /i "%arg%"=="/DBG" |; set V=/V && shift && goto :argloop
if not exist readonly &; if /i "%arg%"=="/R" && set readonly=/R && shift && goto :argloop
#MAYBE#if not exist disk &; if "%arg:~0,4%"=="/(hd" && if "%arg:~-1,1%"==")" && set disk=%arg:~1% && shift && goto :argloop
#MAYBE#if not exist disk &; if "%arg:~0,4%"=="/(fd" && if "%arg:~-1,1%"==")" && set disk=%arg:~1% && shift && goto :argloop
if not exist SPT &; if /i "%arg:~0,5%"=="/SPT:" && set /a SPT=%arg:~5% && shift && goto :argloop
if not exist HEADS &; if /i "%arg:~0,7%"=="/HEADS:" && set /a HEADS=%arg:~7% && shift && goto :argloop
if not exist rdbase &; if /i "%arg:~0,8%"=="/RDBASE:" && set /A rdbase=%arg:~8% && shift && goto :argloop
if not exist rsrvsect &; if /i "%arg:~0,6%"=="/RSRV:" && set /A rsrvsect=%arg:~6% && shift && goto :argloop
if not exist rootentr &; if /i "%arg:~0,10%"=="/ROOTENTR:" && set /A rootentr=%arg:~10% &; if %rootentr%>=16 && shift && goto :argloop ! echo Switch '%arg%' is not valid && goto :eov
if not exist secpclus &; if /i "%arg:~0,5%"=="/SPC:" && set /A secpclus=%arg:~5% &; if %secpclus%==1 && shift && goto :argloop ! if %secpclus%==2 && shift && goto :argloop ! if %secpclus%==4 && shift && goto :argloop ! if %secpclus%==8 && shift && goto :argloop ! if %secpclus%==16 && shift && goto :argloop ! if %secpclus%==32 && shift && goto :argloop ! if %secpclus%==64 && shift && goto :argloop ! if %secpclus%==128 && shift && goto :argloop ! echo Switch '%arg%' is not valid && goto :eov
if not exist Y &; if /i "%arg%"=="/Y" && set Y=Y && shift && goto :argloop
#TOONEW#if not exist rootclus &; if /i "%arg:~0,10%"=="/ROOTCLUS:" && set /A rootclus=%arg:~10% &; if %rootclus%>=2 && if %rootclus%<=0xFFFFFFF && shift && goto :argloop ! echo Switch '%arg%' is not valid && goto :eov
if not exist RDSIZE && if /i "%arg:~0,8%"=="/RDSIZE:" &; if /i %arg:~8%==MAX && set RDSIZE=MAX ! set RDSIZE=%arg:~8% &; shift && goto :argloop
if not exist HIDDSEC &; if /i "%arg:~0,9%"=="/HIDDSEC:" && set /A HIDDSEC=%arg:~9% &; if not %HIDDSEC%>=4g && shift && goto :argloop ! echo Switch '%arg%' is not valid && goto :eov
:endofargloop
if exist fattype && if %fattype:~5,1%==: &; if not %fattype:~6%==1k && if not %fattype:~6%==2k && if not %fattype:~6%==4k && if not %fattype:~6%==8k && if not %fattype:~6%==16k &; echo Abort: switch '%fattype%' is not valid && goto :eov
if exist VOLLABEL && setlocal && call :SFN "FILE" "%VOLLABEL:~0,8%.%VOLLABEL:~8%" &; if %SFN%==N && endlocal && echo Volume label '%VOLLABEL%' is not valid && set result=0 && goto :eov ! endlocal
if "%Q%"=="/Q" && set "NULL= > nul"
if not "%~1"=="" &; if not "%Q%"=="/Q" && echo Abort: invalid switch$[0x00]"$[]'%~1'$[0x00]"$[] ! set "Q=%Q%" &; set result=0 && goto :eov
if %continue%==Y && call :Fn.4 &; set h= && call :Fn.5 0 %v0% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% && set /a v0=%v0%+1 &; if not %v0%==%v% && call :Fn.5 0 %v0% && echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% && set v0= && set v= ! set v0= && set v=
set arg= && set larg= && set largname= && set ARGNAME= && set ARGEXT= && set rt= && set source= && set srcDRIVE=
if %ddcopy%==Y && call :ddcopyback "ASK" &; setlocal && %RAMDISK% &; if %result%==1 && if exist %FILE% && if exist rdbase0 && if exist rdsize0 && map --rd-base=%rdbase0% && map --rd-size=%rdsize0% ! set result=%result% &; endlocal && set result=%result% && goto :eov
if exist FLOPTYPE && set SIZE= && set SECTORS= && set CHS= && set HEADS= && set SPT= && set readonly=
if exist DISKTYPE && set SIZE= && set SECTORS= && set CHS=
if exist CHS && call :parseCHS "%CHS%" &; if %result%==0 &; if not "%Q%"=="/Q" && echo Bad argument CHS: %CHS% ! set "Q=%Q%" &; set result=0 && goto :eov
if exist CHS && set /a SECTORS=%cylinder% * %heads% * %sectrack% && set /a SIZE=%cylinder% * %heads% * %sectrack% * 512 &; if not "%Q%"=="/Q" && set "CHS=CHS=%cylinder%/%heads%/%sectrack%, Sectors/Size=%SECTORS%/512"
if exist DISKTYPE && call :getCHSdisktype &; if %result%==0 && goto :eov
if exist DISKTYPE && if not "%Q%"=="/Q" && set DISKTYPE=(C/H/S=%cylinder%/%heads%/%sectrack%, Sector count/Size=%SECTORS%/512)
if exist HEADS && set heads=%HEADS% && set HEADS= && set cylinder=
if exist SPT && set sectrack=%SPT% && set SPT= && set cylinder=
if exist SECTORS && set /a SIZE=%SECTORS% * 0x200
if not exist disk &; if not %SIZE%>=4m && set disk=(fd ! set disk=(hd
if %disk:~1,2%==fd && if not %floppy%==NORM && set floppy=RM
if not exist bootcode && set active=
set /a size=%SIZE%>>10
if exist FLOPTYPE &; if /i %FLOPTYPE:~0,3%==21m && set FLOPTYPE=20385 ! if /i %FLOPTYPE:~0,4%==120m && set FLOPTYPE=123264 ! if %FLOPTYPE:~0,4%==240m && set FLOPTYPE=234752 ! if %FLOPTYPE%==15m && set FLOPTYPE=15360 ! if %FLOPTYPE%==18m && set FLOPTYPE=18432 ! if %FLOPTYPE%==36m && set FLOPTYPE=36864 ! if /i %FLOPTYPE:~-1,1%==m && set /a FLOPTYPE=%FLOPTYPE%>>10 ! if /i %FLOPTYPE:~-1,1%==g && set /a FLOPTYPE=%FLOPTYPE%>>20
if exist FLOPTYPE &; if /i %FLOPTYPE:~-1,1%==k && set FLOPTYPE=%FLOPTYPE:~0,-1% ! set FLOPTYPE=%FLOPTYPE% &; set /a SIZE=%FLOPTYPE% * 1024 && set disk=(fd &; if not floppy=NORM && set floppy=RM ! set floppy=%floppy% &; if not exist fattype &; if %FLOPTYPE%<=123264 && set fattype=FAT12 ! set fattype=FAT16
if exist FLOPTYPE &; if %fattype:~0,5%==FAT16 && if %FLOPTYPE%<=2055 && echo FAT16 not possible with /F:%FLOPTYPE% && set result=0 && goto :eov
if exist FLOPTYPE &; set /a SIZE=%FLOPTYPE% * 1k
if not exist fattype &; if %disk:~1,2%==fd && if %SIZE%<=16m && set fattype=FAT12 ! if %disk:~1,2%==hd && if %SIZE%<=17m && set fattype=FAT12 ! if %SIZE%<=512m && set fattype=FAT16 ! set fattype=FAT32
## NEWfor128secpclus
if not exist FLOPTYPE && if %fattype:~0,5%==FAT12 &; if %disk:~1,2%==fd && if %SIZE%==16m && set /a SIZE=16365k ! if %disk:~1,2%==fd && if %SIZE%==128m && set /a SIZE=130525k ! if %disk:~1,2%==fd && if %SIZE%==256m && set /a SIZE=261020k ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if %SIZE%==17m && set /a SIZE=16365 * 2 + 1008 + 63 * 512 ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if %SIZE%==256m && set /a SIZE=262064k ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if %SIZE%==17m && set /a SIZE=16365 * 2 + 1008 + 63 + 1008 * 512 &; if "%V%"=="/V" && echo Now '--size=%SIZE% byte' is rounded down for %fattype:~0,5%
## AMENDMENTofAlignmentOfFAT
if %fattype:~5,1%==: &; if %fattype:~0,5%==FAT12 && if %fattype:~6%>=4k && echo Abort: number of sectors per FAT as multiple of %fattype:~6% is out of range for %fattype:~0,5% && set result=0 && goto :eov
if %fattype:~0,5%==FAT16 &; if %SIZE%==2g && if %disk:~1,2%==fd && set /a SIZE=2097040k ! if %SIZE%==2g && if %disk:~1,2%==hd && if not %LOG%==/LOG && set /a SIZE=2097544k ! if %SIZE%==2g && if %disk:~1,2%==hd && if %LOG%==/LOG && set /a SIZE=2098048k ! if %SIZE%==4g && set /a SIZE=4193808k
if %SIZE%==4g && set /a SIZE=%SIZE%-1
set /a size=%SIZE%>>10
#BAD>=2g?#set /a size=%SIZE%/1024&0xffffffff > nul
if /i %FLOPTYPE:~-5,5%==4096m && set /a FLOPTYPE=%FLOPTYPE%>>10-1 ! if /i %FLOPTYPE:~-1,1%==m && set /a FLOPTYPE=%FLOPTYPE%>>10 ! if /i %FLOPTYPE:~-2,2%==4g && set /a FLOPTYPE=%FLOPTYPE%>>20-1 ! if /i %FLOPTYPE:~-1,1%==g && set /a FLOPTYPE=%FLOPTYPE%>>20
## NEW: forFAT32toReserveROOTclusters
if exist rootentr && if not %fattype:~0,5%==FAT32 && set /a rootsect=%rootentr%/16 &; set /a rootsect=%rootsect% * 16
if not exist rootsect && set /A rootsect=32
if not exist rsrvsect &; if %fattype:~0,5%==FAT32 && set /A rsrvsect=32 ! set /A rsrvsect=1
call :validate &; if %result%==0 && goto :eov
if %disk:~1,2%==hd && set floppy=
if not exist FLOPTYPE && if not exist DISKTYPE && call :getHSdisk &; if %result%==0 && goto :eov
if exist FLOPTYPE && call :getHSfloptype &; if %result%==0 && goto :eov
if not exist FLOPTYPE && call :getCHS &; if %result%==0 && goto :eov
if exist FLOPTYPE && set /a sectbal=%FLOPTYPE% * 2
if not exist CHS if not exist DISKTYPE || set /a imgsize=%SECTORS% * 512 ! set /a imgsize=%sectbal% * 512
set SECTORS= && set SIZE=
if not %DEVICE%==(rd) && set "FILE=%DEVICE%%%PATH%%%NAME%%%EXT%" && set DEVICE= && set PATH= && set NAME= && set EXT= && set choice= && set numplus= && set rename= ! set PATH= && set NAME= && set EXT= && set choice= && set numplus= && set rename=
## /RDSIZE:n => near 4g rdbase must be set at 4g, otherwise crash in :rdclean - current choice is rdbase=4g above /RSIZE:3500
if not exist rdbase && if not exist RDSIZE && set /A rdbase=290m ! if not exist rdbase && if "%RDSIZE%"=="MAX" && set /A rdbase=290m ! if not exist rdbase && if %RDSIZE%<=3500m && set /A rdbase=290m ! if not exist rdbase && set /A rdbase=4g ! set rdbase=%rdbase% &; call :makeramdisk "%DEVICE%" "%rdbase%" "%imgsize%" "%LOG%"
#NotAlwaysStable#if not exist rdbase && set /A rdbase=64m ! set rdbase=%rdbase% &; call :makeramdisk "%DEVICE%" "%rdbase%" "%imgsize%" "%LOG%"
if %result%==0 && goto :eov
if %disk:~1,2%==hd && call :preparembr &; if %result%==0 && goto :eov
if %disk:~1,2%==fd && set ptstart=0
if %disk:~1,2%==fd && set /a ptlength=%sectbal%
if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && set /A address=446+8 &; call :read %address% (rd)0+1 &; set /a ptstart=%result%&0xffffffff &; if %ptstart%==0 && echo Abort: Can not read ptstart from MBR in ram-disk && set result=0 && goto :eov
if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && set /A address=446+12 &; call :read %address% (rd)0+1 &; set /a ptlength=%result%&0xffffffff &; if %ptlength%==0 && echo Abort: Can not read ptlength from MBR in ram-disk && set result=0 && goto :eov
if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && setlocal && set /A address=446+8 &; call :read %address% (rd)0+1 &; set /a ebrstart=%result%&0xffffffff &; set /A address=%ebrstart% * 512 + 446 + 8 &; call :read %address% (rd)0+1 &; set /a ptstart=%result%&0xffffffff+%ebrstart% &; set /A address=%ebrstart% * 512 + 446 + 12 &; call :read %address% (rd)0+1 &; set /a ptlength=%result%&0xffffffff &; if %ptlength%==0 && echo Abort: Can not read ptlength from MBR in ram-disk && endlocal && set result=0 && goto :eov ! endlocal && set ptstart=%ptstart% && set ptlength=%ptlength%
## TODO: Right provider, depending on jmpBOOT????
#BADforFAT32!NoFilesShowedWithout#if not exist bootcode && set oemname=\x20\x20\x20\x20\x20\x20\x20\x20
set bytepsec=x00\x02
if %fattype:~0,5%==FAT32 && set FLOPTYPE=
if not exist FLOPTYPE && call :getsectorspercluster &; if %result%==0 && goto :eov
#BADHEREwith/NOTRM#if not %floppy%==RM && goto :rsrvsect
if exist FLOPTYPE && call :FLOPTYPEsecperclusmediabyt &; goto :rsrvsect
if not %floppy%==RM && goto :rsrvsect
if %heads%==2 &; if not %sectrack%==9 if not %sectrack%==15 || set mediabyt=xF9 && goto :rsrvsect
if %heads%==1 && if %cylinder%==80 && if %sectrack%==8 && set mediabyt=xFA && goto :rsrvsect
if %heads%==2 && if %cylinder%==80 && if %sectrack%==8 && set mediabyt=xFB && goto :rsrvsect
if %heads%==1 && if %cylinder%==40 && if %sectrack%==9 && set mediabyt=xFD && goto :rsrvsect
#BAD?#if %heads%==1 && if %cylinder%==40 && if %sectrack%==9 && set mediabyt=xFC && goto :rsrvsect
if %heads%==2 && if %cylinder%==40 && if %sectrack%==9 && set mediabyt=xFD && goto :rsrvsect
if %heads%==1 && if %cylinder%==40 && if %sectrack%==8 && set mediabyt=xFF && goto :rsrvsect
#BAD?#if %heads%==1 && if %cylinder%==40 && if %sectrack%==8 && set mediabyt=xFE && goto :rsrvsect
if %heads%==2 && if %cylinder%==40 && if %sectrack%==8 && set mediabyt=xFF && goto :rsrvsect
set mediabyt=xF0 && goto :rsrvsect
:rsrvsect
if %floppy%==NORM && set mediabyt=xF8
if exist rootentr && if not %fattype:~0,5%==FAT32 && set /A rootentr=%rootentr%/16 &; set /A rootentr=%rootentr% * 16 &; set rootentr=0000%rootentr:~2% &; set rootentr=x%rootentr:~-2,2%\x%rootentr:~-4,2%
if %fattype:~0,5%==FAT32 && setlocal && set /a secclus=0%secpclus% &; if %rootentr%>=65025 && set rootentr=65536 ! if not exist rootentr && set rootentr=16 ! set rootentr=%rootentr% &; set /a rsrvclus=%rootentr% * 32 / 512 / %secclus% &; if %rsrvclus%==0 && if not %rootentr%==0 && set rsrvclus=1 ! set rsrvclus=%rsrvclus% &; endlocal && set rsrvclus=%rsrvclus% && set rootentr=
if exist FLOPTYPE && call :FTsecpfatrootentr ! call :getsectorsperfat &; if %result%==0 && goto :eov
if exist FLOPTYPE && set rsrvsect=
call :rdclean &; if %result%==0 && goto :eov
if exist bootcode && call :writepbrbootcode &; if %result%==0 && goto :eov
if not exist bootcode && set jump=xEB\x00\x90
## TODO: Right provider, depending on jmpBOOT????
if not exist bootcode && set oemname=IBM\x20\x202.0
if exist rsrvsect && set /A rsrvsect=%rsrvsect% &; set rsrvsect=0000%rsrvsect:~2% &; set rsrvsect=x%rsrvsect:~-2,2%\x%rsrvsect:~-4,2%
if not exist rsrvsect && if not %fattype:~0,5%==FAT32 && set rsrvsect=x01\x00
if not exist rsrvsect && if %fattype:~0,5%==FAT32 && set rsrvsect=x20\x00
set numfats=x02
if %fattype:~0,5%==FAT32 && set rootentr=x00\x00 ! if not exist rootentr && set rootentr=x00\x02
if %ptlength%>=65536 && set totsec16=x00\x00
if %ptlength%<=65535 && set /A arg32=%ptlength% &; call :arg32BE
if %ptlength%<=65535 && set totsec16=%arg32:~0,7%
if not exist mediabyt && set mediabyt=xF8
if %result%==0 && goto :eov ! set FLOPTYPE=
set /A arg32=%sectrack% ;; call :arg32BE ;; set sectrack=%arg32:~0,7%
set /A arg32=%heads% ;; call :arg32BE ;; set numheads=%arg32:~0,7%
if %cylinder%>=1026 && set numheads=xFF\x00 && set sectrack=x3F\x00
## NEW:SetHiddenSectorsOnFDD
if exist HIDDSEC && if %disk:~1,2%==fd && set /A arg32=%HIDDSEC% ! set /A arg32=%ptstart%
#ORG#set /A arg32=%ptstart%
call :arg32BE
set hiddsec=%arg32% && set arg32=
#DEBUG#pause HIDDSEC=%HIDDSEC% hiddsec=%hiddsec%
if %disk:~1,2%==fd &; if not exist HIDDSEC && set hiddsec=x00\x00\x00\x00 ! set HIDDSEC=
#ORG#if %disk:~1,2%==fd && set hiddsec=x00\x00\x00\x00
set /A arg32=%ptlength%
call :arg32BE
set totsec32=%arg32% && set arg32=
if %ptlength%<=65535 && set totsec32=x00\x00\x00\x00
#NONEED???#if %fattype:~0,5%==FAT12 && if exist FLOPTYPE && set totsec32=x00\x00\x00\x00
if %fattype:~0,5%==FAT32 && set extflags=x00\x00
if exist drivenum || if %disk:~1,2%==fd && set drivenum=x00
if %disk:~1,2%==hd && set drivenum=x80
call :uuid &; if %result%==0 && goto :eov
set magicbyt=x55\xAA
if "%V%"=="/V" &; if %disk:~1,2%==fd && echo Create %fattype:~0,5% floppy on (rd) ! if "%LOG%"=="/LOG" && echo Create %fattype:~0,5% logical partition on (rd) ! echo Create %fattype:~0,5% primary partition on (rd) &; set check= &; set /p /u "check= Start writing PBR on (rd)%ptstart%+1? N=quit Y=yes > " && echo ! echo && set check=
if "%V%"=="/V" &; if %check:~0,1%==Y && set check= ! echo Aborted by user && set result=0 && goto :eov
errorcheck off
if "%V%"=="/V" &; if not exist bootcode && echo Write Bootcode \%jump% (3 bytes) and OEM-name %oemname% (8 bytes)
if not exist bootcode &; raw write (rd)%ptstart%+1 \%jump%%%oemname% > nul && set jump= && set oemname= ! echo Bad write of Bootcode jump (3 bytes) and OEM-name (8 bytes)%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write BIOS Parameter Block (1-11)=bytes
if "%V%"=="/V" &; echo Write bytepsec(2) secpclus(1) rsrvsect(2)
raw write --offset=0x0B (rd)%ptstart%+1 \%bytepsec%\%secpclus%\%rsrvsect% > nul && set secpclus= && set rsrvsect= ! echo Bad write of bytepsec(2) secpclus(1) rsrvsect(2)%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write numfats(1) rootentr(2) totsec16(2) mediabyt(1) fatsz16(2) sectrack(2) numheads(2)
raw write --offset=0x10 (rd)%ptstart%+1 \%numfats%\%rootentr%\%totsec16%\%mediabyt%\%fatsz16%\%sectrack%\%numheads% > nul && set rootentr= && set totsec16= && set fatsz16= && set numheads= ! echo Bad write of numfats(1) rootentr(2) totsec16(2) mediabyt(1) fatsz16(2) sectrack(2) numheads(2)%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write hiddsec(4)
raw write --offset=0x01C (rd)%ptstart%+1 \%hiddsec% > nul && set hiddsec= ! echo Bad write of hiddsec(4)%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write totsec32(4)
raw write --offset=0x020 (rd)%ptstart%+1 \%totsec32% > nul && set totsec32= ! echo Bad write of totsec32%NULL% && set result=0 && goto :eov
if %fattype:~0,5%==FAT32 && goto :fat32ebr
if "%V%"=="/V" &; echo Write FAT12/16 Extended BIOS Parameter Block
:fat16ebr
if "%V%"=="/V" &; echo Write drivenum(1) rsrv(1) extbtsign(1) volumeid(4) vollabel(11) fattype(8)
raw write --offset=0x24 (rd)%ptstart%+1 \%drivenum%\x00\x29\%volumeid%NO\x20\NAME\x20\x20\x20\x20%fattype:~0,5%\x20\x20\x20 > nul && set drivenum= && set volumeid= ! echo Bad write of drivenum(1) rsrv(1) extbtsign(1) volumeid(4) vollabel(11) fattype(8)%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write Magic Bytes (2)
raw write --offset=0x1FE (rd)%ptstart%+1 \%magicbyt% > nul && set magicbyt= ! echo Bad write of magic byte: %magicbyt%%%NULL% && set result=0 && goto :eov
goto :afterfat32ebr
:fat32ebr
if "%V%"=="/V" &; echo Write FAT32 Extended BIOS Parameter Block
if "%V%"=="/V" &; echo Write fatsz32(4) extflags(2) fsver(2) rootclus(4) fsinfo(2) bkbootsc(2) reserved(12)
#TOONEW#if exist rootclus && set rootclus=00000000%rootclus:~2% &; pause rootclus=%rootclus% &; raw write --offset=0x24 (rd)%ptstart%+1 \%fatsz32%\%extflags%\x00\x00\x%rootclus:~-2,2%\x%rootclus:~-4,2%\x%rootclus:~-6,2%\x%rootclus:~-8,2%\x01\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul && set fatsz32= && set extflags= ! echo Bad write of: fatsz32(4), extflags(2), fsver(2), rootclus(4), fsinfo(2), bkbootsc(2), reserved(12)%NULL% && set result=0 && goto :eov
#TOONEW#if not exist rootclus &; raw write --offset=0x24 (rd)%ptstart%+1 \%fatsz32%\%extflags%\x00\x00\x02\x00\x00\x00\x01\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul && set fatsz32= && set extflags= ! echo Bad write of: fatsz32(4), extflags(2), fsver(2), rootclus(4), fsinfo(2), bkbootsc(2), reserved(12)%NULL% && set result=0 && goto :eov
raw write --offset=0x24 (rd)%ptstart%+1 \%fatsz32%\%extflags%\x00\x00\x02\x00\x00\x00\x01\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul && set fatsz32= && set extflags= ! echo Bad write of: fatsz32(4), extflags(2), fsver(2), rootclus(4), fsinfo(2), bkbootsc(2), reserved(12)%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write drivenum(1) rsrv(1) extbtsign(1) volumeid(4) vollabel(11) fattype(8)
raw write --offset=0x40 (rd)%ptstart%+1 \%drivenum%\x00\x29\%volumeid%NO\x20\NAME\x20\x20\x20\x20%fattype:~0,5%\x20\x20\x20 > nul && set drivenum= && set volumeid= ! echo Bad write drivenum(1), rsrv(1), extbtsign(1), volumeid(4), vollabel(11), fattype(8)%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write Magic Bytes(2) to sector 0
raw write --offset=0x1FE (rd)%ptstart%+1 \%magicbyt% > nul || echo Bad write of Magic Bytes(2) to sector 0%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write FAT32 sector 1
raw write --offset=512 (rd)%ptstart%+2 RRaA > nul || echo Bad write of signature RRaA in FAT32 sector 1%NULL% && set result=0 && goto :eov
raw write --offset=0x3E4 (rd)%ptstart%+2 rrAa\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul || echo Bad write of signature rraA in FAT32 sector 1%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write Magic Bytes(4) sector 1
raw write --offset=0x3FC (rd)%ptstart%+2 \x00\x00\%magicbyt% > nul || echo Bad write of Magic Bytes(4) sector 1%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write Magic Bytes(2) sector 2
raw write --offset=0x5FE (rd)%ptstart%+3 \%magicbyt% > nul && set magicbyte= ! echo Bad write of Magic Bytes(2) sector 2%NULL% && set result=0 && goto :eov
:afterfat32ebr
call :writefat &; if %result%==0 && goto :eov ! set mediabyt=
if "%V%"=="/V" &; echo Write Volume Label to first Directory Entry
if %numfats%==x01 && set startdir=%offsetf2%
if %numfats%==x02 && set /a startdir=%offsetf2%+%sectpfat%
raw write (rd)%startdir%+1 \xE5\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x21 > nul || echo Bad write of deleted empty label%NULL% && set result=0 && goto :eov
if exist VOLLABEL && call :maketime "%@time%" &; if exist timeLE && raw write --offset=0x16 (rd)%startdir%+1 \%timeLE% > nul && set timeLE= ! echo Bad write of time to Directory Volume Label%NULL% && set result=0 && goto :eov
if exist VOLLABEL && call :makedate "%@date%" &; if exist dateLE && raw write --offset=0x18 (rd)%startdir%+1 \%dateLE% > nul && set dateLE= ! echo Bad write of date to Directory Volume Label%NULL% && set result=0 && goto :eov
if exist VOLLABEL &; raw write (rd)%startdir%+1 %VOLLABEL% > nul || echo Bad write of Directory Volume Label%NULL% && set result=0 && goto :eov
if exist VOLLABEL && if not %fattype:~0,5%==FAT32 &; raw write --offset=0x2B (rd)%ptstart%+1 %VOLLABEL% > nul && set VOLLABEL= ! echo Bad write of Bootsector Volume Label%NULL% && set result=0 && goto :eov
if not %fattype:~0,5%==FAT32 && goto :showbefore
if exist VOLLABEL && raw write --offset=0x47 (rd)%ptstart%+1 %VOLLABEL% > nul || echo Bad write of Bootsector Volume Label%NULL% && set result=0 && goto :eov
if exist VOLLABEL &; raw write --offset=0xC47 (rd)%ptstart%+7 %VOLLABEL% > nul && set VOLLABEL= ! echo Bad write of Backup Bootsector Volume Label%NULL% && set result=0 && goto :eov
#ORG#if exist VOLLABEL && if %fattype:~0,5%==FAT32 &; raw write --offset=0x47 (rd)%ptstart%+1 %VOLLABEL% > nul || echo Bad write of Bootsector Volume Label%NULL% && set result=0 && goto :eov
#ORG#if exist VOLLABEL && if %fattype:~0,5%==FAT32 &; raw write --offset=0xC47 (rd)%ptstart%+7 %VOLLABEL% > nul && set VOLLABEL= ! echo Bad write of Bootsector Volume Label%NULL% && set result=0 && goto :eov
if "%V%"=="/V" &; echo Write backup FAT32 (normally to sectors 6-8)
#ORG#if "%V%"=="/V" &; if %fattype:~0,5%==FAT32 && echo Write backup FAT32 (normally to sectors 6-8)
#ORG:FAT32CopyBootsectorsWithVOLLABELinSectorOButWithoutFreeClus/NextFree#
raw dd if=(rd)%ptstart%+1 of=(rd)%ptstart%+7 skip=0 seek=6 > nul || echo Bad dd-copy of backup of first bootsector%NULL% && set result=0 && goto :eov
raw dd if=(rd)%ptstart%+2 of=(rd)%ptstart%+8 skip=1 seek=7 > nul || echo Bad dd-copy of backup of second bootsector%NULL% && set result=0 && goto :eov
raw dd if=(rd)%ptstart%+3 of=(rd)%ptstart%+9 skip=2 seek=8 > nul || echo Bad dd-copy of backup of third bootsector%NULL% && set result=0 && goto :eov
#ORG#if %fattype:~0,5%==FAT32 && raw dd if=(rd)%ptstart%+1 of=(rd)%ptstart%+7 skip=0 seek=6 > nul || echo Bad dd-copy of backup of first bootsector%NULL% && set result=0 && goto :eov
#ORG#if %fattype:~0,5%==FAT32 && raw dd if=(rd)%ptstart%+2 of=(rd)%ptstart%+8 skip=1 seek=7 > nul || echo Bad dd-copy of backup of second bootsector%NULL% && set result=0 && goto :eov
#ORG#if %fattype:~0,5%==FAT32 && raw dd if=(rd)%ptstart%+3 of=(rd)%ptstart%+9 skip=2 seek=8 > nul || echo Bad dd-copy of backup of third bootsector%NULL% && set result=0 && goto :eov
#EARLIER#if not %fattype:~0,5%==FAT32 && goto :showbefore
call :read 0xD (rd)%ptstart%+1 &; set /a secpclus=%result%&0xff
call :read 0xE (rd)%ptstart%+1 &; set /a reserved=%result%&0xffff
call :read 0x20 (rd)%ptstart%+1 &; set /A totsect=%result%&0xffffffff
call :read 0x24 (rd)%ptstart%+1 &; set /A fatsz32=%result%&0xffffffff
#TOONEW#set /a clusters=%totsect%-%fatsz32%-%fatsz32%-%reserved%/%secpclus% &; if %rootclus%>=2 && set /a clusters=%clusters%-2+%rootclus%
set /a clusters=%totsect%-%fatsz32%-%fatsz32%-%reserved%/%secpclus%
#NOTGOOD#: reserved 32 + 2x fatsz32 missing & (rd) not fully ... (?) now
#BAD# set /A arg32=-%numfats:~2% * %sectpfat% / %secpclus% + %clusters%
## 1 cluster less, because first cluster is counted too: NUL???
if %rsrvclus%>=2 && set /a arg32=%clusters%-%rsrvclus% ! set /a arg32=%clusters%-1
set /A arg32=%arg32%
call :arg32BE
set freeclus=%arg32% && set arg32=
if "%V%"=="/V" &; echo Write Number of free clusters (FSinfo)
raw write --offset=0x3E8 (rd)%ptstart%+2 \%freeclus% > nul && set freeclus= ! echo Bad write of Number of free clusters (FSinfo)%NULL% && set result=0 && goto :eov
#TOONEW#if exist rootclus && set /A nextfree=%rootclus% ! set /A nextfree=2 &; if %rsrvclus%>=2 && set /A nextfree=%nextfree%+%rsrvclus%-1
if %rsrvclus%>=2 && set /A nextfree=%rsrvclus%+1 ! set /A nextfree=2
set arg32=%nextfree%
call :arg32BE
set nextfree=%arg32% && set arg32=
if "%V%"=="/V" &; echo Write NextFree cluster (FSinfo)
raw write --offset=0x3EC (rd)%ptstart%+2 \%nextfree% > nul && set nextfree= ! echo Bad write of NextFree cluster (FSinfo)%NULL% && set result=0 && goto :eov
#NOT:FAT32CopyBootsectorsWithVOLLABELinSectorOButWithFreeClus/NextFree#
#NOT-leave Total/Free clusters to default#if %fattype:~0,5%==FAT32 && raw dd if=(rd)%ptstart%+1 of=(rd)%ptstart%+7 skip=0 seek=6 > nul || echo Bad dd-copy of backup of first bootsector%NULL% && set result=0 && goto :eov
#NOT-leave Total/Free clusters to default#if %fattype:~0,5%==FAT32 && raw dd if=(rd)%ptstart%+2 of=(rd)%ptstart%+8 skip=1 seek=7 > nul || echo Bad dd-copy of backup of second bootsector%NULL% && set result=0 && goto :eov
#NOT-leave Total/Free clusters to default#if %fattype:~0,5%==FAT32 && raw dd if=(rd)%ptstart%+3 of=(rd)%ptstart%+9 skip=2 seek=8 > nul || echo Bad dd-copy of backup of third bootsector%NULL% && set result=0 && goto :eov
:showbefore
if not "%Q%"=="/Q" &; errorcheck off
#BADfor(rd)??#
set sectbal=
if not "%Q%"=="/Q" &; setlocal && set * && set disk=%disk% && set imgsize=%imgsize% && set "DISKTYPE=%DISKTYPE%" && set "CHS=%CHS%" && set cylinder=%cylinder% && set heads=%heads% && set /a sectrack=0%sectrack:~0,3% && set /a bytepsec=0%bytepsec:~-3,3%%%bytepsec:~1,2% &; if not exist cylinders && set /a cylinders=%imgsize%>>9/%heads%/%sectrack% ! set cylinders=%cylinders% &; set /a sectors=%imgsize%>>9 &; if exist DISKTYPE && echo Image size: %imgsize% bytes  %DISKTYPE% ! if exist CHS && echo Image size: %imgsize% bytes  %CHS% ! echo Image size: %imgsize% bytes  CHS=%cylinder%/%heads%/%sectrack%  Sectors/Size=%sectors%/%bytepsec% &; endlocal && set DISKTYPE= && set CHS=
#???#gsize% bytes (Volume sector count/size=%sectors%/%bytepsec%) #! echo Image size: %imgsize% bytes (C/H/S=%cylinder%/%heads%/%sectrack%, sector count/size=%sectors%/%bytepsec%) &; endlocal && set DISKTYPE= && set CHS=
call :fatinfo &; if %result%==0 && goto :eov
if not "%Q%"=="/Q" &; debug msg=1
if not "%Q%"=="/Q" && if exist @uefi &; if %disk:~1,2%==fd && uuid (rd)
#ORG#if not %floppy%==NORM && if not "%Q%"=="/Q" && if exist @uefi &; if %disk:~1,2%==fd && uuid (rd)
if not "%Q%"=="/Q" && if not exist @uefi &; if %disk:~1,2%==fd && uuid (rd) ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && uuid (rd,0) ! if %disk:~1,2%==hd && uuid (rd,4)
#ORG#if not "%Q%"=="/Q" && if not exist @uefi &; if %disk:~1,2%==fd && if not %floppy%==NORM && uuid (rd) ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && uuid (rd,0) ! if %disk:~1,2%==hd && uuid (rd,4)
if not "%Q%"=="/Q" && if exist @uefi && if %disk:~1,2%==fd && vol (rd)
#ORG#if not %floppy%==NORM && if not "%Q%"=="/Q" && if exist @uefi && if %disk:~1,2%==fd && vol (rd)
if not "%Q%"=="/Q" && if not exist @uefi &; if %disk:~1,2%==fd && vol (rd) ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && vol (rd,0) ! if %disk:~1,2%==hd && vol (rd,4)
#ORG#if not "%Q%"=="/Q" && if not exist @uefi &; if %disk:~1,2%==fd && if not %floppy%==NORM && vol (rd) ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && vol (rd,0) ! if %disk:~1,2%==hd && vol (rd,4)
if not "%Q%"=="/Q" &; debug msg=0
if not "%Q%"=="/Q" &; if not %fattype:~0,5%==FAT32 &; raw cat --skip=0x2B --length=11 (rd)%ptstart%+1 | set bslabel= &; echo Label in bootsector: %bslabel%
if not "%Q%"=="/Q" &; if %fattype:~0,5%==FAT32 &; raw cat --skip=0x47 --length=11 (rd)%ptstart%+1 | set bslabel= &; echo Label in bootsector: %bslabel%
## Next line: needs extra echo if contined to make file
#NoExtraEcho#if not "%Q%"=="/Q" &; if not exist bootcode && echo -n Boot code: None ! if exist BOOTCODE && echo -n %BOOTCODE%; PBR boot code: %bootcode% ! echo -n PBR boot code: %bootcode% &; echo -n -e ;\x20OEM:\x20 &; if %disk:~1,2%==fd && cat --skip=3 --length=8 (rd)+1 && echo ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && cat --skip=3 --length=8 (rd,0)+1 && echo ! if %disk:~1,2%==hd && cat --skip=3 --length=8 (rd,4)+1 && echo
## Next line: only echo if on (rd)
if not "%Q%"=="/Q" &; if not exist bootcode && echo -n Boot code: None ! if exist BOOTCODE && echo -n %BOOTCODE%  PBR boot code: %bootcode% ! echo -n PBR boot code: %bootcode% &; echo -n -e \x20\x20OEM:\x20 &; if %disk:~1,2%==fd && cat --skip=3 --length=8 (rd)+1 && echo ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && cat --skip=3 --length=8 (rd,0)+1 && echo ! if %disk:~1,2%==hd && cat --skip=3 --length=8 (rd,4)+1 && echo &; if not exist FILE && echo
if not %DEVICE%==(rd) &; delmod -l fat > nul && call :makeimagefile "%FILE%" %imgsize% %contigu% %V% %Q% &; if %result%==0 && goto :eov
if not %DEVICE%==(rd) &; delmod -l fat > nul && call :ddcopyback %V% %Q% &; if %result%==0 && goto :eov
if not %DEVICE%==(rd) &; delmod -l fat > nul || set result=0 && goto :eov
if not %result%==0 && set result=1
## TopMem!
set /A rdbase=*0x82D0 && set /A rdsize=*0x82D8&0xffffffff &; if %DEVICE%==(rd) && if %result%==1 && set rdbase0=%rdbase% && set rdsize0=%rdsize%
#LowMemOnly#set /A rdbase=*0x82D0&0xffffffff && set /A rdsize=*0x82D8&0xffffffff
#MAYBE#echo crc32rd=%crc32rd%
#MAYBE#set "RAMDISK=set imgsize=%imgsize% && set rdbase=%rdbase% && set rdsize=%rdsize% && set disk=%disk% && set LOG=%LOG% && set crc32rd=%crc32rd%"
set "RAMDISK=set imgsize=%imgsize% && set rdbase=%rdbase% && set rdsize=%rdsize% && set disk=%disk% && set LOG=%LOG% && set rdbase0=%rdbase0% && set rdsize0=%rdsize0%"
if %result%==1 && if exist %FILE% && if exist rdbase0 && if exist rdsize0 &; map --rd-base=%rdbase0% && map --rd-size=%rdsize0%
:eov
if %result%==0 && if not exist FILE && if exist rdbase0 && if exist rdsize0 &; map --rd-base=%rdbase0% && map --rd-size=%rdsize0%
call Fn.11 "%INSMOD%" "fat" |; delmod -l fat > nul && delmod fat > nul
call Fn.11 "%INSMOD%" "FATLFN.LLL" |; delmod -l fatlfn.lll > nul && delmod fatlfn.lll > nul
call Fn.11 "%INSMOD%" "ATTRIBFT.LLL" |; delmod -l attribft.lll > nul && delmod attribft.lll > nul
#ORG#delmod -l fat > nul && delmod fat > nul
#ORG#delmod -l fatlfn.lll > nul && delmod fatlfn.lll > nul
#ORG#delmod -l attribft.lll > nul && delmod attribft.lll > nul
if %pagersts%==1 && pager on > nul ! pager off > nul
debug %debugsts% > nul
debug msg=3
endlocal && set result=%result% && set "RAMDISK=%RAMDISK%"
goto :eof
#========================================================================
# SUB-ROUTINES
#========================================================================
:maketime
## DirectoryEntryOffset=0x16
setlocal && set *
set time=%~1 &; call Fn.11 "%time%" ":" && set colon=Y
if %colon%==Y &; if "%time:~2,1%"==":" && if "%time:~5,1%"==":" && if not "%time:~7%"=="" && set hour=%time:~0,2% && set minute=%time:~3,2% && set second=%time:~6,2% ! endlocal && set result=0 && set "message=Format of Time must be hh[:]mm[:]ss and not %time%" && goto :eof
if %colon%==Y && call Fn.11 "%hour%%%minute%%%second%%%hundreth%" ":" && echo Format of Time must be hh[:]mm[:]ss and not %time% && endlocal && set result=0 && goto :eof
if not %colon%==Y &; if not "%time:~5,1%"=="" && set hour=%time:~0,2% && set minute=%time:~2,2% && set second=%time:~4,2% ! endlocal && set result=0 && set "message=Format of Time must be hh[:]mm[:]ss and not %time%" && goto :eof
if not %colon%==Y && if %mode%==setcreatime &; if not "%time:~7%"=="" && if "%time:~8%"=="" && if %mode%==setcreatime && set hundreth=%time:~6,2%
if %hour%>=24 && set "message=Hour %hour% is not valid" ;; if not exist message && if %minute%>=60 && set "message=Minute %minute% is not valid" ;; if not exist message && if %second%>=60 && set "message=Second %second% is not valid" ;; if exist message && endlocal && set "message=%message%" && set result=0 && goto :eof
set /A hour=%hour%<<11 ;; set /A minute=%minute%<<5 ;; if %mode%==setcreatime && calc %second% % 2 && set /A hundreth=%hundreth%+100 && set /A second=%second%-1 ;; set /A second=%second%/2
set /A time=%hour%+%minute%+%second% ;; set time=0000%time:~2% ;; set timeLE=x%time:~-2,2%\x%time:~-4,2%
endlocal && set timeLE=%timeLE%
goto :eof
::
:makedate
## DirectoryEntryOffset=0x18
setlocal && set *
set date=%~1 &; call Fn.11 "%date%" "-" && set hyphen=Y
if %hyphen%==Y &; if "%date:~4,1%"=="-" && if "%date:~7,1%"=="-" && if "%date:~10%"=="" && set year=%date:~0,4% && set month=%date:~5,2% && set day=%date:~8,2% ! endlocal && set result=0 && set "message=Format of Date must be yyyy[-]mm[-]dd and not %date%" && goto :eof
if %hyphen%==Y && call Fn.11 "%year%%%month%%%day%" "-" && echo Format of Date must be yyyy[-]mm[-]dd and not %date% && endlocal && set result=0 && goto :eof
if not %hyphen%==Y &; if "%date:~8%"=="" && set /a year=%date:~0,4% && set /a month=%date:~4,2% && set /a day=%date:~6,2% ! endlocal && set result=0 && set "message=Format of Date must be yyyy[-]mm[-]dd and not %date%" && goto :eof
if not %year%<=1979 if not %year%>=2108 || set "message=Year %year% is not valid" ;; if not exist message && if not %month%<=0 if not %month%>=13 || set "message=Month %month% is not valid" ;; if not exist message && if not %day%<=0 if not %day%>=32 || set "message=Day %day% is not valid" ;; if not exist message && if %day%==31 && checkrange 2,4,6,9,11 calc %month% && set "message=Date %date% is not valid" ;; if not exist message && if %day%==30 && if %month%==02 && set "message=Date %date% is not valid" ;; if not exist message && if %day%==29 && if %month%==02 && calc %year% % 4 && set "message=Date %date% is not valid" ;; if not exist message && if %year%==2100 && if %month%==02 && if %day%==29 && set "message=Date %date% is not valid" ;; if exist message && endlocal && set "message=%message%" && set result=0 && goto :eof
set /A year=%year%-1980 ;; set /A year=%year%<<9 ;; set /A month=%month%<<5 ;; set /A date=%year%+%month%+%day% ;; set date=0000%date:~2% ;; set dateLE=x%date:~-2,2%\x%date:~-4,2%
endlocal && set dateLE=%dateLE%
goto :eof
::
:parseCHS
if "%~1"=="" && set result=0 && goto :eof
setlocal
pause --wait=0 %CHS% > (md)0x300+1
raw cat --locate=/ --number=1 (md)0x300+1 > nul &; set /a length=%?%
raw cat --skip=0 --length=%length% (md)0x300+1 | set /a cylinder= && set /a skip=%length%+1
raw cat --skip=%skip% --locate=/ --number=1 (md)0x300+1 > nul &; set /a length=%?%-%skip%
raw cat --skip=%skip% --length=%length% (md)0x300+1 | set /a heads= && set /a skip=%skip%+%length%+1
raw cat --skip=%skip% --locate=\x0A --number=1 (md)0x300+1 > nul &; set /a length=%?%-%skip%
raw cat --skip=%skip% --length=%length% (md)0x300+1 | set /a sectrack=
## For partial images on (rd): >8GB + test cylinder in hd
if %disk:~1,2%==hd &; if not %cylinder%==0 if not %cylinder%>=1026 if not %heads%==0 if not %heads%>=256 if not %sectrack%==0 if not %sectrack%>=64 || endlocal && set result=0 && goto :eof
if %disk:~1,2%==fd &; if not %cylinder%==0 if not %cylinder%>=1025 if not %heads%==0 if not %heads%>=256 if not %sectrack%==0 if not %sectrack%>=64 || endlocal && set result=0 && goto :eof
#ORG#if not %cylinder%==0 if not %cylinder%>=1025 if not %heads%==0 if not %heads%>=256 if not %sectrack%==0 if not %sectrack%>=64 || endlocal && set result=0 && goto :eof
endlocal && set cylinder=%cylinder% && set heads=%heads% && set sectrack=%sectrack%
goto :eof
::
:validate
## FORNOW: RDSIZE max 4g
if exist RDSIZE && if not "%RDSIZE%"=="MAX" &; if not %RDSIZE%<=4g && if not "%Q%"=="/Q" && echo Abort: switch '/RDSIZE:%RDSIZE%' is out of range && set result=0 && goto :eof ! if not %RDSIZE%<=4g && set result=0 && goto :eof ! set /A RDSIZE=%RDSIZE%
#TOONEW#if exist rootclus && if not %fattype:~0,5%==FAT32 &; if not "%Q%"=="/Q" && echo Abort: switch '/ROOTCLUS:%rootclus%' is not compatible with %fattype:~0,5% && set result=0 && goto :eof ! set result=0 && goto :eof
#MaxFor/LOG:4110m+(255*63*512)=4110m+8m
if exist secpclus && if %fattype:~0,5%==FAT32 &; if %secpclus%==128 && if "%LOG%"=="/LOG" && if %SIZE%<=4118m && set /a secpclus=%secpclus% ! if %disk:~1,2%==hd && if %secpclus%==128 && if %SIZE%<=4110m && set /a secpclus=%secpclus% ! if %secpclus%==128 && if %SIZE%<=4102m && set /a secpclus=%secpclus% &; if not "%Q%"=="/Q" && if "%LOG%"=="/LOG" && echo Abort: switch '/SPC:%secpclus%' is not supported with %fattype:~0,5% and %disk:~1,2%-size <=4118MB && set result=0 && goto :eof ! if not "%Q%"=="/Q" && if %disk:~1,2%==hd && echo Abort: switch '/SPC:%secpclus%' is not supported with %fattype:~0,5% with %disk:~1,2%-size <=4110MB && set result=0 && goto :eof ! if not "%Q%"=="/Q" && echo Abort: switch '/SPC:%secpclus%' is not supported with %fattype:~0,5% with %disk:~1,2%-size <=4102MB && set result=0 && goto :eof ! set result=0 && goto :eof
#TEMPORARY#if exist @uefi &; if not %disk:~1,2%==fd && echo Currently not compatible with grub4efi for %disk:~1,2%, use for floppy only && set result=0 && goto :eof
if not exist SIZE && if not exist SECTORS && if not exist CHS &; if not "%Q%"=="/Q" && echo Argument '--SIZE=n' or '--SECTORS=N' or '--CHS=C/H/S' does not exist ! set "Q=%Q%" &; set result=0 && goto :eof
if not %SIZE%<=2048g && if %DEVICE%==(rd) &; if not "%Q%"=="/Q" && echo Size of image-file above 2TB ! set "Q=%Q%" &; set result=0 && goto :eof
if not %SIZE%<=2048g && if %DEVICE%==(rd) &; if not "%Q%"=="/Q" && echo Size of image-file above 2TB ! set "Q=%Q%" &; set result=0 && goto :eof
if %SIZE%>=4g && if not %DEVICE%==(rd) &; if not "%Q%"=="/Q" && echo Size of image-file above 4GB ! set "Q=%Q%" &; set result=0 && goto :eof
#ORG#if %SIZE%>=4g &; if not "%Q%"=="/Q" && echo Size of image-file above 4GB ! set "Q=%Q%" &; set result=0 && goto :eof
if not %DEVICE%==(rd) &; if exist FILE |; if not "%Q%"=="/Q" && echo Argument FILE does not exist or is not valid ! set "Q=%Q%" &; set result=0 && goto :eof
if %DEVICE%==(fd21) &; if not "%Q%"=="/Q" && echo Device %DEVICE% is not a valid floppy disk ! set "Q=%Q%" &; set result=0 && goto :eof
if %DEVICE%==(fd23) &; if not "%Q%"=="/Q" && echo Device %DEVICE% is not a valid floppy disk ! set "Q=%Q%" &; set result=0 && goto :eof
if %DEVICE:~0,3%==(cd &; if not "%Q%"=="/Q" && echo Device %DEVICE% is read-only ! set "Q=%Q%" &; set result=0 && goto :eof
if %DEVICE:~0,3%==(hd && if %DEVICE:~3,1%>=3 && if %DEVICE:~4,1%>=2 &; if not "%Q%"=="/Q" && echo Device %DEVICE% is read-only ! set "Q=%Q%" &; set result=0 && goto :eof
if not %DEVICE%==(rd) && if not %DEVICE:~0,3%==(fd && if not %DEVICE:~0,3%==(hd &; if %DEVICE:~1,-1%>=0x9F &; if not "%Q%"=="/Q" && echo Device %DEVICE% is read-only ! set "Q=%Q%" &; set result=0 && goto :eof
if not %DEVICE%==(rd) &; if not /i "%EXT%"==".IMG" && if not /i "%EXT%"==".IMA" && if not /i "%EXT%"==".RAW" && if not /i "%EXT%"==".BIN" && if not /i "%EXT%"==".HDD" if not /i "%EXT%"==".VMDK" &; if not "%Q%"=="/Q" && echo -e $[0x00]"$[]'%EXT%'$[0x00]"$[]is not a valid image-extension, use .IMG/.IMA/.RAW/.BIN/.HDD/.VMDK ! set "Q=%Q%" &; set result=0 && goto :eof
if exist %FILE% &; if exist Y && set overwrit=Y ! set Y= &; if not exist Y && call :Fn.4 &; set h= && set v0=%v% && set v= &; echo -e $[0x00]"$[]'%FILE%'$[0x00]"$[]exists &; set /p /u "overwrit= Overwrite? (N=quit Y=yes) > " && echo ! echo && set overwrit=N
if exist overwrit && if not exist Y &; call :Fn.4 &; set h= &; if %v0%==%v% && if %v%>=24 && set /a v0=%v%-2 && set /a v1=%v%-1 ! set v0=%v0% && set /a v1=%v0%+1 &; call :Fn.5 0 %v0% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v1% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% && set v0= && set v= && set v1=
if exist %FILE% &; if %overwrit:~0,1%==Y && set overwrit= ! echo -e $[0x00]"$[]'%FILE%'$[0x00]"$[]will not be overwritten, Game Over!%NULL% && set result=0 && goto :eof
if exist FLOPTYPE &; checkrange 4,8,12,14,16,24,28,32,64,128,160,180,320,360,400,640,720,800,820,1200,1440,1600,1680,1760,1840,1920,2400,2880,3120,3200,3520,3600,3825,3840,4320,4590,4800,5760,6000,7200,8100,8400,8640,9180,9600,10080,10800,11520,12240,12960,12000,13200,14400,15360,15840,17280,18432,20160,20385,23040,25920,28800,31680,34560,36864,123264,234752 calc %FLOPTYPE% > nul |; if not "%Q%"=="/Q" && echo Argument '/F:%FLOPTYPE%' is not valid or unsupported ! set "Q=%Q%" &; set result=0 && goto :eof
if exist FLOPTYPE && if %fattype:~0,5%==FAT12 &; checkrange 234752 calc %FLOPTYPE% > nul &; if not "%Q%"=="/Q" && echo Argument '/F:%FLOPTYPE%' is not valid with argument '/%fattype:~0,5%' ! set "Q=%Q%" &; set result=0 && goto :eof
if exist FLOPTYPE && if %fattype:~0,5%==FAT16 &; checkrange 4,8,12,14,16,24,28,32,64,128,160,180,320,360,400,640,720,800,820,1200,1440,1600,1680,1760,1840,1920 calc %FLOPTYPE% > nul &; if not "%Q%"=="/Q" && echo Argument '/F:%FLOPTYPE%' is not valid with argument '/%fattype:~0,5%' ! set "Q=%Q%" &; set result=0 && goto :eof
if exist FLOPTYPE && if %fattype:~0,5%==FAT32 &; checkrange 4,8,12,14,16,24,28,32,64,128,160,180,320,360,400,640,720,800,820,1200,1440,1600,1680,1760,1840,1920,2400,2880,3120,3200,3520,3600,3825,3840,4320,4590,4800,5760,6000,7200,8100,8400,8640,9180,9600,10080,10800,11520,12240,12960,12000,13200,14400,15360,15840,17280,18432,20160,20385,23040,25920,28800,31680 calc %FLOPTYPE% > nul &; if not "%Q%"=="/Q" && echo Argument '/F:%FLOPTYPE%' is not valid with argument '/%fattype:~0,5%' ! set "Q=%Q%" &; set result=0 && goto :eof
## FAT12: absolute minimum: 1 + 2 * 1 + 5 = 8 sectors (ram-disk?) = 4k ; for now 160k
## CHECKHDD: 320 + 63 + 1008 = 1391 CHS 2/16/63 = 2016 >= 1008k LOG:  320 + 1008 + 1008 = 2336 CHS 3/16/63 = 3024 >= 1512k
## MinimumHDD: 320 + 17 + 272 = 609 CHS 3/16/17 =  816 >= 408k  LOG:  320 +  272 +  272 =  864 CHS 4/16/17 = 1088 >=  544k
#NotSoGood#if not exist FLOPTYPE && if %fattype:~0,5%==FAT12 && if %disk:~1,2%==fd &; if not %size%>=4 &; if not "%Q%"=="/Q" && echo %SIZE% bytes is below 4KB for %fattype:~0,5% on %disk:~1% ! set "Q=%Q%" &; set result=0 && goto :eof
#NotSoGood#if not exist FLOPTYPE && if %fattype:~0,5%==FAT12 && if %disk:~1,2%==fd &; if not %size%>=36 &; if not "%Q%"=="/Q" && echo %SIZE% bytes is below 36KB for %fattype:~0,5% on %disk:~1%, use switch /ROOTENTR:n ! set "Q=%Q%" &; set result=0 && goto :eof
if not exist FLOPTYPE && if %fattype:~0,5%==FAT12 && if %disk:~1,2%==fd &; if not %size%>=160 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes / %size%KB is below 160KB for %fattype:~0,5% on %disk:~1%: use an available option of switch /F:floppysize ! set "Q=%Q%" &; set result=0 && goto :eof
if %fattype:~0,5%==FAT12 && if %disk:~1,2%==hd && if %sectrack%==17 &; if not "%LOG%"=="/LOG" && if not %size%>=408 && set result=0 && set low=408KB ! if "%LOG%"=="/LOG" && if not %size%>=544 && set result=0 && set low=544KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo %SIZE% is below %low% for %fattype:~0,5% on %disk:~1% ! if "%LOG%"=="/LOG" && set "Q=%Q%" ! set result= &; set result=0 && goto :eof
if %fattype:~0,5%==FAT12 && if %disk:~1,2%==hd && if not %sectrack%==17 &; if not "%LOG%"=="/LOG" && if not %size%>=1008 && set result=0 && set low=1008KB ! if "%LOG%"=="/LOG" && if not %size%>=1512 && set result=0 && set low=1512KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo %SIZE% is below %low% for %fattype:~0,5% on %disk:~1% ! if "%LOG%"=="/LOG" && set "Q=%Q%" ! set result= &; set result=0 && goto :eof
## FAT12: maximum 4084; SAFER (Jaclaz) = 4078 clusters * 64 + 2 * 12 FAT + 1 reserved + 32 root = 261,049 = 130525k = 127.47m (with 4084: 261433 sectors = 130716.5k = 127.6528m)
## HDD:Plus1Cylinderof 16 heads = +1008 sectors = +504k
## FAT12 with /SPC:128 NOT supported by SCANDISK of MS-DOS 7.1
if not exist FLOPTYPE && if %fattype:~0,5%==FAT12 && if not %secpclus%==128 &; if %disk:~1,2%==fd && if %size%>=130526 && set result=0 && set low=130526KB ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if %size%>=131319 && set result=0 && set low=131319KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if %size%>=131574 && set result=0 && set low=131574KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is not below %low% for %fattype:~0,5% && goto :eof ! goto :eof
if not exist FLOPTYPE && if %fattype:~0,5%==FAT12 && if %secpclus%==128 &; if %disk:~1,2%==fd && if %size%>=261021 && set result=0 && set low=261021KB ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if %size%>=262065 && set result=0 && set low=262065KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if %size%>=262569 && set result=0 && set low=262569KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is not below %low% for %fattype:~0,5% && goto :eof ! goto :eof
#ORG#if not exist FLOPTYPE && if %fattype:~0,5%==FAT12 &; if %disk:~1,2%==fd && if %size%>=130526 && set result=0 && set low=130526KB ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if %size%>=130815 && set result=0 && set low=130815KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if %size%>=131070 && set result=0 && set low=131070KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is not below %low% for %fattype:~0,5% && goto :eof ! goto :eof
## FAT16: minimum 4085 + 2 * 16 FAT + 1 reserved + 32 root = 4150 = 2075k !! only minimum 2079KB is working with formula
#CHECK# FDD: 4150 => CHS 260*2*8 = 4160 AND CHS 44*2*48 = 4224 AND CHS 33*2*63 = 4158 SO >= 2070k IN PRACTICE for SPT 8-63 >=2370k needed
#CHECK1# HDD: 4150 + 63 + 1008 = 5191 sectors => CHS minimum (inluding one test-cylinder) 6/16/63 = 6048 sectors = 3024k AND for /LOG + 1008 = 7/16/63 = 7056 sectors = 3528k
#MINIMUM# HDD: 4150 + 17 + 272 = 4439 sectors => CHS minimum (inluding one test-cylinder) 17/16/17 = 4624 sectors = 2312k AND for /LOG + 272 = 18/16/17 = 4896 sectors = 2448k
if %fattype:~0,5%==FAT16 && if %sectrack%==17 &; if %disk:~1,2%==fd && if not %size%>=2370 && set result=0 && set low=2370KB ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if not %size%>=2312 && set result=0 && set low=2312KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if not %size%>=2448 && set result=0 && set low=2848KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is below %low% for %fattype:~0,5% on %disk:~1% %LOG% && goto :eof ! goto :eof
if %fattype:~0,5%==FAT16 && if not %sectrack%==17 &; if %disk:~1,2%==fd && if not %size%>=2079 && set result=0 && set low=2079KB ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if not %size%>=3024 && set result=0 && set low=3024KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if not %size%>=3528 && set result=0 && set low=3528KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is below %low% for %fattype:~0,5% on %disk:~1% %LOG% && goto :eof ! goto :eof
#BAD#if %fattype:~0,5%==FAT16 && if not %sectrack%==17 &; if %disk:~1,2%==fd && if not %size%>=2075 && set result=0 && set low=2075KB ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if not %size%>=3024 && set result=0 && set low=3024KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if not %size%>=3528 && set result=0 && set low=3528KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is below %low% for %fattype:~0,5% on %disk:~1% %LOG% && goto :eof ! goto :eof
## FAT16: maximum 65524 clusters * 64 + 2 * 256 FAT + 1 reserved + 32 root = 2,147,402,240 = 2,097,040k but 2g=2,097,152k!!
## FAT16: maximum 65524 clusters * 128 + 2 * 256 FAT + 1 reserved + 32 root = 4,294,525,440 = 4,193,808k
## FAT16 with /SPC:128 NOT supported by SCANDISK of MS-DOS 7.1
#BAD!!# FAT16: maximum 65624 clusters * 64 + 2 * 257 FAT + 1 reserved + 32 root = 4,200,451 = 2,100,226k but 2g=2,097,152k!!
if %fattype:~0,5%==FAT16 && if not %secpclus%==128 &; if %disk:~1,2%==fd && if %size%>=2097041 && set high=2097041 ! if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if %size%>=2097545 && set high=2097545 ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if %size%>=2098049 && set high=2098049 &; if not "%Q%"=="/Q" && echo %SIZE% bytes/ %size% KB  is not below %high% for %fattype:~0,5% ! set "Q=%Q%" &; set result=0 && goto :eof
if %fattype:~0,5%==FAT16 && if %secpclus%==128 && if %size%>=4193809 &; if not "%Q%"=="/Q" && echo %SIZE% bytes/ %size% KB is not below 4193809KB for %fattype:~0,5% ! set "Q=%Q%" &; set result=0 && goto :eof
#ORG#if %fattype:~0,5%==FAT16 && if %size%>=2097152 &; if not "%Q%"=="/Q" && echo %SIZE% is not below 2097152KB for %fattype:~0,5% ! set "Q=%Q%" &; set result=0 && goto :eof
#TooLow!#if %fattype:~0,5%==FAT16 && if %size%>=2096769 && echo %SIZE% is too high for %fattype:~0,5% && set result=0 && goto :eof
## FAT32: minimum 65526 clusters + (2x FAT 65526 * 4 = 1024) + 32 reserved =  66582 sectors IN PRACTICE 66640 ???
#ORG# FAT32: minimum 65525 clusters + (2x FAT 65525 * 4 = 1024) + 32 reserved = 66581 sectors IN PRACTICE 66640 ???
#CHECK# FDD: 66640 => CHS 695*2*48 = 66720 AND CHS 926*2*36 = 66672 AND CHS *255*63 = 66672 SO >=33336k and with CHS
#BADfor fat_info# FDD: 66624 = CHS 694*2*48 AND 66600 = CHS 925*2*36 SO >=33300k
#CHECK# HDD: 66640 + 63 + 1008 = 67711 sectors => CHS minimum (inluding one test-cylinder) 68/16/63 = 68544 sectors = 34272k AND for /LOG + 1008 = 69/16/63 = 69552 sectors = 34776k
#MINIMUM# HDD: 66640 + 17 + 272 = 66929 sectors => CHS minimum (inluding one test-cylinder) 247/16/17 = 67184 sectors = 33592k AND for /LOG + 272 = 248/16/17 = 67456 sectors = 33728k
if %fattype:~0,5%==FAT32 && if %disk:~1,2%==fd && if not %size%>=33336 && set result=0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is below 33336KB for %fattype:~0,5% on %disk:~1% && goto :eof ! goto :eof
if %fattype:~0,5%==FAT32 && if %sectrack%==17 &; if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if not %size%>=33592 && set result=0 && set low=33592KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if not %size%>=33728 && set result=0 && set low=33728KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is below %low% for %fattype:~0,5% on %disk:~1% && goto :eof ! goto :eof
if %fattype:~0,5%==FAT32 && if not %sectrack%==17 &; if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && if not %size%>=34272 && set result=0 && set low=34272KB ! if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && if not %size%>=34776 && set result=0 && set low=34776KB ! set result= &; if %result%==0 &; if not "%Q%"=="/Q" && echo Size %SIZE% bytes/ %size% KB is below %low% for %fattype:~0,5% on %disk:~1% && goto :eof ! goto :eof
## CHECK if without memory is possible, because of new FAT-version without bug and if with WRITEMBR
#=NEGATIVE#echo "if exist bootcode && if not %bootcode%==DEF &; if not %bootcode%==FREEDOS if not %bootcode%==NT5 if not %bootcode%==GRUB if not %bootcode%==VISTA if not %bootcode%==WIN7 if not %bootcode%==EFI |; if not "%Q%"=="/Q" && echo Bootcode %bootcode% is not valid ! set "Q=%Q%" &; set result=0 && goto :eof
if exist bootcode && if not %bootcode%==DEF &; if not %bootcode%==ZERO |; if not "%Q%"=="/Q" && echo Bootcode %bootcode% is not valid ! set "Q=%Q%" &; set result=0 && goto :eof
if exist bootcode && if not %bootcode%==DEF &; if %bootcode%==FDOS && set bootcode=FREEDOS ! if %bootcode%==NT && set bootcode=NT5 ! if %bootcode%==ROS && set bootcode=REACTOS ! set bootcode=%bootcode% &; if not %bootcode%==MSDOS33 && if not %bootcode%==MSDOS40 && if not %bootcode%==MSDOS50 && if not %bootcode%==MSDOS70 && if not %bootcode%==MSDOS71 && if not %bootcode%==GRUB && if not %bootcode%==FREEDOS && if not %bootcode%==NT5 && if not %bootcode%==VISTA && if not %bootcode%==WIN7 && if not %bootcode%==WIN8 && if not %bootcode%==WIN10 && if not %bootcode%==REACTOS &; if not "%Q%"=="/Q" && echo Bootcode %bootcode% is not valid ! set "Q=%Q%" &; set result=0 && goto :eof
#ORG#if exist bootcode && if not %bootcode%==DEF &; if %bootcode%==FDOS && set bootcode=FREEDOS ! if %bootcode%==NT && set bootcode=NT5 ! if %bootcode%==ROS && set bootcode=REACTOS ! set bootcode=%bootcode% &; if not %bootcode%==MSDOS33 && if not %bootcode%==MSDOS40 && if not %bootcode%==MSDOS50 && if not %bootcode%==MSDOS71 && if not %bootcode%==GRUB && if not %bootcode%==FREEDOS && if not %bootcode%==NT5 && if not %bootcode%==VISTA && if not %bootcode%==WIN7 && if not %bootcode%==WIN8 && if not %bootcode%==WIN10 && if not %bootcode%==REACTOS &; if not "%Q%"=="/Q" && echo Bootcode %bootcode% is not valid ! set "Q=%Q%" &; set result=0 && goto :eof
if exist bootcode && if %fattype:~0,5%==FAT32 &; if not %bootcode%==MSDOS33 if not %bootcode%==MSDOS40 if not %bootcode%==MSDOS50 if not %bootcode%==MSDOS70 |; if not "%Q%"=="/Q" && echo Bootcode %bootcode% is not valid in case of %fattype:~0,5% ! set "Q=%Q%" &; set result=0 && goto :eof
#ForHighMem!#
if exist rdbase && if not %rdbase%>=64m &; if not "%Q%"=="/Q" && echo Value of RDBASE below 64MB ! set "Q=%Q%" &; set result=0 && goto :eof
#LowMemOnly#if exist rdbase &; if not %rdbase%>=32m && echo Value of RDBASE below 32MB && set result=0 && goto :eof ! if %rdbase%>=4g && echo Value of RDBASE must be below 4GB && set result=0 && goto :eof
#NoTopMem!#setlocal && set /A lowmem=*0x8298&0xffffffff * 1k - 63m && set /A highmem=*0x82C0 * 1k &; set /a lowMB=%lowmem%>>20 && set /a highMB=%highmem%>>20 &; pause lowMB=%lowMB% highMB=%highMB% && if %DEVICE%==(rd) && if %highMB%==0 && if not %SIZE%<=%lowmem% && echo Abort: needed size of (rd) above available %lowMB%MB contiguous memory && set result=0 ! if %DEVICE%==(rd) && if not %highMB%==0 && if not %SIZE%<=%lowmem% && if not %SIZE%<=%highmem% && echo Abort: needed size of (rd) above two available %lowMB%MB + %highMB%MB contiguous memory-regions && set result=0 ! if "%LOG%"=="/LOG" && if not %lowmem%>=24m && if not %highmem%>=24m && echo Abort: size of available contiguous memory below 24MB && set result=0 ! if not %lowmem%>=16m && if not %highmem%>=16m && echo Abort: size of available contiguous memory below 16MB && set result=0 ! set result= &; if %result%==0 && endlocal && set result=0 && goto :eof ! endlocal
## BADforGRUB4EFI
if not exist @uefi && if exist rdbase && setlocal &; if exist RDSIZE && if not /i "%RDSIZE%"=="MAX" && set SIZE=%RDSIZE% ! set RDSIZE=%RDSIZE% &; if not %rdbase%>=4g && set /A lowmem=*0x8298&0xffffffff * 1k - %rdbase% ! set /A lowmem=*0x8298&0xffffffff * 1k &; set /A highmem=*0x82C0 * 1k &; set /a lowMB=%lowmem%>>20 && set /a highMB=%highmem%>>20 && set /a sizeMB=%SIZE%>>20 &; if not %lowmem%>=63m && set "msg=No available memory" ! if %DEVICE%==(rd) && if not %rdbase%>=4g && if not %SIZE%<=%lowmem% && if not /i "%RDSIZE%"=="MAX" && set "msg=%sizeMB%MB needed size of (rd) above available %lowMB%MB contiguous memory" ! if %DEVICE%==(rd) && if %rdbase%>=4g && if not /i "%RDSIZE%"=="MAX" && if not %SIZE%<=%highmem% && set "msg=%sizeMB%MB needed size of (rd) above available %highMB%MB contiguous high memory>=4GB" ! if "%LOG%"=="/LOG" && if not %rdbase%>=4g && if not %lowmem%>=24m && set "msg=Size of available contiguous memory below 24MB" ! if "%LOG%"=="/LOG" && if %rdbase%>=4g && if not %highmem%>=24m && set "msg=Size of available contiguous memory>=4GB below 24MB" ! if not %rdbase%>=4g && if not %lowmem%>=16m && set "msg=Size of available contiguous memory below 16MB" ! if %rdbase%>=4g && if not %highmem%>=16m && set "msg=Size of available contiguous memory>=4GB below 16MB" ! set msg= &; if not exist msg && endlocal ! if "%Q%"=="/Q" && endlocal && set result=0 && goto :eof ! echo %msg% && endlocal && set result=0 && goto :eof
#ORG#if not exist @uefi && if exist rdbase && setlocal &; if not %rdbase%>=4g && set /A lowmem=*0x8298&0xffffffff * 1k - %rdbase% ! set /A lowmem=*0x8298&0xffffffff * 1k &; set /A highmem=*0x82C0 * 1k &; set /a lowMB=%lowmem%>>20 && set /a highMB=%highmem%>>20 && set /a sizeMB=%SIZE%>>20 &; if not %lowmem%>=63m && set "msg=No available memory" ! if %DEVICE%==(rd) && if not %rdbase%>=4g && if not %SIZE%<=%lowmem% && set "msg=%sizeMB%MB needed size of (rd) above available %lowMB%MB contiguous memory" ! if %DEVICE%==(rd) && if %rdbase%>=4g && if not %SIZE%<=%highmem% && set "msg=%sizeMB%MB needed size of (rd) above available %highMB%MB contiguous high memory>=4GB" ! if "%LOG%"=="/LOG" && if not %rdbase%>=4g && if not %lowmem%>=24m && set "msg=Size of available contiguous memory below 24MB" ! if "%LOG%"=="/LOG" && if %rdbase%>=4g && if not %highmem%>=24m && set "msg=Size of available contiguous memory>=4GB below 24MB" ! if not %rdbase%>=4g && if not %lowmem%>=16m && set "msg=Size of available contiguous memory below 16MB" ! if %rdbase%>=4g && if not %highmem%>=16m && set "msg=Size of available contiguous memory>=4GB below 16MB" ! set msg= &; if not exist msg && endlocal ! if "%Q%"=="/Q" && endlocal && set result=0 && goto :eof ! echo %msg% && endlocal && set result=0 && goto :eof
#LowMemOnly#if exist rdbase && setlocal && set /A lowmem=*0x8298&0xffffffff * 1k - %rdbase% &; set /a lowMB=%lowmem%>>20 && set /a sizeMB=%SIZE%>>20 &; if not %lowmem%>=1m && echo No available memory && set result=0 ! if %DEVICE%==(rd) && if not %SIZE%<=%lowmem% && echo Abort: %sizeMB%MB needed size of (rd) above available %lowMB%MB contiguous memory && set result=0 ! if "%LOG%"=="/LOG" && if not %lowmem%>=24m && echo Abort: size of available contiguous memory below 24MB && set result=0 ! if not %lowmem%>=16m && echo Abort: size of available contiguous memory below 16MB && set result=0 ! set result= &; if %result%==0 && endlocal && set result=0 && goto :eof ! endlocal
#BADforGRUB4EFI#
if not exist @uefi && if not exist rdbase && setlocal &; if exist RDSIZE && if not /i "%RDSIZE%"=="MAX" && set SIZE=%RDSIZE% ! set RDSIZE=%RDSIZE% &; set /A lowmem=*0x8298&0xffffffff * 1k - 63m && set /A highmem=*0x82C0 * 1k &; set /a highMB=%highmem%>>20 && set /a lowMB=%lowmem%>>20 &; if not %lowmem%>=63m && set "msg=No available memory" ! if %DEVICE%==(rd) && if not /i "%RDSIZE%"=="MAX" && if not %SIZE%<=%lowmem% && if not %SIZE%<=%highmem% && set "msg=Needed size of (rd) above available %lowMB%MB + %highMB%MB contiguous low and high memory regions" ! if "%LOG%"=="/LOG" && if not %lowmem%>=24m && if not %highmem%>=24m && set "msg=Size of available contiguous memory below 24MB" ! if not %lowmem%>=16m && if not %highmem%>=16m && set "msg=Size of available contiguous memory below 16MB" ! set msg= &; if not exist msg && endlocal ! if "%Q%"=="/Q" && endlocal && set result=0 && goto :eof ! echo %msg% && endlocal && set result=0 && goto :eof
#ORG#if not exist @uefi && if not exist rdbase &; setlocal && set /A lowmem=*0x8298&0xffffffff * 1k - 63m && set /A highmem=*0x82C0 * 1k &; set /a highMB=%highmem%>>20 && set /a lowMB=%lowmem%>>20 &; if not %lowmem%>=63m && set "msg=No available memory" ! if %DEVICE%==(rd) && if not %SIZE%<=%lowmem% && if not %SIZE%<=%highmem% && set "msg=Needed size of (rd) above available %lowMB%MB + %highMB%MB contiguous low and high memory regions" ! if "%LOG%"=="/LOG" && if not %lowmem%>=24m && if not %highmem%>=24m && set "msg=Size of available contiguous memory below 24MB" ! if not %lowmem%>=16m && if not %highmem%>=16m && set "msg=Size of available contiguous memory below 16MB" ! set msg= &; if not exist msg && endlocal ! if "%Q%"=="/Q" && endlocal && set result=0 && goto :eof ! echo %msg% && endlocal && set result=0 && goto :eof
#LowMemOnly#if not exist rdbase && setlocal && set /A lowmem=*0x8298&0xffffffff * 1k - 63m &; set /a lowMB=%lowmem%>>20 &; if %DEVICE%==(rd) && if not %SIZE%<=%lowmem% && echo Abort: needed size of (rd) above available %lowMB%MB contiguous memory && set result=0 ! if "%LOG%"=="/LOG" && if not %lowmem%>=24m && echo Abort: size of available contiguous memory below 24MB && set result=0 ! if not %lowmem%>=16m && echo Abort: size of available contiguous memory below 16MB && set result=0 ! set result= &; if %result%==0 && endlocal && set result=0 && goto :eof ! endlocal
if exist heads &; if not %heads%<=0 if not %heads%>=256 |; if not "%Q%"=="/Q" && echo Value '%heads%' of Heads out of range ! set "Q=%Q%" &; set result=0 && goto :eof
if exist sectrack && if %disk:~1,2%==fd &; if not %sectrack%<=7 if not %sectrack%>=64 |; if not "%Q%"=="/Q" && echo Value '%sectrack%' of Sectors Per Track out of range for %disk:~1% ! set "Q=%Q%" &; set result=0 && goto :eof
if exist sectrack && if %disk:~1,2%==hd &; if not %sectrack%<=16 if not %sectrack%>=64 |; if not "%Q%"=="/Q" && echo Value '%sectrack%' of Sectors Per Track out of range for %disk:~1% ! set "Q=%Q%" &; set result=0 && goto :eof
if exist rsrvsect && if not %fattype:~0,5%==FAT32 &; if not %rsrvsect%<=0 if not %rsrvsect%>=0x1000 |; if not "%Q%"=="/Q" && echo Value '%rsrvsect%' of Reserved Sectors out of range ! set "Q=%Q%" &; set result=0 && goto :eof
if exist rsrvsect && if %fattype:~0,5%==FAT32 &; if not %rsrvsect%<=31 if not %rsrvsect%>=0x1000 |; if not "%Q%"=="/Q" && echo Value '%rsrvsect%' of Reserved Sectors out of range ! set "Q=%Q%" &; set result=0 && goto :eof
#FAT16max4096:AccordingToRLoewOnMSFNinSuperfloppiesAndTheirImages#
if exist rootentr && if %fattype:~0,5%==FAT16 &; if %rootentr%>=4097 &; set /a rootentr=%rootentr% &; if not "%Q%"=="/Q" && echo Value '%rootentr%' for Root entries is out of range ! set "Q=%Q%" &; set result=0 && goto :eof
#FAT12max4096:ReasonableMaximumBecauseOfMax4085ClustersAndSomeExtraRoomForLFN-Entries#
if exist rootentr && if %fattype:~0,5%==FAT12 &; if %rootentr%>=4097 &; set /a rootentr=%rootentr% &; if not "%Q%"=="/Q" && echo Value '%rootentr%' for Root entries is out of range ! set "Q=%Q%" &; set result=0 && goto :eof
#ORG:MaxMountNotStable#if exist rootentr && if not %fattype:~0,5%==FAT32 &; if %rootentr%>=7440 &; set /a rootentr=%rootentr% &; if not "%Q%"=="/Q" && echo Value '%rootentr%' for Root entries is out of range ! set "Q=%Q%" &; set result=0 && goto :eof
#ORG:CanNotMount#if exist rootentr && if not %fattype:~0,5%==FAT32 &; if %rootentr%>=64k &; set /a rootentr=%rootentr% &; if not "%Q%"=="/Q" && echo Value '%rootentr%' for Root entries is out of range ! set "Q=%Q%" &; set result=0 && goto :eof
if exist rootentr && if %fattype:~0,5%==FAT32 &; if not %rootentr%<=64k &; set /a rootentr=%rootentr% &; if not "%Q%"=="/Q" && echo Value '%rootentr%' for Reserved root entries is out of range ! set "Q=%Q%" &; set result=0 && goto :eof
#ToTestLater#if exist rootclus && if %fattype:~0,5%==FAT32 &; if not %rootclus%<=1 if not %rootclus%>=65456k |; set /a rootclus=%rootclus% &; if not "%Q%"=="/Q" && echo Value '%rootclus%' for Root entries is out of range ! set "Q=%Q%" &; set result=0 && goto :eof
goto :eof
::
:getHSdisk
if %size%<=320 &; if not exist heads && set heads=1 ! set heads=%heads% &; goto :eof
if %size%<=3840 &; if not exist heads && set heads=2 ! set heads=%heads% &; goto :eof
if %disk:~1,2%==fd &; if not exist heads &; if %size%<=49152 && set heads=2 ! if %size%<=98304 && set heads=4 ! if %size%<=196608 && set heads=8
if %size%<=516096 &; if not exist heads && set heads=16 ! set heads=%heads% &; if %disk:~1,2%==hd && if not exist sectrack && set sectrack=63 ! set sectrack=%sectrack% &; goto :eof
if %size%<=1032192 &; if not exist heads && set heads=32 ! set heads=%heads% &; if %disk:~1,2%==hd && if not exist sectrack && set sectrack=63 ! set sectrack=%sectrack% &; goto :eof
if %size%<=2064384 &; if not exist heads && set heads=64 ! set heads=%heads% &; if %disk:~1,2%==hd && if not exist sectrack && set sectrack=63 ! set sectrack=%sectrack% &; goto :eof
if %size%<=3499008 &; if not exist heads && set heads=128 ! set heads=%heads% &; if %disk:~1,2%==hd && if not exist sectrack && set sectrack=63 ! set sectrack=%sectrack% &; goto :eof
if not %size%<=3499008 &; if not exist heads && set heads=255 ! set heads=%heads% &; if %disk:~1,2%==hd && if not exist sectrack && set sectrack=63 ! set sectrack=%sectrack% &; goto :eof
if not exist heads && set result=0
goto :eof
::
:getHSfloptype
#TopAddNew#if %FLOPTYPE%== && set heads=2 && set sectrack=
if %FLOPTYPE%==4 && set heads=1 && set sectrack=8
if %FLOPTYPE%==8 && set heads=1 && set sectrack=8
if %FLOPTYPE%==12 && set heads=1 && set sectrack=8
if %FLOPTYPE%==14 && set heads=1 && set sectrack=14
if %FLOPTYPE%==16 && set heads=1 && set sectrack=8
if %FLOPTYPE%==24 && set heads=1 && set sectrack=8
if %FLOPTYPE%==28 && set heads=1 && set sectrack=14
if %FLOPTYPE%==32 && set heads=1 && set sectrack=8
if %FLOPTYPE%==64 && set heads=1 && set sectrack=8
if %FLOPTYPE%==128 && set heads=1 && set sectrack=8
if %FLOPTYPE%==234752 && set heads=32 && set sectrack=56
if %FLOPTYPE%==123264 && set heads=8 && set sectrack=32
if %FLOPTYPE%==20385 && set heads=2 && set sectrack=27
## MaxforElTorito
if %FLOPTYPE%==36864 && set heads=2 && set sectrack=36
if %FLOPTYPE%==18432 && set heads=2 && set sectrack=18
if %FLOPTYPE%==15360 && set heads=2 && set sectrack=15
#--------------#
if %FLOPTYPE%==34560 && set heads=2 && set sectrack=36
if %FLOPTYPE%==31680 && set heads=2 && set sectrack=36
if %FLOPTYPE%==28800 && set heads=2 && set sectrack=36
if %FLOPTYPE%==25920 && set heads=2 && set sectrack=36
if %FLOPTYPE%==23040 && set heads=2 && set sectrack=36
if %FLOPTYPE%==20160 && set heads=2 && set sectrack=36
if %FLOPTYPE%==17280 && set heads=2 && set sectrack=18
#MORE_1440_multiples#
if %FLOPTYPE%==15840 && set heads=2 && set sectrack=18
if %FLOPTYPE%==15360 && set heads=2 && set sectrack=15
if %FLOPTYPE%==14400 && set heads=2 && set sectrack=18
#NotChosen#if %FLOPTYPE%==14400 && set heads=2 && set sectrack=15
if %FLOPTYPE%==13200 && set heads=2 && set sectrack=15
if %FLOPTYPE%==12000 && set heads=2 && set sectrack=15
if %FLOPTYPE%==12960 && set heads=2 && set sectrack=18
if %FLOPTYPE%==11520 && set heads=2 && set sectrack=36
if %FLOPTYPE%==12240 && set heads=2 && set sectrack=48
if %FLOPTYPE%==10800 && set heads=2 && set sectrack=15
if %FLOPTYPE%==10080 && set heads=2 && set sectrack=18
if %FLOPTYPE%==9600 && set heads=2 && set sectrack=15
if %FLOPTYPE%==9180 && set heads=2 && set sectrack=36
if %FLOPTYPE%==8640 && set heads=2 && set sectrack=18
#NotChosen#if %FLOPTYPE%==8640 && set heads=2 && set sectrack=36
if %FLOPTYPE%==8400 && set heads=2 && set sectrack=15
if %FLOPTYPE%==8100 && set heads=2 && set sectrack=36
if %FLOPTYPE%==7200 && set heads=2 && set sectrack=18
#NotChosen#if %FLOPTYPE%==7200 && set heads=2 && set sectrack=15
if %FLOPTYPE%==6000 && set heads=2 && set sectrack=15
#BAD#if %FLOPTYPE%==5760 && set heads=2 && set sectrack=63
if %FLOPTYPE%==5760 && set heads=2 && set sectrack=18
#NotChosen#if %FLOPTYPE%==5760 && set heads=2 && set sectrack=36
#-------------------#
if %FLOPTYPE%==4800 && set heads=2 && set sectrack=15
if %FLOPTYPE%==3840 && set heads=2 && set sectrack=48
if %FLOPTYPE%==4590 && set heads=2 && set sectrack=18
if %FLOPTYPE%==4320 && set heads=2 && set sectrack=18
#BAD#if %FLOPTYPE%==4000 && set heads=2 && set sectrack=50
if %FLOPTYPE%==3840 && set heads=2 && set sectrack=48
if %FLOPTYPE%==3825 && set heads=2 && set sectrack=15
#NotGoodForElToritoInVbox#
if %FLOPTYPE%==3600 && set heads=2 && set sectrack=15
#-------------------#
if %FLOPTYPE%==3520 && set heads=2 && set sectrack=44
if %FLOPTYPE%==3200 && set heads=2 && set sectrack=40
if %FLOPTYPE%==3120 && set heads=2 && set sectrack=39
if %FLOPTYPE%==2880 && set heads=2 && set sectrack=36
#NotGoodForElToritoInVbox#
if %FLOPTYPE%==2400 && set heads=2 && set sectrack=15
#-------------------#
if %FLOPTYPE%==1920 && set heads=2 && set sectrack=24
if %FLOPTYPE%==1840 && set heads=2 && set sectrack=23
if %FLOPTYPE%==1760 && set heads=2 && set sectrack=22
if %FLOPTYPE%==1680 && set heads=2 && set sectrack=21
if %FLOPTYPE%==1600 && set heads=2 && set sectrack=20
#BAD#if %FLOPTYPE%==1743 && set heads=2 && set sectrack=21
if %FLOPTYPE%==1440 && set heads=2 && set sectrack=18
if %FLOPTYPE%==820 && set heads=2 && set sectrack=10
if %FLOPTYPE%==800 && set heads=2 && set sectrack=10
#GoodWithScandisk#
if %FLOPTYPE%==640 && set heads=2 && set sectrack=8
#BAD#if %FLOPTYPE%==600 && set heads=2 && set sectrack=15
if %FLOPTYPE%==400 && set heads=2 && set sectrack=10
if %FLOPTYPE%==720 && set heads=2 && set sectrack=9
if %FLOPTYPE%==1200 && set heads=2 && set sectrack=15
if %FLOPTYPE%==360 && set heads=2 && set sectrack=9
if %FLOPTYPE%==320 && set heads=2 && set sectrack=8
if %FLOPTYPE%==180 && set heads=1 && set sectrack=9
if %FLOPTYPE%==160 && set heads=1 && set sectrack=8
if not exist heads && if not exist sectrack && echo Abort: switch '/F:%FLOPTYPE%' not valid && set result=0
goto :eof
::
:getCHSdisktype
if exist DISKTYPE &; checkrange 1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44 calc %DISKTYPE% > nul || echo Argument '/D:%DISKTYPE%' is not valid or unsupported && set result=0 && goto :eof
if %DISKTYPE%==1 && set cylinder=306 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==2 && set cylinder=615 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==3 && set cylinder=615 && set heads=6 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==4 && set cylinder=940 && set heads=8 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==5 && set cylinder=940 && set heads=6 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==6 && set cylinder=615 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==7 && set cylinder=462 && set heads=8 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==8 && set cylinder=733 && set heads=5 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==9 && set cylinder=900 && set heads=15 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==10 && set cylinder=820 && set heads=3 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==11 && set cylinder=855 && set heads=5 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==12 && set cylinder=855 && set heads=7 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==13 && set cylinder=306 && set heads=8 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==14 && set cylinder=733 && set heads=7 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==16 && set cylinder=612 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==17 && set cylinder=977 && set heads=5 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==18 && set cylinder=977 && set heads=7 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==19 && set cylinder=1024 && set heads=7 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==20 && set cylinder=733 && set heads=5 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==21 && set cylinder=733 && set heads=7 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==22 && set cylinder=733 && set heads=5 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==23 && set cylinder=306 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==24 && set cylinder=612 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==25 && set cylinder=306 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==26 && set cylinder=612 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==27 && set cylinder=698 && set heads=7 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==28 && set cylinder=976 && set heads=5 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==29 && set cylinder=306 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==30 && set cylinder=611 && set heads=4 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==31 && set cylinder=732 && set heads=7 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==32 && set cylinder=1023 && set heads=5 && set sectrack=17 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==33 && set cylinder=614 && set heads=4 && set sectrack=25 &; set /a SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==34 && set cylinder=775 && set heads=2 && set sectrack=27 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==35 && set cylinder=921 && set heads=2 && set sectrack=33 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==36 && set cylinder=402 && set heads=4 && set sectrack=26 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==37 && set cylinder=580 && set heads=6 && set sectrack=26 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==38 && set cylinder=845 && set heads=2 && set sectrack=36 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==39 && set cylinder=769 && set heads=3 && set sectrack=36 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==40 && set cylinder=531 && set heads=4 && set sectrack=39 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==41 && set cylinder=577 && set heads=2 && set sectrack=36 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==42 && set cylinder=654 && set heads=2 && set sectrack=32 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==43 && set cylinder=923 && set heads=5 && set sectrack=36 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
if %DISKTYPE%==44 && set cylinder=531 && set heads=8 && set sectrack=39 &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
#ToAddNew#if %DISKTYPE%== && set cylinder= && set heads= && set sectrack= &; set /A SECTORS=%heads% * %sectrack% * %cylinder% && goto :eof
echo Argument '/D:%DISKTYPE%' is not valid or unsupported && set result=0
goto :eof
::
:getCHS
setlocal
set /a sectmax=%size% * 2
set /a secthead=%sectmax%/%heads%
#CHECK# Prime numbers: 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61
if %disk:~1,2%==hd && if not exist sectrack &; calc %secthead% % 17 > nul || set sectrack=17 ! calc %secthead% % 19 > nul || set sectrack=19 ! calc %secthead% % 23 > nul || set sectrack=23 ! calc %secthead% % 29 > nul || set sectrack=29 ! calc %secthead% % 31 > nul || set sectrack=31 ! calc %secthead% % 37 > nul || set sectrack=37 ! calc %secthead% % 41 > nul || set sectrack=41 ! calc %secthead% % 41 > nul || set sectrack=43 ! calc %secthead% % 47 > nul || set sectrack=47 ! calc %secthead% % 53 > nul || set sectrack=53 ! calc %secthead% % 59 > nul || set sectrack=59 ! calc %secthead% % 61 > nul || set sectrack=61 ! set sectrack=63
if %disk:~1,2%==fd && if not exist sectrack && if %size%<=2880 &; if %sectmax%<=400 && set cylinder=40 && set /a maxSPT=%sectmax%/%heads%/40 ! if %sectmax%<=2880 && set cylinder=80 && set /a maxSPT=%sectmax%/%heads%/80
if %disk:~1,2%==fd && if not exist sectrack &; set sectbase=8
:fdsecktrackloop
if %disk:~1,2%==fd && if exist sectbase && if %size%<=2880 && if %sectbase%<=48 && set /a CHSsect=%cylinder% * %heads% * %sectbase% &; calc %secthead% % %sectbase% && if %CHSsect%<=%sectmax% && set /a sectbase=%sectbase%+1 && goto :fdsecktrackloop ! if not %CHSsect%>=%sectmax% && set /a sectbase=%sectbase%+1 && goto :fdsecktrackloop ! if %CHSsect%==%sectmax% && set sectrack=%sectbase% ! set /a sectrack=%sectbase%-1
if %disk:~1,2%==fd && if exist sectbase && if not %size%<=2880 && if %sectbase%<=48 && set /a cylinder=%sectmax%/%heads%/%sectbase% &; set /a CHSsect=%cylinder% * %heads% * %sectbase% &; calc %secthead% % %sectbase% && if %CHSsect%<=%sectmax% && set /a sectbase=%sectbase%+1 && goto :fdsecktrackloop ! if not %cylinder%<=1024 && set /a sectbase=%sectbase%+1 && goto :fdsecktrackloop ! if %cylinder%<=1024 && if %CHSsect%<=%sectmax% && set sectrack=%sectbase% ! set /a sectrack=%sectbase%-1
#NotSoGood#if %disk:~1,2%==fd && if not exist sectrack && if not %size%<=2880 &; set sectrack=15 && calc %secthead% % 15 && set sectrack=18 && calc %secthead% % 18 && set sectrack=36 && calc %secthead% % 36 && set sectrack=39 && calc %secthead% % 39 && set sectrack=48 && calc %secthead% % 48 && set heads=255 && set sectrack=63
set secthead= && set sectbase=
#BADIDEA#if %disk:~1,2%==fd && if not exist sectrack &; if %heads%==255 && set sectrack=63 ! set sectrack=48 &; set /a cylinder=%sectmax%/%heads%/%sectrack% &; if %cylinder%>=1026 && if not %DEVICE%==(rd) && set /a sectmax=1024 * %heads% * %sectrack% && set cylinder=1024
if %disk:~1,2%==fd && if not exist sectrack &; if %heads%==255 && set sectrack=63 ! set sectrack=48 &; set /a cylinder=%sectmax%/%heads%/%sectrack% &; if %cylinder%>=1025 && set /a sectmax=1024 * %heads% * %sectrack% && set cylinder=1024
if %disk:~1,2%==hd && if not exist sectrack && set sectrack=63
if %disk:~1,2%==fd && set secthidd=0
if %disk:~1,2%==hd && set secthidd=%sectrack%
if not exist cylinder && set /a cylinder=%sectmax%/%heads%/%sectrack%
if %disk:~1,2%==hd && if %cylinder%>=1026 && if not %DEVICE%==(rd) &; if not "%Q%"=="/Q" && echo Abort: %cylinder% cylinders is above 1025 (includes ONE test-cylinder) ! set Q=%Q% &; endlocal && set result=0 && goto :eof
if %disk:~1,2%==fd && if %cylinder%>=1025 && if not %DEVICE%==(rd) &; if not "%Q%"=="/Q" && echo Abort: %cylinder% cylinders is above 1024 ! set Q=%Q% &; endlocal && set result=0 && goto :eof
#ORG#if %cylinder%>=1025 &; if not "%Q%"=="/Q" && echo Abort: %cylinder% cylinders is above 1024 ! set Q=%Q% &; endlocal && set result=0 && goto :eof
#BAD?#if %cylinder%>=1024 && echo Abort: %cylinder% cylinders is above 1023 && set result=0 && goto :eof
set /A sectbal=%cylinder% * %heads% * %sectrack%
set /A sectpart=%sectbal%-%secthidd%
if not %sectpart%>=4 && set result=0
endlocal && set result=%result% && set sectbal=%sectbal% && set sectrack=%sectrack% && set cylinder=%cylinder% && set sectpart=%sectpart%
goto :eof
::
:makeramdisk
#-# With switch /RDSIZE:n => near 4g rdbase must be set at 4g, otherwise crash in :rdclean - current choice is rdbase=4g above /RSIZE:3500
if "%~3"=="" && set result=0 && goto :eof
setlocal && set * && set RDSIZE=%RDSIZE% && set "V=%V%" && set "Q=%Q%" && set "NULL=%NULL%"
set "DEVICE=%~1"
set /A "rdbase=%~2" &; if %rdbase%==0 && echo Bad value of '/RDBASE:n' && endlocal && set result=0 && goto :eof
set /A "imgsize=%~3" &; if %imgsize%==0 && echo Bad value of '/RDBASE:n' && endlocal && set result=0 && goto :eof
set "LOG=%~4"
if %DEVICE%==(rd) &; if not exist RDSIZE && set rdsize=%imgsize% ! if /i "%RDSIZE%"=="MAX" && set rdsize=%imgsize% ! if %RDSIZE%>=%imgsize% && set rdsize=%imgsize% && set RDSIZE=%imgsize% ! set rdsize=%RDsize%
if not %DEVICE%==(rd) &; if not "%LOG%"=="/LOG" &; if %imgsize%<=64m && set rdsize=%imgsize% ! set /A rdsize=64m
if not %DEVICE%==(rd) &; if "%LOG%"=="/LOG" &; if %imgsize%<=64m && set rdsize=%imgsize% ! set /A rdsize=64m
if exist rdbase && set base=%rdbase% ! set /A base=290m
#NotAlwysStableII#if exist rdbase && set base=%rdbase% ! set /A base=256m
#NotAlwysStableI#if exist rdbase && set base=%rdbase% ! set /A base=64m
call :findfreememory %rdsize% %base% %V% %Q% &; if %result%==0 &; if not "%Q%"=="/Q" && echo Can not find free memory starting at %rdbase% && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
#BADIDEA#if exist rdbase &; if %rdbase%>=64m && set rdbase=%result% && set result= && set base= ! echo No usable memory for /RDBASE:%rdbase% && endlocal && set result=0 && goto :eof
#BAD???#if not exist rdbase &; if %result%>=64m && set rdbase=%result% && set result= && set base= ! echo No usable memory for /RDBASE:%rdbase% && endlocal && set result=0 && goto :eof
if not exist rdbase &; set rdbase=%result% && set result= && set base=
if "%RDSIZE%"=="MAX" && if exist MAXSIZE && set /A rdsize=%MAXSIZE%
if not exist rdsize && if not exist RDSIZE &; if not %Q%==/Q && echo Bad result, rdbase dos not exist - PLEASE report && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
if not exist rdsize &; if not "%RDSIZE%"=="MAX" && set rdsize=%RDSIZE% ! if not %Q%==/Q && echo Bad result, rdbase dos not exist while '/RDSIZE:%RDSIZE%' - PLEASE report && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
map --rd-base=%rdbase% > nul
map --rd-size=%rdsize% > nul
set result= && set /A mdstart=60m &; if %rdsize%>=4m && set /A size=4m ! set /A size=%rdsize% &; set /A cleansec=%size%>>9 &; if not %cleansec%<=0x2000 && set cleansec=0x2000 ! set cleansec=%cleansec% &; set /A MDstart=%mdstart%>>9 && set /A mdclean=%cleansec% * 512 && set /A RDstart=0 &; call Fn.24 %mdstart% 0x00 %mdclean%
raw cat --locate=\x00 (md)%MDstart%+%cleansec% > nul &; set /A clean=%@retval%&0xffffffff &; if not %clean%==%mdclean% && echo Abort: can not clean memory, (md)%MDstart%+%cleansec% is not clean && endlocal && set result=0 && goto :eof ! set clean=
if not %rdbase%>=4g &; raw dd if=(md)%MDstart%+%cleansec% of=(rd)%RDstart%+%cleansec% > nul && set result=1 ! set result=0 &; if %result%==1 && cmp (md)%MDstart%+%cleansec% (rd)%RDstart%+%cleansec% > nul &; set /a clean=%@retval%&0xffffffff &; if %clean%==0 && echo $[0x0F] Abort: can not clean first %mdclean% byte of memory starting at %rdbase% byte && endlocal && set result=0 && goto :eof
if %rdbase%>=4g &; raw dd if=(md)%MDstart%+%cleansec% of=(rd)%RDstart%+%cleansec% > nul && set result=1 ! set result=0 &; if %result%==1 && cmp (md)%MDstart%+%cleansec% (rd)%RDstart%+%cleansec% > nul &; set /a clean=%@retval%&0xffffffff &; if %clean%==0 && echo $[0x0F] Abort: can not clean first %mdclean% byte of top-memory starting at %rdbase% byte && endlocal && set result=0 && goto :eof
if %result%==0 && endlocal && set result=0 && goto :eof
if %LOG%==/LOG && if %rdsize%>=8m && call Fn.24 %mdstart% 0x00 %mdclean%
if not %rdbase%>=4g && if %LOG%==/LOG && if %rdsize%>=8m && set /A RDstart=%RDstart%+%cleansec% &; raw dd if=(md)%MDstart%+%cleansec% of=(rd)%RDstart%+%cleansec% > nul && set result=1 ! set result=0 &; if %result%==1 && cmp (md)%MDstart%+%cleansec% (rd)%RDstart%+%cleansec% > nul &; set /a clean=%@retval%&0xffffffff &; if %clean%==0 && echo $[0x0F] Abort: can not clean first %mdclean% byte of memory starting at %rdbase% byte && endlocal && set result=0 && goto :eof
if %rdbase%>=4g && if %LOG%==/LOG && if %rdsize%>=8m && set /A RDstart=%RDstart%+%cleansec% &; raw dd if=(md)%MDstart%+%cleansec% of=(rd)%RDstart%+%cleansec% > nul && set result=1 ! set result=0 &; if %result%==1 && cmp (md)%MDstart%+%cleansec% (rd)%RDstart%+%cleansec% > nul &; set /a clean=%@retval%&0xffffffff &; if %clean%==0 && echo $[0x0F] Abort: can not clean first %mdclean% byte of top-memory starting at %rdbase% byte && endlocal && set result=0 && goto :eof
if %result%==0 && endlocal && set result=0 && goto :eof
endlocal && set rdbase=%rdbase% && set rdsize=%rdsize% && set rdbase0=%rdbase0% && set rdsize0=%rdsize0%
goto :eof
::
:findfreememory
setlocal && set * && set RDSIZE=%RDSIZE% && set "NULL=%NULL%"
set /A "SIZE=%~1" && set /A "BASE=%~2"
if "%~3"=="/V" && set "V=%~3" ! if "%~3"=="/Q" && set "Q=%~3"
debug msg=1
if exist @uefi &; displaymem -s > (md)0x300+4
if not exist @uefi &; displaymem --s > (md)0x300+4
debug msg=0
set /A base=%BASE%>>9 && set /A size=%SIZE%>>9
set skip=0 && set skipstat=0 && call :availablememory &; if %result%==0 && endlocal && set result=0 && goto :eof
set /A result=%base%<<9 &; set /A needend=%result%+%SIZE% && set /A freemem=%freesect%<<9 && set /A memend=%freeend%<<9
#TopMemOnly!#
set /A rdbase=*0x82D0&0xffffffffffffffff && set /A rdsize=*0x82D8&0xffffffffffffffff &; set /A rdend=%rdbase%+%rdsize% && set /a MBrdbase=%rdbase%>>20 && set /a MBrdsize=%rdsize%>>20
#ORG#set /A rdbase=*0x82D0 && set /A rdsize=*0x82D8&0xffffffff &; set /A rdend=%rdbase%+%rdsize% && set /a MBrdbase=%rdbase%>>20 && set /a MBrdsize=%rdsize%>>20
if %rdbase%>=1m &; if %rdbase%>=%result% && if %rdbase%<=%needend% && set /A leftsize=%memend%-%rdend%
if not exist leftsize && if %rdbase%>=1m &; if %rdend%>=%result% && if %rdend%<=%needend% && set /A leftsize=%memend%-%rdend%
if not exist leftsize && if %rdbase%>=1m &; if %result%>=%rdbase% && if %result%<=%rdend% && set /A leftsize=%memend%-%rdend%
if not exist leftsize && if %rdbase%>=1m &; if %needend%>=%rdbase% && if %needend%<=%rdend% && set /A leftsize=%memend%-%rdend%
if exist leftsize &; if %SIZE%<=%leftsize% && set result=%rdend% ! set ask=Y
if not exist NULL && if %ask%==Y &; call :Fn.4 &; set h= && set v0=%v% && set v= &; echo Not enough free memory: (rd) at %MBrdbase%MB, size %MBrdsize%MB (%rdbase%-%rdend%) &; call :Fn.4 &; set h= && set v1=%v% && set v= &; set /p /u "overwrit= Overwrite ram-disk? (No=N, Yes=Y) > " && echo ! set overwrit=N &; if not %overwrit:~0,1%==Y && echo Aborted by user && endlocal && set result=0 && goto :eof
if %overwrit:~0,1%==Y && call :Fn.4 &; set h= &; if %v0%==%v% && if %v%>=2 && set /a v0=%v%-2 ! if %v1%==%v% && if %v%>=2 && set /a v1=%v1%-1 && set /a v0=%v%-2 ! set v0=%v0% &; call :Fn.5 0 %v0% &; echo -e $[]                                                                              \x20 && echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% && set v0= && set v1= && set v=
if "%V%"=="/V" && if not %result%==0 &; setlocal && set /a MBbase=%result%>>20 && set /a KBbase=%result%>>10 && set /A sectbase=%result%>>9 && set /A leftsize=%memend%-%result%-512 && set /a MBsize=%memend%-%result%>>20 && set /a KBsize=%memend%-%result%>>10 && set /A sectsize=%memend%-%result%>>9 &; echo Lowest base: %result% bytes/ %KBbase%KB/ %MBbase%MB/ %sectbase% sectors && echo Free memory: %leftsize% bytes/ %KBsize%KB/ %MBsize%MB/ %sectsize% sectors && endlocal
if not %rdbase%<=0xFFFFF if not %rdbase%==0x7FFFFFFF if not %overwrit%==Y || set rdbase= && set rdsize=
endlocal && set result=%result% && set rdbase0=%rdbase% && set rdsize0=%rdsize% && set MAXSIZE=%SIZE%
goto :eof
::
:availablememory
## BADforGRUB4EFI:Base:,Length:,End:-IsUsing'='for':'
if exist @uefi &; raw cat --skip=%skip% --locate=Base= --number=1 (md)0x300+4 > nul |; if not "%Q%"=="/Q" && echo No usable memory available && set result=0 && goto :eof ! set result=0 && goto :eof
if exist @uefi &; raw cat --skip=%skip% --locate=Base= --number=1 (md)0x300+4 > nul &; set /a skip=%?%+5 &; raw cat --skip=%skip% --locate=, --number=1 (md)0x300+4 > nul &; set /a length=%?%-%skip% &; raw cat --skip=%skip% --length=%length% (md)0x300+4 | set basesect= &; set /A basesect=0x%basesect%
if not exist @uefi &; raw cat --skip=%skip% --locate=Base: --number=1 (md)0x300+4 > nul |; if not "%Q%"=="/Q" && echo No usable memory available && set result=0 && goto :eof ! set result=0 && goto :eof
if not exist @uefi &; raw cat --skip=%skip% --locate=Base: --number=1 (md)0x300+4 > nul &; set /a skip=%?%+6 &; raw cat --skip=%skip% --locate=, --number=1 (md)0x300+4 > nul &; set /a length=%?%-%skip% &; raw cat --skip=%skip% --length=%length% (md)0x300+4 | set basesect= &; set /A basesect=0x%basesect%
if not %base%>=%basesect% && set base=%basesect%
if exist @uefi &; raw cat --skip=%skip% --locate=Length= --number=1 (md)0x300+4 > nul &; set /a skip=%?%+7 &; raw cat --skip=%skip% --locate=, --number=1 (md)0x300+4 > nul &; set /a length=%?%-%skip% &; raw cat --skip=%skip% --length=%length% (md)0x300+4 | set freesect= &; set /A freesect=0x%freesect%
if not exist @uefi &; raw cat --skip=%skip% --locate=Length: --number=1 (md)0x300+4 > nul &; set /a skip=%?%+8 &; raw cat --skip=%skip% --locate=, --number=1 (md)0x300+4 > nul &; set /a length=%?%-%skip% &; raw cat --skip=%skip% --length=%length% (md)0x300+4 | set freesect= &; set /A freesect=0x%freesect%
if not %base%>=%basesect% && set base=%basesect%
set /A freeend=%basesect%+%freesect%
if %base%>=%freeend% && goto :availablememory
#TEMPORARYforGRUB4EFI#if exist @uefi &; if not %basesect%>=%base% &; if not %basesect%>=0x100000 && set /A freesect=%freesect%-%base%+%basesect% ! set /A freesect=0 &; if not %freesect%>=0 && goto :availablememory
#TEMPORARYforGRUB4EFI#if not exist @uefi &; if not %basesect%>=%base% &; if not %basesect%>=0x800000 && set /A freesect=%freesect%-%base%+%basesect% ! set /A freesect=%freesect%-%basesect% &; if not %freesect%>=0 && goto :availablememory
if not %basesect%>=%base% &; if not %basesect%>=0x800000 && set /A freesect=%freesect%-%base%+%basesect% ! set /A freesect=%freesect%-%basesect% &; if not %freesect%>=0 && goto :availablememory
if exist @uefi &; if not %freesect%>=%size% &; raw cat --skip=%skip% --locate=Base= --number=1 (md)0x300+4 > nul && goto :availablememory ! if /i "%RDSIZE%"=="MAX" && set result=%base% && set /A SIZE=%freesect%<<9 && goto :eof ! if not "%Q%"=="/Q" && echo No available memory sectors '>=%size%' && set result=0 && goto :eof ! set result=0 && goto :eof
#ORG#if exist @uefi &; if not %freesect%>=%size% &; raw cat --skip=%skip% --locate=Base= --number=1 (md)0x300+4 > nul && goto :availablememory ! if /i "%RDSIZE%"=="MAX" && set result=%base% && goto :eof ! if not "%Q%"=="/Q" && echo No available memory sectors '>=%size%' && set result=0 && goto :eof ! set result=0 && goto :eof
if not exist @uefi &; if not %freesect%>=%size% &; raw cat --skip=%skip% --locate=Base: --number=1 (md)0x300+4 > nul && goto :availablememory ! if /i "%RDSIZE%"=="MAX" && set /A SIZE=%freesect%<<9 && goto :eof ! if not "%Q%"=="/Q" && echo No available memory sectors '>=%size%' && set result=0 && goto :eof ! set result=0 && goto :eof
#ORG#if not exist @uefi &; if not %freesect%>=%size% &; raw cat --skip=%skip% --locate=Base: --number=1 (md)0x300+4 > nul && goto :availablememory ! if not "%Q%"=="/Q" && echo No available memory sectors '>=%size%' && set result=0 && goto :eof ! set result=0 && goto :eof
debug msg=1
map --status > (md)0x300+4
debug msg=0
raw cat --skip=%skipstat% --locate=\x0A-- --number=1 (md)0x300+4 > nul &; set /a skipstat=%?%+3 &; raw cat --skip=%skipstat% --locate=\x0A (md)0x300+4 > nul &; set /a rsrvmax=%@retval%-1
if %rsrvmax%>=1 && set linestat=0 && call :getbasememory
if not %rsrvmax%>=1 &; if not %size%<=%freesect% && set result=0
if %result%==0 && debug msg=1
if exist @uefi &; if %result%==0 && displaymem -s > (md)0x300+4
if not exist @uefi &; if %result%==0 && displaymem --s > (md)0x300+4
if %result%==0 && debug msg=0
if %result%==0 && set skipstat=0 && goto :availablememory
goto :eof
::
:getbasememory
#-#+ g4e:different
raw cat --skip=%skipstat% --locate=\x0A --number=1 (md)0x300+4 > nul &; set /a skipstat=%?%+1 && set /a linestat=%linestat%+1
if exist @uefi &; raw cat --skip=%skipstat% --locate=FF\x20 --length=3 (md)0x300+4 > nul &; set FFFr=Y && set /a skipstat=%?%+18
if not exist @uefi &; raw cat --skip=%skipstat% --locate=FF\x20 --length=3 (md)0x300+4 > nul &; set FFFr=Y && set /a skipstat=%?%+24
if exist @uefi &; if not %FFFr%==Y && raw cat --skip=%skipstat% --locate=FF\x20 --length=6 (md)0x300+4 > nul &; set FFTo=Y && set /a skipstat=%?%+15
if not exist @uefi &; if not %FFFr%==Y && raw cat --skip=%skipstat% --locate=FF\x20 --length=6 (md)0x300+4 > nul &; set FFTo=Y && set /a skipstat=%?%+21
if not %FFFr%==Y && if not %FFTo%==Y && set /a linestat=%linestat%-1 && set /a rsrvmax=%rsrvmax%-1 &; if %rsrvmax%<=0 && goto :eof ! goto :getbasememory
if not %FFFr%==Y if not %FFTo%==Y |; raw cat --skip=%skipstat% --length=16 (md)0x300+4 | set rsrvbase= &; set /a skipstat=%skipstat%+17 &; raw cat --skip=%skipstat% --length=16 (md)0x300+4 | set rsrvsize=
set /A rsrvbase=0x%rsrvbase%
if %base%>=0x800000 &; if not %rsrvbase%>=0x800000 && set /a linestat=%linestat%-1 && set /a rsrvmax=%rsrvmax%-1 ! set /A rsbase%linestat%=%rsrvbase%
if not %base%>=0x800000 &; set /A rsbase%linestat%=%rsrvbase%
#MAYBE#if exist rsbase%linestat% && if 0x%rsrvsize%>=0 && set /A rsend%linestat%=%rsrvbase%+0x%rsrvsize%
set FFFr= && set FFTo= && set rsrvbase= && set rsrvsize=
if %rsrvmax%>=1 &; if not %linestat%>=%rsrvmax% && goto :getbasememory
set rsrvmax=%linestat% &; if %rsrvmax%==0 && goto :eof
set lowbase=%rsbase1% && set lowline=1
set l=2 &; if %l%<=%rsrvmax% && call :parseusedmemory "lowbase"
set /A freesect=%lowbase%-%base%
#NOT#set /A freesect=%lowend%-%base%
#BAD#set l=2 &; if %l%<=%rsrvmax% && call :parseusedmemory "lowbase" &; set /A freesect=%lowend%-%base%
if %base%>=%lowbase% && set result=0 && if not "%Q%"=="/Q" && echo No free memory found, base sector '%base%' is above start of lowest used memory sector '%lowend%'
if not %size%<=%freesect% && set result=0 && if not "%Q%"=="/Q" && echo Not enough free memory avialable, needed memory sectors '%size%' is above unused memory sectors '%freesect%'
goto :eof
::
:parseusedmemory
if not exist rsbase%l% && set /a l=%l%+1 &; if %l%<=%rsrvmax% && goto :parseusedmemory ! goto :eof
call if %^rsbase%l%%%==0 && set /a l=%l%+1 &; if %l%<=%rsrvmax% && goto :parseusedmemory ! goto :eof
if %~1==lowbase &; call if not %^rsbase%l%%%>=%lowbase% && call set lowbase=%^rsbase%l%%%
#NOT# && call set lowend=%^rsend%l%%% && set lowline=%l%
set /a l=%l%+1 &; if %l%<=%rsrvmax% && goto :parseusedmemory
goto :eof
::
:getsectorspercluster
#CHECK!!!#if %fattype:~0,5%==FAT16 && if not %ptlength%>=XXXXX && echo Abort: Total sectors %ptlength% is BELOW XXXX unsupported on FAT16 && set result=0 && goto :eof
if %fattype:~0,5%==FAT12 && if exist secpclus &; if %disk:~1,2%==fd && set /a maxsect=4078 * %secpclus% + 24 + %rsrvsect% + %rootsect% &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT12 && if exist secpclus &; if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && set /a maxsect=4078 * %secpclus% + 24 + %rsrvsect% + %rootsect% + 63 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT12 && if exist secpclus &; if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && set /a maxsect=4078 * %secpclus% + 24 + %rsrvsect% + %rootsect% + 1008 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT16 && if exist secpclus &; if %disk:~1,2%==fd && set /a maxsect=65524 * %secpclus% + 512 + %rsrvsect% + %rootsect% &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
#BADORG#if %fattype:~0,5%==FAT16 && if exist secpclus &; if %disk:~1,2%==fd && set /a maxsect=65624 * %secpclus% + 512 + %rsrvsect% + %rootsect% &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT16 && if exist secpclus &; if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && set /a maxsect=65524 * %secpclus% + 512 + %rsrvsect% + %rootsect% + 63 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
#BADORG#if %fattype:~0,5%==FAT16 && if exist secpclus &; if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && set /a maxsect=65624 * %secpclus% + 512 + %rsrvsect% + %rootsect% + 63 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT16 && if exist secpclus &; if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && set /a maxsect=65524 * %secpclus% + %rsrvsect% + %rootsect% + 1008 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
#BADORG#if %fattype:~0,5%==FAT16 && if exist secpclus &; if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && set /a maxsect=65624 * %secpclus% + %rsrvsect% + %rootsect% + 1008 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT32 && if exist secpclus &; if %disk:~1,2%==fd && set /a maxsect=268435444 * %secpclus% + 2097152 + 2097152 + 32 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT32 && if exist secpclus &; if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" && set /a maxsect=268435444 * %secpclus% + 2097152 + 2097152 + 32 + 63 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if %fattype:~0,5%==FAT32 && if exist secpclus &; if %disk:~1,2%==hd && if "%LOG%"=="/LOG" && set /a maxsect=268435444 * %secpclus% + 2097152 + 2097152 + 32 + 1008 &; if not %ptlength%<=%maxsect% && echo %secpclus% sectors per cluster is too low for %fattype:~0,5% with %ptlength% sectors on %disk:~1%%%NULL% && set result=0 && goto :eof ! set maxsect=
if exist secpclus &; if %secpclus%==1 && set secpclus=x01 ! if %secpclus%==2 && set secpclus=x02 ! if %secpclus%<=128 && calc %secpclus% % 4 || set secpclus=%secpclus:~1% ! echo %secpclus% is not a valid number of sectors per cluster%NULL% && set result=0 &; goto :eof
## 128 secpclus not compatible with MS-DOS Snandisk; also possible problem on MS-DOS ,=6.22 is signed byte: 128 will be -1 in this case
if %fattype:~0,5%==FAT12 &; if %ptlength%<=4135 && set secpclus=x01 ! if %ptlength%<=8213 && set secpclus=x02 ! if %ptlength%<=16369 && set secpclus=x04 ! if %ptlength%<=32681 && set secpclus=x08 ! if %ptlength%<=65305 && set secpclus=x10 ! if %ptlength%<=130553 && set secpclus=x20 ! if %ptlength%<=261049 && set secpclus=x40 &; goto :eof
##BADORG#XP-Professional_Defaults#
## FAT16: new defaults based on SPC * 65524 clusters + 32 rootsect + 256 fatsect + 256 fatsect + 1 reserved
if %fattype:~0,5%==FAT16 && if %ptlength%>=2097314 && set secpclus=x40 && goto :eof
#BADORG#if %fattype:~0,5%==FAT16 && if %ptlength%>=2099200 && set secpclus=x40 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=1048930 && set secpclus=x20 && goto :eof
#BADORG#if %fattype:~0,5%==FAT16 && if %ptlength%>=1050624 && set secpclus=x20 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=524738 && set secpclus=x10 && goto :eof
#BADORG#if %fattype:~0,5%==FAT16 && if %ptlength%>=526336 && set secpclus=x10 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=262642 && set secpclus=x08 && goto :eof
#BADORG#if %fattype:~0,5%==FAT16 && if %ptlength%>=264192 && set secpclus=x08 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=131594 && set secpclus=x04 && goto :eof
#BADORG#if %fattype:~0,5%==FAT16 && if %ptlength%>=133120 && set secpclus=x04 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=66070 && set secpclus=x02 && goto :eof
#BADORG#if %fattype:~0,5%==FAT16 && if %ptlength%>=67584 && set secpclus=x02 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=34816 && set secpclus=x01 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=16408 && set secpclus=x04 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=8240 && set secpclus=x02 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%>=4158 && set secpclus=x01 && goto :eof
if %fattype:~0,5%==FAT16 && if %ptlength%<=8202 && set secpclus=x01
## Can be a probleem, x08 with ptlength=130977 = solved by removing "" for numbers
#BAD#if %fattype:~0,5%==FAT32 && if not %ptlength%>=66528 && echo Abort: Total sectors %ptlength% is BELOW 66528, unsupported on FAT32 && set result=0 && goto :eof
#BAD#if %fattype:~0,5%==FAT32 && if %ptlength%>=66528 && set secpclus=x01
if %fattype:~0,5%==FAT32 && if not %ptlength%>=66640 &; if not "%Q%"=="/Q" && echo Abort: Total disk sectors %ptlength% is below 66640, unsupported on FAT32 && set result=0 && goto :eof ! set result=0 && goto :eof
#>=256MB#
## FATSPEC_Defaults
#NEWforPartial(rd)Partitions#
if %fattype:~0,5%==FAT32 && if %ptlength%>=67108865 && set secpclus=x40 && goto :eof
if %fattype:~0,5%==FAT32 && if %ptlength%>=33554433 && set secpclus=x20 && goto :eof
if %fattype:~0,5%==FAT32 && if %ptlength%>=16777217 && set secpclus=x10 && goto :eof
## XP-Professional_Defaults
if %fattype:~0,5%==FAT32 && if %ptlength%>=526336 && set secpclus=x08 && goto :eof
if %fattype:~0,5%==FAT32 && if %ptlength%>=264192 && set secpclus=x04 && goto :eof
if %fattype:~0,5%==FAT32 && if %ptlength%>=133120 && set secpclus=x02 && goto :eof
if %fattype:~0,5%==FAT32 && if %ptlength%>=66601 && set secpclus=x01
#WRONG!!!#if %fattype:~0,5%==FAT32 && if %ptlength%>=266241 && set secpclus=x08
if not exist secpclus && set result=0
goto :eof
::
:getsectorsperfat
setlocal
set /a secclus=0%secpclus%
#???#set /a disksize=%ptlength%
if %fattype:~0,5%==FAT32 && set /a tmpval1=%ptlength% - %rootsect% ! set /a tmpval1=%ptlength% - %rootsect% - %rsrvsect%
set /a tmpval2=256 * %secclus% + 2
if %fattype:~0,5%==FAT32 && set /a tmpval2=%tmpval2% / 2
#MAYBE#set /a sectpfat=%tmpval1% + %tmpval2% / %tmpval2%
if not %fattype:~0,5%==FAT12 && set /a sectpfat=%tmpval1% + %tmpval2% - 1 / %tmpval2%
if %fattype:~0,5%==FAT12 && set /a tmpval2=%tmpval1%/%secclus% &; if %tmpval2%<=342 && set sectpfat=1 ! if %tmpval2%<=685 && set sectpfat=2 ! if %tmpval2%<=1028 && set sectpfat=3 ! if %tmpval2%<=1372 && set sectpfat=4 ! if %tmpval2%<=1715 && set sectpfat=5 ! if %tmpval2%<=2058 && set sectpfat=6 ! if %tmpval2%<=2402 && set sectpfat=7 ! if %tmpval2%<=2745 && set sectpfat=8 ! if %tmpval2%<=3088 && set sectpfat=9 ! if %tmpval2%<=3432 && set sectpfat=10 ! if %tmpval2%<=3775 && set sectpfat=11 ! set sectpfat=12
#NONEEDANYMORE#if %fattype:~0,5%==FAT12 && if not %sectpfat%<=12 && set sectpfat=12
#BAD#endlocal && set sectpfat=%sectpfat%
## Align FAT
if %fattype:~5,1%==: && if 0%secpclus%>=2 &; set /a alineFAT=%fattype:~6% / 1k * 2 &; calc %sectpfat% % %alineFAT% &; set /a sectpfat=%alineFAT%-%@retval%+%sectpfat%
if %fattype:~0,5%==FAT32 &; set /a numclus=%ptlength% - %rsrvsect% - %sectpfat% - %sectpfat% / 0%secpclus% &; if %numclus%<=65525 && echo Abort: check switches, %numclus% clusters is not valid for %fattype:~0,5% && endlocal && set result=0 && goto :eof
if %fattype:~0,5%==FAT16 &; set /a numclus=%ptlength% - %rsrvsect% - %sectpfat% - %sectpfat% - %rootsect% / 0%secpclus% &; if not %numclus%>=65525 if not %numclus%<=4084 || echo Abort: check switches, %numclus% clusters is not valid for %fattype:~0,5% && endlocal && set result=0 && goto :eof
if %fattype:~0,5%==FAT12 &; set /a numclus=%ptlength% - %rsrvsect% - %sectpfat% - %sectpfat% - %rootsect% / 0%secpclus% &; if not %numclus%<=4084 && echo Abort: check switches, %numclus% clusters is not valid for %fattype:~0,5% && endlocal && set result=0 && goto :eof
set /A arg32=%sectpfat% &; call :arg32BE
if %fattype:~0,5%==FAT32 && set fatsz16=x00\x00 && set fatsz32=%arg32%
if %fattype:~0,5%==FAT16 && set fatsz16=%arg32:~0,7%
if %fattype:~0,5%==FAT12 && set fatsz16=%arg32:~0,7%
endlocal && set fatsz16=%fatsz16% && set fatsz32=%fatsz32% && set sectpfat=%sectpfat%
goto :eof
::
:FLOPTYPEsecperclusmediabyt
#-# Multiples of 1200 used as El Torito Floppy can give problems in VBOX!
if %FLOPTYPE%==4 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==8 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==12 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==14 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFD
if %FLOPTYPE%==16 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==24 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==28 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFD
if %FLOPTYPE%==32 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==64 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==128 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
if %FLOPTYPE%==234752 &; if %fattype:~0,5%==FAT16 && set secpclus=x08 && set mediabyt=xF0
if %FLOPTYPE%==123264 &; if %fattype:~0,5%==FAT12 && set secpclus=x40 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==20385 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
#MaxForElTorito#
if %FLOPTYPE%==36864 &; if %fattype:~0,5%==FAT12 && set secpclus=x20 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x02 && set mediabyt=xF0
if %FLOPTYPE%==18432 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==15360 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF9
#--------------#
if %FLOPTYPE%==34560 &; if %fattype:~0,5%==FAT12 && set secpclus=x20 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x02 && set mediabyt=xF0
if %FLOPTYPE%==31680 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==28800 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==25920 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==23040 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==20160 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==17280 &; if %fattype:~0,5%==FAT12 && set secpclus=x10 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==15840 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==15360 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF9
if %FLOPTYPE%==14400 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
#NotChosen#if %FLOPTYPE%==14400 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF9
#BAD#if %FLOPTYPE%==14400 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==13200 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF9
if %FLOPTYPE%==12960 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==12000 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF9
#BAD#if %FLOPTYPE%==11920 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==11520 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==12240 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==10800 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF9
if %FLOPTYPE%==10080 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==9600 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF9
if %FLOPTYPE%==9180 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==8640 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF0
if %FLOPTYPE%==8400 &; if %fattype:~0,5%==FAT12 && set secpclus=x08 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x04 && set mediabyt=xF9
if %FLOPTYPE%==8100 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x02 && set mediabyt=xF0
if %FLOPTYPE%==7200 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x02 && set mediabyt=xF0
#NotChosen#if %FLOPTYPE%==7200 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF9
if %FLOPTYPE%==6000 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x02 && set mediabyt=xF9
if %FLOPTYPE%==5760 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x02 && set mediabyt=xF0
#BAD#if %FLOPTYPE%==5760 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF8 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==4800 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF9
if %FLOPTYPE%==4590 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x02 && set mediabyt=xF0
if %FLOPTYPE%==4320 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
#BAD#if %FLOPTYPE%==4000 &; if %fattype:~0,5%==FAT12 && set secpclus=x04 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
## For 3840k MS-DOS 7.1 sometimes (???) SCANDISK wants F9 as start of FAT12. Also WIN10 Format with ImDisk set hiddsect to 1 and wrote F8
## But not with NEW image ???#
if %FLOPTYPE%==3840 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==3825 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF9
if %FLOPTYPE%==3600 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF9
#BAD#if %FLOPTYPE%==3600 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==3520 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==3200 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==3120 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
#NEW## F0 = not good with Scandisk (MSDOS622?) ??
#SOMETIMEsaddedByMSDOS622ScandiskToFAT's#if %FLOPTYPE%==2880 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF9
if %FLOPTYPE%==2880 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF0
#-------------------#
if %FLOPTYPE%==2400 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF9 ! if %fattype:~0,5%==FAT16 && set secpclus=x01 && set mediabyt=xF9
#NoFAT16possible#
if %FLOPTYPE%==1920 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==1840 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==1760 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
#BAD#if %FLOPTYPE%==1743 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==1680 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==1600 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
if %FLOPTYPE%==1440 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
#TakenByScandisk!#
if %FLOPTYPE%==820 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0
#MayBeNotGood???#if %FLOPTYPE%==820 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF9
if %FLOPTYPE%==720 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF9
if %FLOPTYPE%==800 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF0
#MaybeNotSoGood???#if %FLOPTYPE%==800 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xF9
#TakenByScandisk!#
if %FLOPTYPE%==640 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xFB
#BAD#if %FLOPTYPE%==600 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF0
#TakenByScandisk!#
if %FLOPTYPE%==400 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xFD
if %FLOPTYPE%==1200 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xF9
if %FLOPTYPE%==360 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xFD
#TakenByScandisk!#
if %FLOPTYPE%==320 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xFF
#NotTakenByScandisk#if %FLOPTYPE%==320 &; if %fattype:~0,5%==FAT12 && set secpclus=x02 && set mediabyt=xFA
#NotTakenByScandisk!#if %FLOPTYPE%==180 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFC
if %FLOPTYPE%==180 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFC
#NotTakenByScandisk!#if %FLOPTYPE%==160 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFE
if %FLOPTYPE%==160 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFE
#NotTakenByScandisk#if %FLOPTYPE%==160 &; if %fattype:~0,5%==FAT12 && set secpclus=x01 && set mediabyt=xFF
goto :eof
::
:FTsecpfatrootentr
#ToAddNew#if %FLOPTYPE%== &; if %fattype:~0,5%==FAT12 && set fatsz16=x\x && set rootentr=x\x ! if %fattype:~0,5%==FAT16 && set fatsz16=x\x && set rootentr=x1F\x00
if %FLOPTYPE%==4 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x10\x00
if %FLOPTYPE%==8 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x10\x00
if %FLOPTYPE%==12 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x10\x00
if %FLOPTYPE%==14 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x10\x00
#ToAddNew#if %FLOPTYPE%== &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && set rootentr=x10\x00
if %FLOPTYPE%==16 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x10\x00
if %FLOPTYPE%==24 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x10\x00
if %FLOPTYPE%==28 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x10\x00
if %FLOPTYPE%==32 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x20\x00
if %FLOPTYPE%==64 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x20\x00
if %FLOPTYPE%==128 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x40\x00
if %FLOPTYPE%==234752 &; if %fattype:~0,5%==FAT16 && set fatsz16=xE6\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==123264 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=x70\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=xF1\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==20385 &; if %fattype:~0,5%==FAT12 && set fatsz16=x08\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x9E\x00 && if not exist rootentr && set rootentr=x00\x01
#MaxforElTorito#
if %FLOPTYPE%==36864 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x10\x03 ! if %fattype:~0,5%==FAT16 && set fatsz16=x90\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==18432 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x8F\x00 && if not exist rootentr && set rootentr=x00\x02
if %FLOPTYPE%==15360 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1E\x00 && if not exist rootentr && set rootentr=x30\x02
#--------------#
if %FLOPTYPE%==34560 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x10\x03 ! if %fattype:~0,5%==FAT16 && set fatsz16=x87\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==31680 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=x70\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=xF6\x00 && if not exist rootentr && set rootentr=x00\x01
if %FLOPTYPE%==28800 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && if not exist rootentr && set rootentr=x90\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=xE0\x00 && if not exist rootentr && set rootentr=x00\x01
if %FLOPTYPE%==25920 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && if not exist rootentr && set rootentr=xB0\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=xC9\x00 && if not exist rootentr && set rootentr=x00\x01
if %FLOPTYPE%==23040 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=xD0\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=xB3\x00 && if not exist rootentr && set rootentr=x00\x01
if %FLOPTYPE%==20160 &; if %fattype:~0,5%==FAT12 && set fatsz16=x08\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x9D\x00 && if not exist rootentr && set rootentr=x00\x01
if %FLOPTYPE%==17280 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x22\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==15840 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1F\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==15360 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1E\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==14400 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1D\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==13200 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && if not exist rootentr && set rootentr=x30\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1A\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==12960 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && if not exist rootentr && set rootentr=x30\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1A\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==12000 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=x50\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x18\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==11520 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=x50\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x17\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==12240 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=x50\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x18\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==10800 &; if %fattype:~0,5%==FAT12 && set fatsz16=x08\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x16\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==10080 &; if %fattype:~0,5%==FAT12 && set fatsz16=x08\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x14\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==9600 &; if %fattype:~0,5%==FAT12 && set fatsz16=x08\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x13\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==9180 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x90\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x12\x00 && if not exist rootentr && set rootentr=x30\x02
#BAD#if %FLOPTYPE%==9180 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=xD4\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x24\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==8640 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x11\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==8400 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x11\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==8100 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x20\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==7200 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1C\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==6000 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x18\x00 && if not exist rootentr && set rootentr=x10\x02
if %FLOPTYPE%==5760 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x17\x00 && if not exist rootentr && set rootentr=x10\x02
#BAD#if %FLOPTYPE%==5760 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=x10\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x2D\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==4800 &; if %fattype:~0,5%==FAT12 && set fatsz16=x08\x00 && if not exist rootentr && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x26\x00 && if not exist rootentr && set rootentr=x00\x02
#BAD#if %FLOPTYPE%==4800 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x26\x00 && if not exist rootentr && set rootentr=xE0\x00
#NONEED#if %FLOPTYPE%==4800 &; if %fattype:~0,5%==FAT12 && set fatsz16=x08\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==4590 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x12\x00 && if not exist rootentr && set rootentr=x30\x02
if %FLOPTYPE%==4320 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x22\x00 && if not exist rootentr && set rootentr=x00\x02
#BAD#if %FLOPTYPE%==4000 &; if %fattype:~0,5%==FAT12 && set fatsz16=x03\x00 && if not exist rootentr && set rootentr=x70\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x\x00 && if not exist rootentr && set rootentr=xE0\x00
#NoProblemsWithMSDOS7#
if %FLOPTYPE%==3840 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1E\x00 && if not exist rootentr && set rootentr=x00\x02
#FAT16:BadWithMSDOS622Too#if %FLOPTYPE%==3840 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1E\x00 && set rootentr=xF0\x00
#FAT12:BadWithMSDOS622#if %FLOPTYPE%==3840 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1E\x00 && set rootentr=x00\x02
if %FLOPTYPE%==3825 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1E\x00 && if not exist rootentr && set rootentr=x00\x02
#FAT12:BadWithMSDOS622#if %FLOPTYPE%==3825 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && set rootentr=x10\x02 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1E\x00 && set rootentr=x00\x02
if %FLOPTYPE%==3600 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1C\x00 && if not exist rootentr && set rootentr=x00\x02
#FAT12:BadWithMSDOS622#if %FLOPTYPE%==3600 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1C\x00 && set rootentr=x00\x02
if %FLOPTYPE%==3520 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1C\x00 && if not exist rootentr && set rootentr=x00\x02
#FAT12:BadWithMSDOS622#if %FLOPTYPE%==3520 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x1C\x00 && set rootentr=x00\x02
if %FLOPTYPE%==3200 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x19\x00 && if not exist rootentr && set rootentr=x00\x02
#FAT12:BadWithMSDOS622#if %FLOPTYPE%==3200 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x19\x00 && set rootentr=x00\x02
if %FLOPTYPE%==3120 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x19\x00 && if not exist rootentr && set rootentr=x00\x02
#BadWithMSDOS622#if %FLOPTYPE%==3120 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x19\x00 && set rootentr=x00\x02
## NEW=>Standard
if %FLOPTYPE%==2880 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x17\x00 && if not exist rootentr && set rootentr=x00\x02
#FAT12:BadWithMSDOS622#if %FLOPTYPE%==2880 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x17\x00 && set rootentr=x00\x02
#-------------------#
if %FLOPTYPE%==2400 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=xF0\x00 ! if %fattype:~0,5%==FAT16 && set fatsz16=x13\x00 && if not exist rootentr && set rootentr=x00\x02
#FAT12:BadWithMSDOS622#if %FLOPTYPE%==2400 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && set rootentr=xF0\x01 ! if %fattype:~0,5%==FAT16 && set fatsz16=x13\x00 && set rootentr=x00\x02
#NoFAT16possible#
if %FLOPTYPE%==1920 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0C\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==1840 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==1760 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && if not exist rootentr && set rootentr=xE0\x00
#BAD#if %FLOPTYPE%==1743 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0B\x00 && set rootentr=xE0\x00
if %FLOPTYPE%==1680 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==1600 &; if %fattype:~0,5%==FAT12 && set fatsz16=x0A\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==1440 &; if %fattype:~0,5%==FAT12 && set fatsz16=x09\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==1200 &; if %fattype:~0,5%==FAT12 && set fatsz16=x07\x00 && if not exist rootentr && set rootentr=xE0\x00
if %FLOPTYPE%==820 &; if %fattype:~0,5%==FAT12 && set fatsz16=x03\x00 && if not exist rootentr && set rootentr=x70\x00
if %FLOPTYPE%==720 &; if %fattype:~0,5%==FAT12 && set fatsz16=x03\x00 && if not exist rootentr && set rootentr=x70\x00
if %FLOPTYPE%==800 &; if %fattype:~0,5%==FAT12 && set fatsz16=x03\x00 && if not exist rootentr && set rootentr=x70\x00
if %FLOPTYPE%==640 &; if %fattype:~0,5%==FAT12 && set fatsz16=x02\x00 && if not exist rootentr && set rootentr=x70\x00
#BAD#if %FLOPTYPE%==600 &; if %fattype:~0,5%==FAT12 && set fatsz16=x04\x00 && set rootentr=x70\x00
if %FLOPTYPE%==400 &; if %fattype:~0,5%==FAT12 && set fatsz16=x02\x00 && if not exist rootentr && set rootentr=x70\x00
if %FLOPTYPE%==360 &; if %fattype:~0,5%==FAT12 && set fatsz16=x02\x00 && if not exist rootentr && set rootentr=x70\x00
if %FLOPTYPE%==320 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x70\x00
if %FLOPTYPE%==180 &; if %fattype:~0,5%==FAT12 && set fatsz16=x02\x00 && if not exist rootentr && set rootentr=x40\x00
if %FLOPTYPE%==160 &; if %fattype:~0,5%==FAT12 && set fatsz16=x01\x00 && if not exist rootentr && set rootentr=x40\x00
goto :eof
::
:rdclean
#-# /RDSIZE:n => near 4g rdbase must be set at 4g, otherwise crash in :rdclean; current choice is rdbase=4g above /RSIZE:3500
setlocal && set * && set fattype=%fattype:~0,5% && set ptstart=%ptstart% && set hiddsect=%hiddsect% && set rsrvsect=%rsrvsect% && set sectpfat=%sectpfat% && set rootsect=%rootsect% && set rdbase=%rdbase% && set rdsize=%rdsize% && set RDSIZE=%RDSIZE% && set LOG=%LOG%
#RealMemsizeNeededFor'(ptstart+rsrvrd+2xFAT)*512+rootsize'(rootsizeFAT:rootentr*32;rootsizeFAT32:2MB)#
if exist ptstart && if not exist hiddsect && set hiddsect=%ptstart% ! if not exist ptstart && if exist hiddsect && set hiddsect=%hiddsect% ! if not exist hiddsect && set hiddsect=0 &; if not %fattype:~0,5%==FAT32 && set /A memsize=%hiddsect% + %rsrvsect% + %sectpfat% + %sectpfat% + %rootsect% * 512 ! set /A memsize=%hiddsect% + %rsrvsect% + %sectpfat% + %sectpfat% * 512 + 2m &; set /a needMB=%memsize%>>20+3 && set /a rdMB=%rdsize%>>20 &; if not %memsize%<=%rdsize% && endlocal && echo Abort: ram-disk is too small, needed %needMB%MB, available %rdMB%MB && set result=0 && goto :eof
#NOTFULLYGOOD#if exist ptstart && if not exist hiddsect && set hiddsect=%ptstart% ! if not exist ptstart && if exist hiddsect && set hiddsect=%hiddsect% ! if not exist hiddsect && set hiddsect=0 &; if not %fattype:~0,5%==FAT32 && set /A memsize=%hiddsect% + %rsrvsect% + %sectpfat% + %sectpfat% + %rootsect% * 512 ! set /A memsize=%hiddsect% + %rsrvsect% + %sectpfat% + %sectpfat% * 512 + 2m &; set /a needMB=%memsize%>>20+1 && set /a rdMB=%rdsize%>>20 &; if not %memsize%<=%rdsize% && endlocal && echo Abort: ram-disk is too small, needed %needMB%MB, available %rdMB%MB && set result=0 && goto :eof
if not %rdsize%<=4m if not %memsize%<=4m || endlocal && goto :eof
if exist RDSIZE && set /A memsize=%rdsize%-4m ! set /A memsize=%memsize%-4m &; if not %memsize%<=3g && set /A memsize=3g ! set memsize=%memsize% &; if %ptstart%<=8192 && set /A RDstart=8192 ! set /A RDstart=%ptstart% && set /A memsize=-1 * %ptstart% + 8192 * 512 + %memsize%
#NONEED#if exist RDSIZE && set /A memsize=%rdsize%-4m ! set /A memsize=%memsize%-4m &; if not %memsize%<=4g && set /A memsize=4g-8m ! set memsize=%memsize% &; if %ptstart%<=8192 && set /A RDstart=8192 ! set /A RDstart=%ptstart% && set /A memsize=-1 * %ptstart% + 8192 * 512 + %memsize% &; set /A RDsect=%memsize%>>9
if %memsize%<=4m && endlocal && goto :eof
#NoUsableReturnValues!#
#JustBeforeCrash#echo %0 "if not %rdbase%>=4g &; call Fn.24 %rdbase% 0x00 %memsize%
## Recoverd from Crash with higher graphicsmode, maybe somewere Framebuffer overwritten???
#NoDifference#errorcheck off
#NoCrashIf:rdbase>=256m ????????????#
#NoDiffernce#setlocal && set * && set rdbase=%rdbase% && set memsize=%memsize%
#NoDiffernce#set /A mdbase=%rdbase%/0x200 && set /A rdsect=%memsize%/0x200 &; cat --hex --skip=508 --length=4 (md)%mdbase%+%rdsect%
#NoDiffernce#raw write --offset=508 (md)%mdbase%+%rdsect% \x00\x00\x00\x00
#NoDiffernce#endlocal
#NEW:ExtraCheckIfMemoryIsClean#
set /A mdstart=60m && set /A size=%memsize% &; set /A cleansec=%size%>>9 &; if not %cleansec%<=0x2000 && set cleansec=0x2000 ! set cleansec=%cleansec% &; set /A MDstart=%mdstart%>>9 && set /A mdclean=%cleansec% * 512 &; call Fn.24 %mdstart% 0x00 %mdclean%
if not %rdbase%>=4g &; raw cat --locate=\x00 (md)%MDstart%+%cleansec% > nul &; set /A clean=%@retval%&0xffffffff &; if not %clean%==%mdclean% && echo Abort: can not clean memory, (md)%MDstart%+%cleansec% is not clean && endlocal && set result=0 && goto :eof
if %rdbase%>=4g &; raw cat --locate=\x00 (md)%MDstart%+%cleansec% > nul &; set /A clean=%@retval%&0xffffffff &; if not %clean%==%mdclean% && echo Abort: can not clean top-memory, (md)%MDstart%+%cleansec% is not clean && endlocal && set result=0 && goto :eof
set c=1 && set dd=1 && set /a dmax=%size%>>20/4
if not %rdbase%>=4g &; call :Fn.4 &; set h= && set /a v0=%v% && set v= &; echo -n $[0x0F]Wait cleaning %memsize% byte of memory:
if %rdbase%>=4g &; call :Fn.4 &; set h= && set /a v0=%v% && set v= &; echo -n $[0x0F]Wait cleaning %memsize% byte of top-memory:
setlocal && call :Fn.4 &; endlocal && set /a h=%h%
#grldr>2017only!#if %rdbase%>=4g &; call Fn.25 0x0 1 0x00 %memsize% 0
:cleanmemory
if %dmax%>=1 && set /a dmax=%dmax%-1 &; if %dmax%<=9 && set dmax=00%dmax% ! if %dmax%<=99 && set dmax=0%dmax% ! set dmax=%dmax% &; call :Fn.5 %h% %v0% &; echo -n -e \x20$[0x0F]%dmax%$[]*4MB\x20 && set /a dmax=%dmax%
#NONEEDwithMax3GB#if %dmax%>=1 && set /a dmax=%dmax%-1 &; if %dmax%<=9 && set dmax=000%dmax% ! if %dmax%<=99 && set dmax=00%dmax% ! if %dmax%<=999 && set dmax=0%dmax% ! set dmax=%dmax% &; call :Fn.5 %h% %v0% &; echo -n -e \x20$[0x0F]%dmax%$[]*4MB\x20 && set /a dmax=%dmax%
call Fn.24 %mdstart% 0x00 %mdclean%
if not %size%>=4m && set /A cleansec=%size%>>9
## NEW: cmp is MUCH faster: 7 seconds/2g, cat is 1m:55s
if not %rdbase%>=4g &; if %cleansec%>=1 && set result= && set retval= && set clean= &; raw dd if=(md)%MDstart%+%cleansec% of=(rd)%RDstart%+%cleansec% > nul && set result=1 ! set result=0 && set /a c=%c%+1 &; if %result%==1 && cmp (md)%MDstart%+%cleansec% (rd)%RDstart%+%cleansec% > nul ! set clean=0 &; set /a retval=%@retval%&0xffffffff &; if not exist clean && set clean=%retval% ! set clean=%clean% &; if %result%==1 && if %clean%==1 && set /A size=%size%-%mdclean% && set /A RDstart=%RDstart%+%cleansec% ! set result=%result% &; if %result%==0 && if %c%<=2 && goto :cleanmemory ! if %clean%==0 && if %c%<=2 && set /a c=%c%+1 && goto :cleanmemory ! if %c%>=3 && echo $[0x0F] Abort: can not clean %mdclean% byte memory starting at sector %RDstart% && endlocal && set result=0 && goto :eof ! if %size%>=1 && set /a dd=%dd%+1 && goto :cleanmemory
if %rdbase%>=4g &; if %cleansec%>=1 && set result= && set retval= && set clean= &; raw dd if=(md)%MDstart%+%cleansec% of=(rd)%RDstart%+%cleansec% > nul && set result=1 ! set result=0 && set /a c=%c%+1 &; if %result%==1 && cmp (md)%MDstart%+%cleansec% (rd)%RDstart%+%cleansec% > nul ! set clean=0 &; set /A retval=%@retval%&0xffffffff &; if not exist clean && set clean=%retval% ! set clean=%clean% &; if %result%==1 && if %clean%==1 && set /A size=%size%-%mdclean% && set /A RDstart=%RDstart%+%cleansec% ! set result=%result% &; if %result%==0 && if %c%<=2 && goto :cleanmemory ! if %clean%==0 && if %c%<=2 && set /a c=%c%+1 && goto :cleanmemory ! if %c%>=3 && echo $[0x0F] Abort: can not clean %mdclean% byte top-memory starting at sector %RDstart% && endlocal && set result=0 && goto :eof ! if %size%>=1 && set /a dd=%dd%+1 && goto :cleanmemory
if exist v0 && call :Fn.5 0 %v0% && echo -n -e $[]                                                                           \x20 && call :Fn.5 0 %v0%
set result=1
endlocal && set result=%result%
goto :eof
::
:writefat
setlocal && set * && set fattype=%fattype% && set mediabyt=%mediabyt% && set rsrvclus=%rsrvclus% && set V=%V% && set ptstart=%ptstart% && set rootclus=%rootclus% && set numfats=%numfats% && set "NULL=%NULL%"
## && set =%%
#DEBUG#pause %0 fattype=%fattype% mediabyt=%mediabyt% rsrvclus=%rsrvclus% V=%V% ptstart=%ptstart% rootclus=%rootclus% numfats=%numfats% "NULL=%NULL%"
if %fattype:~0,5%==FAT12 && set writefat=%mediabyt%\xFF\xFF
if %fattype:~0,5%==FAT16 && set writefat=%mediabyt%\xFF\xFF\xFF
#onlyiffirstclusterisempty#if %fattype:~0,5%==FAT32 && set writefat=%mediabyt%\xFF\xFF\x0F\xFF\xFF\xFF\x0F
#badtoo?#if %fattype:~0,5%==FAT32 && set writefat=%mediabyt%\xFF\xFF\xFF\xFF\xFF\xFF\xFF
## SET Cluster 2 NOT-empty!??
if %fattype:~0,5%==FAT32 &; if not %rsrvclus%>=1 && set ROOTFAT=\xFF\xFF\xFF\x0F
#TOONEW#if %fattype:~0,5%==FAT32 && if %rsrvclus%>=1 && setlocal &; if %rootclus%>=2 && set /A c=%rootclus%+1 && set C=3 ! set c=0x3 && set C=3 &; call :rootfat &; endlocal && set ROOTFAT=%ROOTFAT% && set ROOTFAT2=%ROOTFAT2% && set ROOTFAT3=%ROOTFAT3%
if %fattype:~0,5%==FAT32 && if %rsrvclus%>=1 && setlocal && set c=0x3 && call :rootfat &; endlocal && set ROOTFAT=%ROOTFAT% && set ROOTFAT2=%ROOTFAT2% && set ROOTFAT3=%ROOTFAT3%
if %fattype:~0,5%==FAT32 && set writefat=%mediabyt%\xFF\xFF\x0F\xFF\xFF\xFF\x0F
#ORG#if %fattype:~0,5%==FAT32 && set writefat=%mediabyt%\xFF\xFF\x0F\xFF\xFF\xFF\x0F\xFF\xFF\xFF\x0F
if "%V%"=="/V" &; echo Write FAT Headers
#DEBUG#cat --hex (rd)%ptstart%+1,62 && pause
call :read 0xE (rd)%ptstart%+1 &; set /a offsetf1=%result%&0xffff+%ptstart%
errorcheck off
#TOONEW#raw write (rd)%offsetf1%+1 \%writefat% > nul || echo Bad write of start of first FAT: %writefat%%%NULL% && endlocal && set result=0 && goto :eof
#TOONEW#if exist ROOTFAT &; if %rootclus%>=2 && set /A offsetRC=%rootclus% * 4 && set /a ROOTSECT=%rootclus% * 4 + 8 / 512 + 1 ! set /A offsetRC=2*4 && set ROOTSECT=1 &; raw write --offset=%offsetRC% (rd)%offsetf1%+%ROOTSECT% %ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of first FAT at offset: %offsetRC%%%NULL% && endlocal && set result=0 && goto :eof
#OKE#pause %0 "raw write (rd)%offsetf1%+1 \%writefat%%%ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of first FAT: \%writefat%%%NULL% && endlocal && set result=0 && goto :eof
#DEBUG#pause %0 "raw write (rd)%offsetf1%+1 \%writefat%%%ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of first FAT: \%writefat%%%NULL% && endlocal && set result=0 && goto :eof
raw write (rd)%offsetf1%+1 \%writefat%%%ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of first FAT: \%writefat%%%NULL% && endlocal && set result=0 && goto :eof
#ORG#raw write (rd)%offsetf1%+1 \%writefat%%%ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of first FAT: %writefat%%%NULL% && set result=0 && goto :eof
if not %fattype:~0,5%==FAT32 && call :read 0x16 (rd)%ptstart%+1 &; set /a sectpfat=%result%&0xffff
if %fattype:~0,5%==FAT32 && call :read 0x24 (rd)%ptstart%+1 &; set /a sectpfat=%result%&0xffffffff
set /a offsetf2=%offsetf1%+%sectpfat%
if not %numfats%==x02 && endlocal && set sectpfat=%sectpfat% && goto :eof
#ORG#if not %numfats%==x02 && goto :eof
#TOONEW#raw write (rd)%offsetf2%+1 \%writefat% > nul || echo Bad write of start of second FAT: %writefat%%%NULL% && endlocal && set result=0
#TOONEW#if exist ROOTFAT &; if %rootclus%>=2 && set /A offsetRC=%rootclus% * 4 && set /a ROOTSECT=%rootclus% * 4 + 8 / 512 + 1 ! set /A offsetRC=2*4 && set ROOTSECT=1 &; raw write --offset=%offsetRC% (rd)%offsetf2%+%ROOTSECT% %ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of first FAT at offset: %offsetRC%%%NULL% && endlocal && set result=0 && goto :eof
#DEBUG#pause %0 "raw write (rd)%offsetf2%+1 \%writefat%%%ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of second FAT: \%writefat%%%NULL% && set result=0
raw write (rd)%offsetf2%+1 \%writefat%%%ROOTFAT%%%ROOTFAT2%%%ROOTFAT3% > nul || echo Bad write of start of second FAT: \%writefat%%%NULL% && set result=0
endlocal && set offsetf2=%offsetf2% && set sectpfat=%sectpfat%
goto :eof
::
:rootfat
if %rsrvclus%==1 &; if not exist ROOTFAT && set ROOTFAT=\xFF\xFF\xFF\x0F && goto :eof
if %rsrvclus%==1 &; if not exist ROOTFAT2 && set ROOTFAT=%ROOTFAT%\xFF\xFF\xFF\x0F && goto :eof
if %rsrvclus%==1 &; if not exist ROOTFAT3 && set ROOTFAT2=%ROOTFAT2%\xFF\xFF\xFF\x0F && goto :eof
if %rsrvclus%==1 &; set ROOTFAT3=%ROOTFAT3%\xFF\xFF\xFF\x0F && goto :eof
#TOONEW#set c=0000000%c:~2%
if %c%<=0xF && set c=0x0%c:~2%
#TOONEW#if %C%<=32 &; set ROOTFAT=%ROOTFAT%\x%c:~-2,2%\x%c:~-4,2%\x%c:~-6,2%\x%c:~-8,2% && set /A c=0x%c%+1 && set /A C=%C%+1 && set /a rsrvclus=%rsrvclus%-1 && goto :rootfat
#TOONEW#if %C%<=62 &; set ROOTFAT2=%ROOTFAT2%\x%c:~-2,2%\x%c:~-4,2%\x%c:~-6,2%\x%c:~-8,2% && set /A c=0x%c%+1 && set /A C=%C%+1 && set /a rsrvclus=%rsrvclus%-1 && goto :rootfat
#TOONEW#if %C%<=92 &; set ROOTFAT3=%ROOTFAT3%\x%c:~-2,2%\x%c:~-4,2%\x%c:~-6,2%\x%c:~-8,2% && set /A c=0x%c%+1 && set /A C=%C%+1 && set /a rsrvclus=%rsrvclus%-1 && goto :rootfat
if %c%<=32 &; set ROOTFAT=%ROOTFAT%\x%c:~2%\x00\x00\x00 && set /A c=0x%c%+1 && set /A c=%c%+1 && set /a rsrvclus=%rsrvclus%-1 && goto :rootfat
if %c%<=62 &; set ROOTFAT2=%ROOTFAT2%\x%c:~2%\x00\x00\x00 && set /A c=%c%+1 && set /a rsrvclus=%rsrvclus%-1 && goto :rootfat
if %c%<=92 &; set ROOTFAT3=%ROOTFAT3%\x%c:~2%\x00\x00\x00 && set /A c=%c%+1 && set /a rsrvclus=%rsrvclus%-1 && goto :rootfat
set rsrvclus=1 && goto :rootfat
::
:fatinfo
setlocal && set * && set "Q=%Q%" && set ptstart=%ptstart% && set disk=%disk% && set imgsize=%imgsize% && set rdsize=%rdsize% && set VOLLABEL=%VOLLABEL% && set rsrvclus=%rsrvclus% && set "NULL=%NULL%"
call :read 0x1FE (rd)%ptstart%+1 &; set /A magicbyt=%result%&0xffff &; if not %magicbyt%==0xAA55 && echo Invalid Magic Byte: %magicbyt% && endlocal && set result=0 && goto :eof
call :read 0xB (rd)%ptstart%+1 &; set /A bytepsec=%result%&0xffff &; if not %bytepsec%==512 && echo Invalid Bytes per sector: %bytepsec% && endlocal && set result=0 && goto :eof
call :read 0xD (rd)%ptstart%+1 &; set /a secpclus=%result%&0xff &; if %secpclus%==0 && echo Invalid Sectors per cluster: %secpclus% && endlocal && set result=0 && goto :eof ! if %secpclus%>=2 && calc %secpclus% % 2 > nul && echo Invalid Sectors per cluster: %secpclus% && endlocal && set result=0 && goto :eof
call :read 0xE (rd)%ptstart%+1 &; set /a reserved=%result%&0xffff &; if %reserved%==0 && echo Invalid Number of reserved sectors: %reserved% && endlocal && set result=0 && goto :eof
call :read 0x10 (rd)%ptstart%+1 &; set /a numfat=%result%&0xff &; if not %numfat%==1 && if not %numfat%==2 && echo Invalid Number of FAT's: %numfat% && endlocal && set result=0 && goto :eof
call :read 0x11 (rd)%ptstart%+1 &; set /a rootentr=%result%&0xffff &; set /a rootsect=%rootentr% * 32 / 512
call :read 0x13 (rd)%ptstart%+1 &; set /a totsect=%result%&0xffff &; if %totsect%==0 && call :read 0x20 (rd)%ptstart%+1 &; set /a totsect=%result%&0xffffffff
call :read 0x16 (rd)%ptstart%+1 &; set /a secpfat=%result%&0xffff &; if %secpfat%==0 && call :read 0x24 (rd)%ptstart%+1 &; set /a secpfat=%result%&0xffffffff && set version=MSDOS70
if %secpfat%==0 && echo Invalid Sectors per FAT: %secpfat% && endlocal && set result=0 && goto :eof
if not %version%==MSDOS70 && call :read 0x26 (rd)%ptstart%+1 &; set /A extsign=%result%&0xff
if %version%==MSDOS70 && call :read 0x42 (rd)%ptstart%+1 &; set /A extsign=%result%&0xff
if not %extsign%==0x28 && if not %extsign%==0x29 && echo Invalid Extended Bios Parameter Block: %extsign% && endlocal && set result=0 && goto :eof
if %extsign%==0x29 && if not %version%==MSDOS70 &; raw cat --skip=0x36 --length=8 (rd)%ptstart%+1 | set filesys= &; if not /i %filesys:~0,3%==FAT && echo Invalid File System: %filesys% && endlocal && set result=0 && goto :eof
if %extsign%==0x29 && if %version%==MSDOS70 &; raw cat --skip=0x52 --length=8 (rd)%ptstart%+1 | set filesys= &; if not /i %filesys:~0,3%==FAT && echo Invalid File System: %filesys% && endlocal && set result=0 && goto :eof
if not %version%==MSDOS70 &; if %rootsect%==0 && echo Invalid Number of Root direcory entries: %rootentr% && endlocal && set result=0 && goto :eof
if %version%==MSDOS70 &; if not %rootsect%==0 && echo Invalid Number of Root direcory entries: %rootentr% && endlocal && set result=0 && goto :eof
call :read 0x15 (rd)%ptstart%+1 &; set /A mediabyt=%result%&0xff &; checkrange 0xF0:0xFF calc %mediabyt% || echo Invalid Media type: %mediabyt% && endlocal && set result=0 && goto :eof
call :read 0x18 (rd)%ptstart%+1 &; set /a sectrack=%result%&0xffff &; checkrange 1:63 calc %sectrack% || echo Invalid Number of heads: %sectrack% && endlocal && set result=0 && goto :eof
call :read 0x1A (rd)%ptstart%+1 &; set /a numheads=%result%&0xffff &; checkrange 1:255 calc %numheads% || echo Invalid Number of heads: %numheads% && endlocal && set result=0 && goto :eof
call :read 0x1C (rd)%ptstart%+1 &; set /a hiddsect=%result%&0xffffffff && set result=
if %version%==MSDOS70 &; call :read 0x2C (rd)%ptstart%+1 &; set /A rootclus=%result%&0xffffffff &; if not %rootclus%>=2 && echo Invalid First Root cluster number: %rootclus% && endlocal && set result=0 && goto :eof
if %version%==MSDOS70 &; call :read 0x30 (rd)%ptstart%+1 &; set /A fsinfsec=%result%&0xffff &; if %fsinfsec%==0 && echo Invalid FSInfo sector: %fsinfsec% && endlocal && set result=0 && goto :eof
if %version%==MSDOS70 &; call :read 0x32 (rd)%ptstart%+1 &; set /A backsec=%result%&0xffff &; if %backsec%<=3 && echo Invalid Backup Sector: %backsec% && endlocal && set result=0 && goto :eof
if %version%==MSDOS70 &; raw cat --skip=0x34 --locate=\x00 --length=12 (rd)%ptstart%+1 > nul &; if not %@retval%==12 && echo Invalid FAT-version 7.0 (12 zeros missing from 0x34) && endlocal && set result=0 && goto :eof
set /a numclus=-%numfat% * %secpfat% + %totsect% - %reserved% - %rootsect% / %secpclus%
if %numclus%<=4084 && set fattype=FAT12 ! if %numclus%<=65524 && set fattype=FAT16 ! set fattype=FAT32
if "%Q%"=="/Q" &; endlocal && set reserved=%reserved% && set numfat=%numfat% && set secpfat=%secpfat% && set rootsect=%rootsect% && set numclus=%numclus% && goto :eof
echo FAT sub-type:           %fattype:~0,5%
echo Sectors per cluster:    %secpclus%
echo Reserved sectors:       %reserved%
echo Number of FAT's:        %numfat%
if not %version%==MSDOS70 && echo Root directory entries: %rootentr%
echo Sectors per FAT:        %secpfat%
echo Sectors per track:      %sectrack%
echo Number of heads:        %numheads%
echo Hidden sectors:         %hiddsect%
echo Total sectors:          %totsect%
if %rsrvclus%>=1 && set /a rootentr=%rsrvclus% * %secpclus% * 512 / 32 &; echo Reserved root-entries:  %rootentr%
if %fattype:~0,5%==FAT32 &; if not %rsrvclus%>=2 && set /a freeclus=%numclus%-1 ! set /a freeclus=%numclus%-%rsrvclus%
if not %fattype:~0,5%==FAT32 &; set freeclus=%numclus%
#ORG#if %fattype:~0,5%==FAT32 && set /a freeclus=%numclus%-1 ! set freeclus=%numclus%
echo Total clusters:         %numclus%
if %fattype:~0,5%==FAT32 && echo Free clusters:          %freeclus%
set /a cylinder=%totsect%+%hiddsect%/%numheads%/%sectrack% &; if %disk:~1,2%==fd && echo Number of tracks:       %cylinder% ! echo -e Cylinders in use:       %cylinder%\t  (includes hidden sectors)
#NOTSOGOOD#set /a cylinder=%imgsize%>>9 / %numheads% / %sectrack% &; if %disk:~1,2%==fd && echo Number of tracks:       %cylinder% ! echo Number of cylinders:    %cylinder%
set /A dataarea=%rootsect% + %secpfat% + %secpfat% + %reserved% * %bytepsec% &; set /a bytedata=%totsect% * %bytepsec% - %dataarea% && set /a byteclus=%numclus% * %secpclus% * %bytepsec% &; set /a paddsect=%bytedata%-%byteclus%/%bytepsec% &; if %paddsect%>=0 && echo Padding sectors:        %paddsect% ! echo $[0x0F]Padding sectors:        %paddsect% - BUG, please report! && set result=0
#NOTGOOD#set /A dataarea=%rootsect% + %secpfat% + %secpfat% + %reserved% * %bytepsec% &; set /a bytedata=%totsect% - %ptstart% * %bytepsec% - %dataarea% && set /a byteclus=%numclus% * %secpclus% * %bytepsec% &; set /a paddsect=%bytedata%-%byteclus%/%bytepsec% &; if %paddsect%>=0 && echo Padding sectors:        %paddsect% ! echo $[0x0F]Padding sectors:        %paddsect% - BUG, please report! && set result=0
set /a drvspace=%numclus% * %secpclus% >>1
set /a freespac=%freeclus% * %secpclus% >>1
set /a rdsect=%rdsize%>>9-%ptstart% &; set /a rdspace=-%rootentr% * 32 / 512 - %reserved% - %secpfat% - %secpfat% + %rdsect% >>1
if %fattype:~0,5%==FAT32 && echo -n %freespac% KB available disk space &; if %rdspace%>=8 && if not %rdspace%>=%freespac% && echo , currently available on ram-disk %rdspace% KB ! echo
if not %fattype:~0,5%==FAT32 &; echo -n %drvspace% KB total drive space &; if %rdspace%>=8 && if not %rdspace%>=%freespac% && echo , %rdspace% KB currently available on ram-disk ! echo
endlocal && set reserved=%reserved% && set numfat=%numfat% && set secpfat=%secpfat% && set rootsect=%rootsect% && set numclus=%numclus%
goto :eof
::
:makeimagefile
set "RAMDISK=set imgsize=%imgsize% && set rdbase=%rdbase% && set rdsize=%rdsize% && set disk=%disk% && set LOG=%LOG% && set rdbase0=%rdbase0% && set rdsize0=%rdsize0%"
setlocal && set * && set Y=%Y% && set "NULL=%NULL%"
set "FILE=%~1" && set DEVICE=%~d1 && set "PATH=%~p1" && set "NAME=%~n1" && set "EXT=%~x1"
set /a imgsize=%~2 &; set /a sectbal=%~2>>9 && set /a needKB=%~2>>10+1
#BADfor>=2g?#set /a imgsize=%~2 &; set /a sectbal=%~2/512
set "contigu=%~3"
if not "%~3"=="/Q" if not "%~4"=="/Q" || set "Q=/Q" ! if not "%~3"=="/V" if not "%~4"=="/V" || set "V=/V"
set n=0
call :fatdev "%DEVICE%" &; if not %fatdev%==Y &; if not "%Q%"=="/Q" && echo $[]===================================================================== && echo Can not make image$[0x00]"$[]%FILE%$[0x00]"$[]- target is not a FAT-device ! set "Q=%Q%" &; endlocal && set result=0 && goto :eof
if not %freeKB%>=%needKB% &; if not "%Q%"=="/Q" && echo Not enough free space on Target %DEVICE%: needed %needKB%KB, available %freeKB%KB ! set "Q=%Q%" &; endlocal && set result=0 && goto :eof
if exist %FILE% && cat --length=0 %FILE% > nul &; if %imgsize%==%@retval%&0xffffffff && set imageoke=Y ! set delimg=Y
if exist Y && pause --wait=7
if not exist NULL && if exist Y && call :Fn.4 &; set v0=%v% && set v= && set h= &; echo -e Make$[0x00]"$[]'%FILE%'$[0x00]"$[](%imgsize% bytes/ %sectbal% sectors)
if not exist NULL && if not exist Y && call :Fn.4 &; set v0=%v% && set v= && set h= &; echo -e Make$[0x00]"$[]'%FILE%'$[0x00]"$[](%imgsize% bytes/ %sectbal% sectors)?
if not exist NULL && if not exist Y && set choice= ! set choice=Y &; if not %choice%==Y && call :Fn.4 &; set h= && set v1=%v% && set v= &; set /p /u "choice= Make Image? (N=quit Y=yes)> " && echo ! set choice=N && echo &; if not %choice:~0,1%==Y && call :Fn.4 &; set h= &; if %v1%==%v% && if %v%>=1 && set /a v1=%v1%-1 ! set v1=%v1% &; call :Fn.5 0 %v1% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v1% &; echo Aborted by user, image still (partly) available on ram-disk && endlocal && set result=0 && goto :eof
#BAD#if not exist NULL && if %choice:~0,1%==Y && call :Fn.5 0 %v0% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% &; set v0=
if not exist NULL && if %choice:~0,1%==Y && call :Fn.4 &; set h= &; if %v0%==%v% && if %v%>=2 && set /a v0=%v0%-2 && set /a v1=%v1%-1 ! if %v1%==%v% && if %v%>=1 && set /a v0=%v0%-1 ! set v1=%v1% &; call :Fn.5 0 %v0% &; echo -e $[]                                                                              \x20 && echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% &; set v1= && set v=
if %imageoke%==Y && goto :imageoke
if %delimg%==Y && set delimg= &; call :deleteFILE &; if %result%==0 && endlocal && set result=0 && goto :eof
if %?_BOOT%==fat &; if not %delimg%==Y && fat dir %DEVICE%%%PATH:~0,-1% > nul |; echo -n > (md)0x300+1 && echo %PATH% > (md)0x300+1 && raw cat --locate=/ --replace=\x0A (md)0x300+1 > nul && raw cat (md)0x300+1 | call :makepath &; if %result%==0 && endlocal && set result=0 && goto :eof
if %?_BOOT%==fatlfn &; if not %delimg%==Y && set result= && FATLFN.LLL dir "%DEVICE%%%PATH:~0,-1%" "> nul" &; if not %result%>=0 && echo -n > (md)0x300+1 && echo %PATH% > (md)0x300+1 && raw cat --locate=/ --replace=\x0A (md)0x300+1 > nul && raw cat (md)0x300+1 | call :makepath &; if %result%==0 && endlocal && set result=0 && goto :eof
#NONEED#set "FILE=%DEVICE%%%PATH%%%NAME%%%EXT%
set delimg=
:nextimage
if %n%>=1 && set fatdev= && set freeKB= && call :fatdev "%DEVICE%" &; if not %freeKB%>=%needKB% &; if not "%Q%"=="/Q" && echo Not enough space on %fatdev%: needed %needKB%KB, available %freeKB%KB ! set "Q=%Q%" &; endlocal && set result=0 && goto :eof
set m=0
:makefile
if %m%>=1 && echo -e Retry make image-file$[0x00]"$[]'%FILE%'$[0x00]"%NULL% ! echo -n $[0x0F]Wait making image file...%NULL%
errorcheck off
if %?_BOOT%==fat &; fat mkfile size=%imgsize% %FILE% > nul && if exist %FILE% &; raw cat --length=0 %FILE% > nul |; if %m%<=2 && set /a m=%m%+1 && fat del %FILE% && goto :makefile ! fat del %FILE% && echo Can not make '%FILE%'%NULL% && if %n%>=1 && call :deleteBK09 && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
if %?_BOOT%==fatlfn &; set result= && FATLFN.LLL mkfile size=%imgsize% "%FILE%" &; if exist %FILE% &; raw cat --length=0 %FILE% > nul |; if %m%<=2 && set /a m=%m%+1 && FATLFN.LLL del "%FILE%" && goto :makefile ! FATLFN.LLL del "%FILE%" && echo -e Can not make $[0x00]"$[]'%FILE%'$[0x00]"%NULL% && if %n%>=1 && call :deleteBK09 && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
set m= && if exist %FILE% &; raw cat --length=0 %FILE% > nul && set /a filesize=*0x8290&0xffffffff ! set filesize=0
if not %filesize%==%imgsize% && call :deleteFILE &; endlocal && set result=0 && goto :eof
if %filesize%==%imgsize% && if not "%Q%"=="/Q" && call :Fn.5 0 %v0%
#MayBeNot#if %filesize%==%imgsize% && if not "%Q%"=="/Q" && call :Fn.5 0 %v0% &; echo Made image %FILE%: %filesize% bytes (%sectbal% sectors) && set filesize= && set v0=
:imageoke
blocklist %FILE% | set block=
call Fn.11 "%block:~6%" "," && set numplus=2 ! set numplus=1
if %numplus%==1 && if not %contigu%==Y &; if not "%Q%"=="/Q" && echo -e Image$[0x00]"$[]'%FILE%'$[0x00]"$[]is contiguous!\x20\x20\x20\x20\x20 ! set "Q=%Q%" &; endlocal && goto :eof
if %numplus%==1 && if %contigu%==Y &; if not "%Q%"=="/Q" && echo -e Image$[0x00]"$[]'%FILE%'$[0x00]"$[]is contiguous!\x20\x20\x20\x20\x20 ! set "Q=%Q%" &; call :deleteBK09 &; endlocal && goto :eof
if %numplus%>=2 && if not "%Q%"=="/Q" && echo -e Image$[0x00]"$[]'%FILE%'$[0x00]"$[]is not contiguous!
if not %contigu%==Y && endlocal && goto :eof
errorcheck off
if %?_BOOT%==fat &; fat ren %FILE% %PATH%%%NAME%.BK%n% > nul |; if not "%Q%"=="/Q" && echo Can not rename '%FILE%' to '%PATH%%%NAME%.BK%n%' ! set "Q=%Q%" &; call :deleteFILE &; endlocal && set result=0 && goto :eof
if %?_BOOT%==fatlfn &; set result= && FATLFN.LLL ren "%FILE%" "%PATH%%%NAME%.BK%n%" &; if not %result=1 &; if not "%Q%"=="/Q" && echo -e Can not rename $[0x00]"$[]'%FILE%'$[0x00]"$[]to $[0x00]"$[]'%PATH%%%NAME%.BK%n%'$[0x00]" ! set "Q=%Q%" &; call :deleteFILE &; endlocal && set result=0 && goto :eof
set /a n=%n%+1 &; if %n%<=9 && set block= && set numplus= && goto :nextimage
call :deleteFILE
call :deleteBK09
endlocal && set result=0
goto :eof
::
:makepath
if "%~1"=="" && set makepath= && goto :eof
if not exist makepath && set "makepath=/%~1" ! set "makepath=%makepath%/%~1"
if exist %DEVICE%%%makepath% && echo -e Abort:$[0x00]"$[]'%DEVICE%%%makepath%'$[0x00]"$[]is an existing file%NULL% && set result=0 && goto :eof
errorcheck off
if %?_BOOT%==fat &; fat dir %DEVICE%%%makepath% > nul || fat mkdir %DEVICE%%%makepath% > nul || echo Abort: can not make directory '%DEVICE%%%makepath%'%NULL% && set result=0 && goto :eof
if %?_BOOT%==fatlfn &; set result= && FATLFN.LLL dir "%DEVICE%%%makepath%" "> nul" &; if not %result%>=0 && FATLFN.LLL mkdir "%DEVICE%%%makepath%" &; if not %result%==1 && echo -e Abort: can not make directory$[0x00]"$[]'%DEVICE%%%makepath%'$[0x00]"%NULL% && set result=0 && goto :eof
shift
goto :makepath
::
:fatdev
setlocal && set * && set mdbase=0x300 && set "NULL=%NULL%"
set "device=%~1" &; if not exist device && endlocal && set fatdev= && goto :eof
if exist device && errorcheck off
fat info %device% > nul && set fatdev=Y ! endlocal && set fatdev= && goto :eof
fat info %device% > (md)%mdbase%+1
raw cat --locate="drive space.\x0A" (md)%mdbase%+1 > nul &; set /A devspace=%?%+13
raw cat --skip=%devspace% --locate=\x20KB\x20 (md)%mdbase%+1 > nul &; set /A KB=%?%
if exist KB && set /A freelen=%KB%-%devspace%
if exist freelen && raw cat --skip=%devspace% --length=%freelen% (md)%mdbase%+1 | set /a freeKB=
endlocal && set fatdev=%fatdev% && set freeKB=%freeKB%
goto :eof
::
:deleteFILE
errorcheck off
if exist %FILE% && if %?_BOOT%==fat &; fat del %FILE% > nul |; if exist %FILE% && if not "%Q%"=="/Q" && echo Deleting '%FILE%' not possible && set result=0 && goto :eof ! if exist %FILE% && set result=0 && goto :eof
if exist %FILE% && if %?_BOOT%==fatlfn &; set result= && FATLFN.LLL del "%FILE%" &; if not %result%==1 &; if exist %FILE% && if not "%Q%"=="/Q" && echo -e Deleting$[0x00]"$[]'%FILE%'$[0x00]"$[]not possible && set result=0 && goto :eof ! if exist %FILE% && set result=0 && goto :eof
goto :eof
::
:deleteBK09
if %n%<=-1 && goto :eof
if %n%==0 && if not exist %DEVICE%%%PATH%%%NAME%.BK%n% && goto :eof
if "%V%"=="/V" && echo -e Wait for deleting non-contigues file$[0x00]"$[]%DEVICE%%%PATH%%%NAME%.BK%n%$[0x00]"
errorcheck off
if %?_BOOT%==fat &; fat del %DEVICE%%%PATH%%%NAME%.BK%n% > nul |; if exist %DEVICE%%%PATH%%%NAME%.BK%n% &; if not "%Q%"=="/Q" && echo Deleting '%DEVICE%%%PATH%%%NAME%.BK%n%' not possible ! set "Q=%Q%" &; set /a n=%n%-1 && goto :deleteBK09
if %?_BOOT%==fatlfn &; set result= && FATLFN.LLL del "%DEVICE%%%PATH%%%NAME%.BK%n%" &; if not %result%==1 &; if exist %DEVICE%%%PATH%%%NAME%.BK%n% &; if not "%Q%"=="/Q" && echo -e Deleting$[0x00]"$[]'%DEVICE%%%PATH%%%NAME%.BK%n%'$[0x00]"$[]not possible ! set "Q=%Q%" &; set /a n=%n%-1 && goto :deleteBK09
set /a n=%n%-1
goto :deleteBK09
#-------------------------------------------------------------
# SUBROUTINE: Generate arg32 Big-Endian from HEX Little-Endian
#-------------------------------------------------------------
:arg32BE
setlocal
set arg32=%arg32%
set larg32=%@retval%
if %larg32%==10 && set arg32=x%arg32:~-2,2%\x%arg32:~-4,2%\x%arg32:~-6,2%\x%arg32:~-8,2%
if %larg32%==9 && set arg32=x%arg32:~-2,2%\x%arg32:~-4,2%\x%arg32:~-6,2%\x0%arg32:~-7,1%
if %larg32%==8 && set arg32=x%arg32:~-2,2%\x%arg32:~-4,2%\x%arg32:~-6,2%\x00
if %larg32%==7 && set arg32=x%arg32:~-2,2%\x%arg32:~-4,2%\x0%arg32:~-5,1%\x00
if %larg32%==6 && set arg32=x%arg32:~-2,2%\x%arg32:~-4,2%\x00\x00
if %larg32%==5 && set arg32=x%arg32:~-2,2%\x0%arg32:~-3,1%\x00\x00
if %larg32%==4 && set arg32=x%arg32:~-2,2%\x00\x00\x00
if %larg32%==3 && set arg32=x0%arg32:~-1,1%\x00\x00\x00
endlocal && set arg32=%arg32%
goto :eof
#--------------------------------------------------------------------
# END of SUBROUTINE: Generate arg32 Big-Endian from HEX Little-Endian
#--------------------------------------------------------------------
:uuid
#-# Generate MS-DOS Volume Serial Number
setlocal
set date=%@date%
set /a year=%date:~0,4%
set /a month=%date:~5,2%
set /a day=%date:~8,2%
set time=%@time%
set /a hour=%time:~0,2%
set /a minute=%time:~3,2%
set /a second=%time:~6,2%
set /a minute=%time:~3,2%
set /a smallsec=
if not exist smallsec && set /a random=%@random% ! set /a random=%smallsec%
if %random%>=100 && set /A smallsec=%random% / 10
if %random%>=1000 && set /A smallsec=%random% / 100
if %random%>=10000 && set /A smallsec=%random% / 1000
set /A month=%date:~5,2% * 0x100
set /A second=%time:~6,2% * 0x100
set /A uuidlow=%month% + %day% + %second% + %smallsec%
set /a llow=%@retval%
set /A hour=%time:~0,2% * 0x100
set /A uuidhigh=%hour% + %minute% + %year%
set /a lhigh=%@retval%
if %lhigh%==6 && if %llow%==6 && set volumeid=x%uuidhigh:~4,2%\x%uuidhigh:~2,2%\x%uuidlow:~4,2%\x%uuidlow:~2,2%
if %lhigh%==6 && if %llow%==5 && set volumeid=x%uuidhigh:~4,2%\x%uuidhigh:~2,2%\x%uuidlow:~3,2%\x0%uuidlow:~2,1%
if %lhigh%==5 && if %llow%==6 && set volumeid=x%uuidhigh:~3,2%\x0%uuidhigh:~2,1%\x%uuidlow:~4,2%\x%uuidlow:~2,2%
if %lhigh%==5 && if %llow%==5 && set volumeid=x%uuidhigh:~3,2%\x0%uuidhigh:~2,1%\x%uuidlow:~3,2%\x0%uuidlow:~2,1%
endlocal && set volumeid=%volumeid%
goto :eof
::
:ddcopyback
setlocal
if "%~1"=="ASK" && set copy= &; if exist Y && set copy=Y ! set Y= &; call :Fn.4 &; set v0=%v% && set v= && set h= &; if not %copy%==Y && set /p /u "copy= Copy content of (rd) to %FILE%? N=No, Y=Yes > " && echo ! echo &; if not %copy:~0,1%==Y && echo Aborted by user, image still (partly) available on ram-disk && endlocal && set result=0 && goto :eof
if %copy:~0,1%==Y && call :Fn.4 &; set h= &; if %v0%==%v% && set /a v0=%v0%-1 ! set v0=%v0% &; call :Fn.5 0 %v0% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% && set v0=
if %copy:~0,1%==Y && call :checkramdiskandimage "%~1" &; if %result%==0 && endlocal && set result=0 && set "RAMDISK=%RAMDISK%" && goto :eof
set retry=0
set /a rdsize=*0x82D8&0xffffffff &; if %rdsize%<=7 &; if not "%Q%"=="/Q" && echo Size of (rd) is zero ! set "Q=%Q%" &; endlocal && set result=0 && goto :eof
raw cat --length=0 %FILE% > nul && set /a imgsize=*0x8290&0xffffffff ! set imgsize=0 &; if %imgsize%==0 &; if not "%Q%"=="/Q" && if exist %FILE% && echo -e Filesize of$[0x00]"$[]'%FILE%'$[0x00]"$[]is zero ! set "Q=%Q%" &; endlocal && set result=0 && goto :eof
if not exist rdbase && set /A rdbase=*0x82D0
if %rdbase%>=64m && if not exist @uefi &; set /A mdbuf=60m && set /A mdbuflen=4m
:loopddcopyback
errorcheck off
if %?_BOOT%==fat &; if %retry%>=3 &; if not "%Q%"=="/Q" && echo Abort: copy (rd)+1 to '%FILE%' failed, '%FILE%' will be deleted ! set "Q=%Q%" &; fat del %FILE% > nul && endlocal && set result=0 && goto :eof ! if not "%Q%"=="/Q" && echo Can not delete '%FILE%' && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
if %?_BOOT%==fatlfn &; if %retry%>=3 &; if not "%Q%"=="/Q" && echo -e Abort: copy (rd)+1 to$[0x00]"$[]'%FILE%'$[0x00]"$[]failed,$[0x00]"$[]%FILE%'$[0x00]"$[]will be deleted ! set "Q=%Q%" &; set result= && FATLFN.LLL del "%FILE%" &; if %result%==1 && endlocal && set result=0 && goto :eof ! if not "%Q%"=="/Q" && echo -e Can not delete$[0x00]"$[]'%FILE%'$[0x00]" && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
if not exist NULL &; call :Fn.4 &; set v0=%v% && set v= && set h= &; echo -n -e $[0x0F]Wait: dd copies Ram-disk (rd)+1 to$[0x00]"$[0x0F]'%FILE%'...$[0x00]" &; if %retry%>=1 && echo -e \x20retry: %retry% out of 2
if not %rdbase%>=64m && if exist %FILE% &; raw dd if=(rd)+1 of=%FILE% > nul || echo -e Retry dd-copy %disk% to$[0x00]"$[]'%FILE%'$[0x00]" && set /a retry=%retry%+1 && goto :loopddcopyback
if %rdbase%>=64m && if exist %FILE% && if exist @uefi &; raw dd if=(rd)+1 of=%FILE% > nul || echo -e Retry dd-copy %disk% to$[0x00]"$[]'%FILE%'$[0x00]" && set /a retry=%retry%+1 && goto :loopddcopyback
if %rdbase%>=64m && if exist %FILE% && if not exist @uefi &; raw dd if=(rd)+1 of=%FILE% buf=%mdbuf% buflen=%mdbuflen% > nul || echo -e Retry dd-copy %disk% to$[0x00]"$[]'%FILE%'$[0x00]" && set /a retry=%retry%+1 && goto :loopddcopyback
pause --wait=2
if not exist NULL && call :Fn.4 &; set h= && call :Fn.5 0 %v0% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0%
errorcheck off
if not exist NULL && if %rdsize%==%imgsize% && call :Fn.4 &; set v0=%v% && set v= && set h= &; echo -n -e $[0x0F]Wait: compare Ram-disk (rd)+1 to$[0x00]"$[0x0F]'%FILE%'...$[0x00]"
#DEBUG#if %rdsize%==%imgsize% &; cmp (rd)+1 %FILE% |; echo -e Abort: copy (rd)+1 to$[0x00]"$[]'%FILE%'$[0x00]"$[]failed && endlocal && set result=0 && goto :eof
if %?_BOOT%==fat &; if %rdsize%==%imgsize% &; cmp (rd)+1 %FILE% > nul |; if not exist NULL && call :Fn.5 0 %v0% && echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% && echo Abort: copy (rd)+1 to '%FILE%' failed, '%FILE%' will be deleted ! set "NULL=%NULL%" &; fat del %FILE% > nul && endlocal && set result=0 && goto :eof ! if not exist NULL && echo Can not delete '%FILE%' && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
if %?_BOOT%==fatlfn &; if %rdsize%==%imgsize% &; cmp (rd)+1 %FILE% > nul |; if not exist NULL && call :Fn.5 0 %v0% && echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0% && echo -e Abort: copy (rd)+1 to$[0x00]"$[]'%FILE%'$[0x00]"$[]failed,$[0x00]"$[]'%FILE%'$[0x00]"$[]will be deleted ! set "NULL=%NULL%" &; set result= && FATLFN.LLL del "%FILE%" &; if %result%==1 && endlocal && set result=0 && goto :eof ! if not exist NULL && echo -e Can not delete$[0x00]"$[]'%FILE%$[0x00]" && endlocal && set result=0 && goto :eof ! endlocal && set result=0 && goto :eof
if not exist NULL && if %rdsize%==%imgsize% && call :Fn.5 0 %v0% &; echo -e -n $[]                                                                              \x20 && call :Fn.5 0 %v0%
if not %rdsize%==%imgsize% &; if not exist %FILE% && echo -e Something went wrong,$[0x00]"$[]'%FILE%'$[0x00]"$[]does not exist anymore!%NULL% && endlocal && set result=0 && goto :eof
#MAYBE#crc32 (rd)+1 | set crc32rd=
#MAYBE#endlocal && set crc32rd=%crc32rd%
if not "%Q%"=="/Q" && echo -e $[]dd copied Ram-disk (rd)+1 to$[0x00]"$[]'%FILE%'$[0x00]" && set result=1 ! set result=1
endlocal && set result=%result% && set "RAMDISK=%RAMDISK%"
goto :eof
::
:checkramdiskandimage
#-# MAYBE different with/ without /COPY (gives argument "ASK")
#TODO#if "%~1"=="ASK" &&
setlocal
#MAYBE#if exist @uefi && if exist RAMDISK &; setlocal && %RAMDISK% &; endlocal && set disk=%disk% && set LOG=%LOG% && set crc32rd=%crc32rd%
if exist RAMDISK &; %RAMDISK% &; if not %imgsize%>=4k && endlocal && set result=0 && set RAMDISK= && set imgsize= && set rdbase= && set rdsize= && goto :eof ! if exist rdsize && set /a rdsect=%rdsize%>>9
if exist imgsize && if exist rdsize && if not %imgsize%>=%rdsize% && endlocal && set result=0 && set RAMDISK= && set imgsize= && set rdbase= && set rdsize= && goto :eof
if exist rdbase && if not %rdbase%>=64m && endlocal && set result=0 && set RAMDISK= && set imgsize= && set rdbase= && set rdsize= && goto :eof
if exist rdsize && if not %rdsize%>=4k && endlocal && set result=0 && set RAMDISK= && set imgsize= && set rdbase= && set rdsize= && goto :eof
set /A RDBASE0=*0x82D0&0xffffffffffffffff && set /A RDSIZE0=*0x82D8&0xffffffff &; if %RDBASE0%>=0x800 && if %RDSIZE0%>=4k &; if not %RDBASE0%==%rdbase0% if not %RDSIZE0%==%rdsize0% && set rdbase0=%RDBASE0% && set rdsize0=%RDSIZE0% && set "RAMDISK=set imgsize=%imgsize% && set rdbase=%rdbase% && set rdsize=%rdsize% && set disk=%disk% && set LOG=%LOG% && set rdbase0=%RDBASE0% && set rdsize0=%RDSIZE0%" && set RDBASE0= && set RDSIZE0= ! set RDBASE0= && set RDSIZE0=
#BAD#set "RAMDISK=set imgsize=%imgsize% && set rdbase=%rdbase% && set rdsize=%rdsize% && set disk=%disk% && set LOG=%LOG% && set rdbase0=%rdbase0% && set rdsize0=%rdsize0%"
map --rd-base=%rdbase% ;; if not %@retval%==1 && echo Abort: can not set Ram-disk base%NULL% && endlocal && set result=0 && goto :eof
map --rd-size=%rdsize% ;; if not %@retval%==1 && echo Abort: can not set Ram-disk size%NULL% && endlocal && set result=0 && goto :eof
#MAYBE#if exist crc32rd && crc32 (rd)+1 | set crc32RD= &; if not %crc32rd%==%crc32RD% && echo Abort: CRC32 of current ram-disk not equal to last one%NULL% && endlocal && set crc32rd= && set result=0 && goto :eof
#MAYBE#echo %0 crc32rd=%crc32rd% crc32RD=%crc32RD%
#MAYBE#set crc32rd= && set crc32RD=
if %disk:~1,2%==hd &; call :read 454 (rd)+1 &; set /a ptstart=%result%&0xffffffff &; if %ptstart%==0 &; if not "%Q%"=="/Q" && echo Bad MBR on (rd) I ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if %disk:~1,2%==hd &; call :read 458 (rd)+1 &; set /a ptlength=%result%&0xffffffff &; if %ptlength%==0 &; if not "%Q%"=="/Q" && echo Bad MBR on (rd) II ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if exist @uefi && if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" &; call :read 0x1C (rd)%ptstart%+1 &; set /a hiddsect=%result%&0xffffffff &; if %hiddsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd,0) ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if exist @uefi && if %disk:~1,2%==hd && if "%LOG%"=="/LOG" &; call :read 454 (rd)%ptstart%+1 &; set /a ptstart=%result%&0xffffffff+%ptstart% &; if %ptstart%==0 &; if not "%Q%"=="/Q" && echo Bad MBR on (rd) III ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if exist @uefi && if %disk:~1,2%==hd && if "%LOG%"=="/LOG" &; call :read 458 (rd)%ptstart%+1 &; set /a ptlength=%result%&0xffffffff &; if %ptlength%==0 &; if not "%Q%"=="/Q" && echo Bad MBR on (rd) IV ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if exist @uefi && if %disk:~1,2%==hd && if "%LOG%"=="/LOG" &; call :read 0x1C (rd)%ptstart%+1 &; set /a hiddsect=%result%&0xffffffff &; if %hiddsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd,4) ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if not exist @uefi && if %disk:~1,2%==hd && if not "%LOG%"=="/LOG" &; raw cat --hex --length=1 (rd,0)+1 > nul && call :read 0x1C (rd,0)+1 &; set /a hiddsect=%result%&0xffffffff &; if %hiddsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd,0) ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if not exist @uefi && if %disk:~1,2%==hd && if "%LOG%"=="/LOG" &; raw cat --hex --length=1 (rd,4)+1 > nul && call :read 0x1C (rd,4)+1 &; set /a hiddsect=%result%&0xffffffff &; if %hiddsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd,4) ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
#BAD#if not exist @uefi && if %disk:~1,2%==hd && raw cat --hex --length=1 (rd,0)+1 > nul && call :read 0x1C (rd,0)+1 &; set /a hiddsect=%result%&0xffffffff &; if %hiddsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd,0) ! set "Q=%Q%" &; endlocal && set result=0 && goto :eof
#BAD#if not exist @uefi && if %disk:~1,2%==hd && raw cat --hex --length=1 (rd,4)+1 > nul && call :read 0x1C (rd,4)+1 &; set /a hiddsect=%result%&0xffffffff &; if %hiddsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd,4) ! set "Q=%Q%" &; endlocal && set result=0 && goto :eof
if %disk:~1,2%==fd &; call :read 0x1C (rd)+1 &; set /a hiddsect=%result%&0xffffffff &; if not %hiddsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd) ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if %disk:~1,2%==fd &; call :read 0x13 (rd)+1 &; set /a totsect=%result%&0xffff &; if %totsect%==0 && call :read 0x20 (rd)+1 &; set /a totsect=%result%&0xffffffff &; if %totsect%==0 &; if not "%Q%"=="/Q" && echo Bad PBR on (rd) ! set "Q=%Q%" &; endlocal && set result=0 && set RAMDISK= && goto :eof
if %disk:~1,2%==hd && set /a totsect=%ptstart%+%ptlength%
#BAD>=2g?#set /a rdsize=*0x82D8&0xffffffff &; set /a rdsect=%rdsize%/0x200 &; if not %rdsize%>=8 && echo bad (rd) && endlocal && set result=0 && goto :eof
if exist %FILE% &; raw cat --length=0 %FILE% > nul &; if %imgsize%==%@retval% && endlocal && set result=1 && set "RAMDISK=%RAMDISK%" && goto :eof
call :makeimagefile "%FILE%" %imgsize% %contigu% %V% %Q%
endlocal && set result=1 && set rdbase0=%rdbase0% && set rdsize0=%rdsize0%
goto :eof
#=========================================================================
# Start of MAIN ROUTINES of :writembronrd #
#=========================================================================
:preparembr
if not exist cylinder && if not exist heads && if not exist sectrack && echo Abort: CHS-variables not (fully) defined in %0 && set result=0 && goto :eof
setlocal
if "%LOG%"=="/LOG" && set /a sectpart=-1 * %heads% * %sectrack% * 2 + %sectpart% ! set /a sectpart=-1 * %heads% * %sectrack% + %sectpart%
if %fattype:~0,5%==FAT12 &; if %sectpart%<=0xFFFF && set partid=0x01 ! set partid=0x06
if %fattype:~0,5%==FAT16 &; if %sectpart%<=0xFFFF && set partid=0x04 ! set partid=0x06
if %fattype:~0,5%==FAT32 && set partid=0x0B
if exist bootcode &; if not %bootcode%==DEF if not %bootcode%==MSDOS33 if not %bootcode%==MSDOS40 if not %bootcode%==MSDOS50 if not %bootcode%==MSDOS70 if not %bootcode%==FREEDOS if not %bootcode%==GRUB if not %bootcode%==REACTOS |; if %fattype:~0,5%==FAT12 && set bootcode=MSDOS33 ! if %fattype:~0,5%==FAT16 && set bootcode=MSDOS33 ! if %fattype:~0,5%==FAT32 && set bootcode=MSDOS71
#ORG#if exist bootcode &; if not %bootcode%==DEF if not %bootcode%==MSDOS33 if not %bootcode%==MSDOS40 if not %bootcode%==MSDOS50 if not %bootcode%==FREEDOS if not %bootcode%==GRUB if not %bootcode%==REACTOS |; if %fattype:~0,5%==FAT12 && set bootcode=MSDOS33 ! if %fattype:~0,5%==FAT16 && set bootcode=MSDOS33 ! if %fattype:~0,5%==FAT32 && set bootcode=MSDOS71
if exist bootcode &; if not %bootcode%==WIN8 if not %bootcode%==WIN10 |; set bootcode=WIN7
echo -n > (rd)0+2
call :writembronrd (rd) ID=%partid% C=%cylinder% H=%heads% S=%sectrack% %active% %readonly% %LOG% %Q% %V% BC=%bootcode%
endlocal && set result=%result% && set "BOOTCODE=%BOOTCODE%"
goto :eof
::
:writembronrd
setlocal && set * && set fattype=%fattype:~0,5% && set "NULL=%NULL%"
set "ARG1=%~1"
set device=%~d1
set "path=%~p1"
set "name=%~n1"
set "ext=%~x1"
set "file=%~f1"
if not "%ARG1:~0,1%"=="(" && echo Bad argument '%ARG1%', DISK|FILE must start with FULL disk/ partition && set result=0 && goto :eovmbr
if "%ARG1:~-1,1%"=="/" && echo Bad argument '%ARG1%', FILE must end with a file-name if contains a path && set result=0 && goto :eovmbr
call Fn.11 "%device%" "," && call Fn.11 "%ARG1%" "/" || echo echo Bad argument '%ARG1%', a partition can not be partitioned && set result=0 && goto :eovmbr
shift
:parseswitches
if not exist partitio &; if /i "%~1"=="P" && if not "%~2"=="" && set /a partitio=%~2 && shift && shift && goto :parseswitches
if not exist cylinder &; if /i "%~1"=="C" && if not "%~2"=="" && set /a cylinder=%~2 && shift && shift && goto :parseswitches
if not exist heads &; if /i "%~1"=="H" && if not "%~2"=="" && set /a heads=%~2 && shift && shift && goto :parseswitches
if not exist sectrack &; if /i "%~1"=="S" && if not "%~2"=="" && set /a sectrack=%~2 && shift && shift && goto :parseswitches
if not exist startsec &; if /i "%~1"=="Start" && if not "%~2"=="" && set /a startsec=%~2 && shift && shift && goto :parseswitches
if not exist partsect &; if /i "%~1"=="Length" && if not "%~2"=="" && set /a partsect=%~2 && shift && shift && goto :parseswitches
if not exist partid &; if /i "%~1"=="ID" && if not "%~2"=="" && set /A partid=%~2 && shift && shift && goto :parseswitches
if not exist active &; if /i "%~1"=="/A" && set active=0x80 && shift && goto :parseswitches
if not exist logical &; if /i "%~1"=="/LOG" && set logical=Y && shift && goto :parseswitches
if not exist Q &; if /i "%~1"=="/Q" && set "Q=/Q" && shift && goto :parseswitches
if not exist V &; if /i "%~1"=="/V" && set "V=/V" && shift && goto :parseswitches
if not exist MBRBcode &; if /i "%~1"=="BC" && if not "%~2"=="" && set /u MBRBcode=%~2 && shift && shift && goto :parseswitches
if not exist wipe &; if /i "%~1"=="/W" && set wipe=Y && shift && goto :parseswitches
if not exist unlock &; if /i "%~1"=="/U" && set unlock=Y && shift && goto :parseswitches
if not exist readonly &; if /i "%~1"=="/R" && set readonly=Y && shift && goto :parseswitches
if %partitio%>=1 && echo Primary partitions>=%partitio% currently unsupported && set result=0 && goto :eovmbr
if "%ARG1:~-1,1%"==")" && set FILE=%ARG1%%0+1 && set path= && set name= && set ext= && set file=
if exist file && set "FILE=%file%" && set path= && set name= && set ext=
#NOTGoodGRLDRbootcodeIn PBRonly!#if exist MBRBcode &; if "%MBRBcode%"=="GRLDR" && set MBRBcode=GRUB
if exist MBRBcode &; if not "%MBRBcode%"=="MSDOS71" && if not "%MBRBcode%"=="MSDOS33" && if not "%MBRBcode%"=="NT5" && if not "%MBRBcode%"=="VISTA" && if not "%MBRBcode%"=="WIN7" && if not "%MBRBcode%"=="GRUB" && if not "%MBRBcode%"=="ZERO" && echo Abort: Boot code %MBRBcode% not supported or not exist && set result=0 && goto :eovmbr
if exist MBRBcode &; if exist cylinder if exist heads if exist sectrack if exist partid |; if "%Q%"=="/Q" && set addMBC=Y ! set addMBC= &; if not %addMBC%==Y &; set /p /u "addMBC= Add Boot code %MBRBcode% to MBR on %FILE%? N=no, Y=yes > " && echo ! echo && set addMBC=N &; if not %addMBC:~0,1%==Y && echo Aborted by user && set result=0 && goto :eovmbr
if not %unlock%==Y && call :checkreadonly "%FILE%" &; if result%==0 && echo Abort: %FILE% is read-only (set at 0x400), use '/U' to unlock && set result=0 && goto :eovmbr
if %addMBC:~0,1%==Y && if %unlock%==Y && call :unlock0x400 "%FILE%" &; if %result%==0 && echo Abort: can not unlock MBR on %FILE% (at 0x400) && goto :eovmbr
if not "%V%"=="/V" &; if %addMBC:~0,1%==Y && call :writembrbootcode "%MBRBcode%" &; if %result%==1 && set "BOOTCODE=MBR boot code: %MBRBcode%" && if not %readonly%==Y && goto :eovmbr ! if %result%==0 && echo Bad write of Boot code %MBRBcode% to MBR on %FILE% && goto :eovmbr
if "%V%"=="/V" &; if %addMBC:~0,1%==Y && call :writembrbootcode "%MBRBcode%" &; if %result%==1 && echo %MBRBcode% Boot code succesfully written to MBR on %FILE% && set "BOOTCODE=MBR boot code: %MBRBcode%" && if not %readonly%==Y && goto :eovmbr ! if %result%==0 && echo Bad write of Boot code %MBRBcode% to MBR on %FILE% && goto :eovmbr
if %addMBC:~0,1%==Y && if %readonly%==Y && call :setreadonly "%FILE%" &; if %result%==1 && echo MBR on %FILE% is set read-only (at 0x400) ! echo Can not set MBR to read-only (at 0x400) &; goto :eovmbr
if exist cylinder if exist heads if exist sectrack if exist partid || echo Missing or wrong argument(s) on command-line && set result=0 && goto :eovmbr
#BAD#if not exist cylinder if not exist heads if not exist sectrack if not exist startsec if not exist partsect if not exist partid && echo Missing argument on command-line && goto :eof
if not exist partitio && set partitio=0
if not exist active && set active=0x00
if not exist startsec &; if not %partitio%==0 && echo Start sector of partition %partitio% is missing && set result=0 && goto :eovmbr
call :getstartCHS
call :getendCHS
call :getLBA
set /a startsec=%startsec% &; set /a partsec=%partsec%
if "%V%"=="/V" &; echo Preview of MBR on primary partition %partitio% on %FILE%
if "%V%"=="/V" &; echo Total C/H/S=%cylinder%/%heads%/%sectrack%
if %cylinder%>=1026 && set endHD=254 && set endCYL=1023 && set endSPT=63 &; if %fattype:~0,5%==FAT32 && set partid=0xC ! if %fattype:~0,5%==FAT16 && set partid=0xE ! set result=0 && goto :eovmbr
#OKE:forFAT32#if %cylinder%>=1026 && set endHD=254 && set endCYL=1023 && set endSPT=63 && set partid=0xC
if "%V%"=="/V" &; if %logical%==Y && if %cylinder%<=1025 && echo Partition ID: 0x5 ! if %logical%==Y && if not %cylinder%<=1025 && echo Partition ID: 0xF ! echo Partition ID: %partid%
#ORG#if "%V%"=="/V" &; if %logical%==Y && echo Partition ID: 0x5 ! echo Partition ID: %partid%
if "%V%"=="/V" &; if %active%==0x80 && echo Active: Yes ! echo Active: No
if "%V%"=="/V" &; echo Begin CHS %startCYL%/%startHD%/%startSPT% End CHS %endCYL%/%endHD%/%endSPT% LBA Start=%startsec% Length=%partsec%
call :getMBRCHS
if "%V%"=="/V" &; setlocal &; if %logical%==Y && if %cylinder%<=1025 && set partid=0x5 ! if %logical%==Y && set partid=0xF ! set partid=%partid% &; call :MBRhexview &; endlocal
if %partitio%==0 && set base=446 ! if %partitio%==1 && set /a base=446+16 ! if %partitio%==2 && set /a base=446+32 ! if %partitio%==3 && set /a base=446+48
if "%V%"=="/V" &; set /p /u "writembr= Start writing MBR on %FILE%? N=no, Y=yes > " && echo ! echo && set writembr=N &; if not %writembr:~0,1%==Y && echo Aborted by user && set result=0 && goto :eovmbr
if %unlock%==Y && call :unlock0x400 "%FILE%" &; if %result%==0 && echo Abort: can not unlock MBR on %FILE% (at 0x400) && goto :eovmbr
#NONEED#if %wipe%==Y && call :wipesector "0" "%FILE%" &; if result%==0 && echo Abort: can not wipe first sector of %FILE% && set result=0 && goto :eovmbr
setlocal &; if %logical%==Y && if %cylinder%<=1025 && set partid=0x5 ! if %logical%==Y && set partid=0xF ! set partid=%partid% &; call :writembr &; if %result%==0 && echo Bad write of MBR/ partition %partitio% on %FILE% && endlocal && set result=0 && goto :eovmbr ! endlocal && set result=%result%
#ORG#setlocal &; if %logical%==Y && set partid=0x5 ! set partid=%partid% &; call :writembr &; if %result%==0 && echo Bad write of MBR/ partition %partitio% on %FILE% && endlocal && set result=0 && goto :eovmbr ! endlocal && set result=%result%
if "%V%"=="/V" && if exist MBRBcode &; set /p /u "writeMBC= Write MBR Boot code %MBRBcode% on %FILE%? N=no, Y=yes > " && echo ! echo && set writeMBC=N &; if not %writeMBC:~0,1%==Y && echo Aborted by user && set result=0 && goto :eovmbr
if not "%V%"=="/V" && if exist MBRBcode &; call :writembrbootcode "%MBRBcode%" &; if %result%==1 && set "BOOTCODE=MBR boot code: %MBRBcode%" ! if %result%==0 && if not "%Q%"=="/Q" && echo Bad write of Boot code %MBRBcode% to MBR on %FILE% && goto :eovmbr ! if not exist result && goto :eovmbr ! goto :eovmbr
if "%V%"=="/V" && if exist MBRBcode &; call :writembrbootcode "%MBRBcode%" &; if %result%==1 && echo %MBRBcode% Boot code succesfully written to MBR on %FILE% && set "BOOTCODE=MBR boot code: %MBRBcode%" ! if %result%==0 && echo Bad write of Boot code %MBRBcode% to MBR on %FILE% && goto :eovmbr ! if not exist result && goto :eovmbr
if %logical%==Y && call :getlogical &; if %result%==0 && echo Bad write of logical partition && goto :eovmbr
if "%V%"=="/V" &; if %logical%==Y && if %partitio%==0 &; set /p /u "writeebr= Start writing? N=no, Y=yes > " && echo ! echo && set writeebr=N &; if not %writeebr:~0,1%==Y && echo Aborted by user && set result=0 && goto :eovmbr
#NONEED#if %logical%==Y && if %wipe%==Y && set /a address=%startsec% * 512 &; call :wipesector "%address%" "%FILE%" &; if result%==0 && echo Abort: can not wipe first sector of %FILE% from address %base% && set result=0 && goto :eovmbr
#BAD#if %logical%==Y && if %wipe%==Y && call :wipesector "%base%" "%FILE%" &; if result%==0 && echo Abort: can not wipe first sector of %FILE% from address %base% && set result=0 && goto :eovmbr
## Y(ES) needed FOR one LOGICAL partition
if %logical%==Y && if "%V%"=="/V" && if exist MBRBcode && set writeMBC= && setlocal && set /a sectors=%sectors%-1 &; set FILE=%ARG1%%%sectors%+1 &; set /p /u "writeMBC= Write MBR Boot code %MBRBcode% to EBR on %FILE%? N=no, Y=yes > " && echo ! echo && set writeMBC=N &; endlocal && set writeMBC=%writeMBC%
if %logical%==Y && if exist MBRBcode && if not "%V%"=="/V" &; setlocal && set /a sectors=%sectors%-1 &; set FILE=%ARG1%%%sectors%+1 && call :writembrbootcode "%MBRBcode%" &; if %result%==1 && endlocal && set "BOOTCODE=MBR+EBR boot code: %MBRBcode%" ! if %result%==0 && if not "%Q%"=="/Q" && echo Bad write of Boot code %MBRBcode% to EBR on %FILE% && endlocal && set result=0 && set BOOTCODE= && goto :eovmbr ! if "%Q%"=="/Q" && endlocal && set BOOTCODE=
if %logical%==Y && if exist MBRBcode && if "%V%"=="/V" &; setlocal && set /a sectors=%sectors%-1 &; set FILE=%ARG1%%%sectors%+1 && call :writembrbootcode "%MBRBcode%" &; if %result%==1 && echo %MBRBcode% Boot code succesfully written to EBR on %FILE% && endlocal && set "BOOTCODE=MBR+EBR boot code: %MBRBcode%" ! if %result%==0 && echo Bad write of Boot code %MBRBcode% to EBR on %FILE% && endlocal && set result=0 && set BOOTCODE= && goto :eovmbr ! endlocal && set BOOTCODE=
if %logical%==Y && if %partitio%==0 && setlocal && call :writembr &; if %result%==0 && echo Bad write of EBR in extended partition %partitio% on %FILE% && endlocal && set result=0 && goto :eovmbr ! endlocal && set result=%result%
if %readonly%==Y && call :setreadonly "%FILE%" &; if %result%==1 && echo MBR on %FILE% is set read-only (at 0x400) ! echo Can not set MBR to read-only (at 0x400) && goto :eovmbr
if not %result%==0 && set result=1
:eovmbr
endlocal && set result=%result% && set "BOOTCODE=%BOOTCODE%"
goto :eof
#=========================================================================
# Start of SUB-ROUTINES of :writembronrd #
#=========================================================================
:checkreadonly
setlocal && set * && set "NULL=%NULL%"
set "target=%~1"
raw cat --skip=0x400 --locate=\xA2\xA0\xD0\xEB\xE5\xB9\x33\x44\x87\xC0\x68\xB6\xB7\x26\x99\xC7 --length=16 %target% > nul && raw cat --skip=0x410 --locate=\x00\x00\x00\x00\x00\x00\x00\x10 --length=8 %target% > nul && set locked=Y
if %locked%==Y && if not "%Q%"=="/Q" &; set /p /u "unlock= MBR on %target% is read-only (at 0x400), unlock? N=No, Y=Yes > " && echo ! echo && set unlock=N &; if not %unlock:~0,1%==Y && echo Aborted by user && set result=0 && set unlock=
endlocal && set unlock=%unlock% && set result=%result%
goto :eof
::
:unlock0x400
setlocal && set *
set "target=%~1"
raw write --offset=0x400 %target% \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:getstartCHS
if %partitio%==0 &; if %logical%==Y && set startHD=0 ! set startHD=1
if %partitio%==0 &; set startSPT=1
if %partitio%==0 &; if %logical%==Y && set startCYL=1 ! set startCYL=0
goto :eof
::
:getendCHS
if %partitio%==0 &; set /a endHD=%heads%-1
if %partitio%==0 &; set /a endSPT=%sectrack%
if %partitio%==0 &; set /a endCYL=%cylinder%-2
goto :eof
::
:getLBA
if %partitio%==0 &; if %logical%==Y && set /a startsec=%sectrack% * %heads% ! set /a startsec=%sectrack%
if %partitio%==0 &; set /a partsec=%cylinder% - 1 * %heads% * %sectrack% - %startsec%
goto :eof
::
:getMBRCHS
if not %startCYL%<=0xFF && set /a startSPT=%startCYL%>>8<<6 + %startSPT% && set /a startCYL=%startCYL%&0xff && set /a endHD=%endHD%
if not %endCYL%<=0xFF && set /a endSPT=%endCYL%>>8<<6 + %endSPT% && set /a endCYL=%endCYL%&0xff && set /a endHD=%endHD%
#BAD?#if not %startCYL%<=0xFF && set /A startSPT=%startCYL%>>8<<6 + %startSPT% && set /A startCYL=%startCYL%&0xff && set /A endHD=%endHD%
#BAD?#if not %endCYL%<=0xFF && set /A endSPT=%endCYL%>>8<<6 + %endSPT% && set /A endCYL=%endCYL%&0xff && set /A endHD=%endHD%
#ORG#if not %startCYL%<=0xFF && set /A startSPT=%startCYL%>>8<<6 + %startSPT% && set /A startCYL=%startCYL%&0xff
#ORG#if not %endCYL%<=0xFF && set /A endSPT=%endCYL%>>8<<6 + %endSPT% && set /A endCYL=%endCYL%&0xff
#EARLIER#if %cylinder%>=1024 && set endHD=0xFE && set endCYL=0xFF && set endSPT=0xFF && set partid=0xC
goto :eof
::
:MBRhexview
if %partid%<=0xF && set partid=0x0%partid:~2%
set /A startCYL=%startCYL% &; if %startCYL%<=0xF && set startCYL=0x0%startCYL:~2%
set /A startHD=%startHD% &; if %startHD%<=0xF && set startHD=0x0%startHD:~2%
set /A startSPT=%startSPT% &; if %startSPT%<=0xF && set startSPT=0x0%startSPT:~2%
set /A endCYL=%endCYL% &; if %endCYL%<=0xF && set endCYL=0x0%endCYL:~2%
set /A endHD=%endHD% &; if %endHD%<=0xF && set endHD=0x0%endHD:~2%
set /A endSPT=%endSPT% &; if %endSPT%<=0xF && set endSPT=0x0%endSPT:~2%
set /A startsec=%startsec% && set /A partsec=%partsec%
set LEstart=00000000%startsec:~2% &; set LEstart=0x%LEstart:~-2,2%%%LEstart:~-4,2%%%LEstart:~-6,2%%%LEstart:~-8,2%
set LElength=00000000%partsec:~2% &; set LElength=0x%LElength:~-2,2%%%LElength:~-4,2%%%LElength:~-6,2%%%LElength:~-8,2%
echo Little Endian view of partition %partition% before writing:
if %partitio%==0 && echo 000001BE: %active:~2% %startHD:~2% %startSPT:~2% %startCYL:~2%  %partid:~2% %endHD:~2% %endSPT:~2% %endCYL:~2%  %LEstart:~2,2% %LEstart:~4,2% %LEstart:~6,2% %LEstart:~8,2%  %LElength:~2,2% %LElength:~4,2% %LElength:~6,2% %LElength:~8,2%
if %partitio%==1 && echo 000001CE: %active:~2% %startHD:~2% %startSPT:~2% %startCYL:~2%  %partid:~2% %endHD:~2% %endSPT:~2% %endCYL:~2%  %LEstart:~2,2% %LEstart:~4,2% %LEstart:~6,2% %LEstart:~8,2%  %LElength:~2,2% %LElength:~4,2% %LElength:~6,2% %LElength:~8,2%
if %partitio%==2 && echo 000001DE: %active:~2% %startHD:~2% %startSPT:~2% %startCYL:~2%  %partid:~2% %endHD:~2% %endSPT:~2% %endCYL:~2%  %LEstart:~2,2% %LEstart:~4,2% %LEstart:~6,2% %LEstart:~8,2%  %LElength:~2,2% %LElength:~4,2% %LElength:~6,2% %LElength:~8,2%
if %partitio%==3 && echo 000001EE: %active:~2% %startHD:~2% %startSPT:~2% %startCYL:~2%  %partid:~2% %endHD:~2% %endSPT:~2% %endCYL:~2%  %LEstart:~2,2% %LEstart:~4,2% %LEstart:~6,2% %LEstart:~8,2%  %LElength:~2,2% %LElength:~4,2% %LElength:~6,2% %LElength:~8,2%
echo BTW: always ONE test cylinder left-out
goto :eof
::
:writembr
set result=
set /A address=%base%+0 &; call :write --bytes=1 %address% %FILE% %active% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+1 &; call :write --bytes=1 %address% %FILE% %startHD% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+2 &; call :write --bytes=1 %address% %FILE% %startSPT% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+3 &; call :write --bytes=1 %address% %FILE% %startCYL% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+4 &; call :write --bytes=1 %address% %FILE% %partid% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+5 &; call :write --bytes=1 %address% %FILE% %endHD% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+6 &; call :write --bytes=1 %address% %FILE% %endSPT% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+7 &; call :write --bytes=1 %address% %FILE% %endCYL% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+8 &; call :write %address% %FILE% %startsec% &; if %result%==0 && echo BAD write on %address% && goto :eof
set /A address=%base%+12 &; call :write %address% %FILE% %partsec% &; if %result%==0 && echo BAD write on %address% && goto :eof
if not exist MBRBcode &; if %partitio%==0 && set /A address=%base%-446+510 ! if %partitio%==1 && set /A address=%base%-446-16+510 ! if %partitio%==2 && set /A address=%base%-446-32+510 ! if %partitio%==3 && set /A address=%base%-446-48+510 &; call :write --bytes=2 %address% %FILE% 0xAA55 &; if %result%==0 && echo BAD write on %address% && goto :eof
if "%V%"=="/V" &; echo Little Endian view of partition %partition% written to %FILE%:
if "%V%"=="/V" &; cat --hex --skip=%base% --length=16 %FILE%
goto :eof
::
:setreadonly
setlocal && set *
set "target=%~1"
raw write --offset=0x400 %target% \xA2\xA0\xD0\xEB\xE5\xB9\x33\x44\x87\xC0\x68\xB6\xB7\x26\x99\xC7\x00\x00\x00\x00\x00\x00\x00\x10 > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:getlogical
set /a base=%startsec% * 512 + %base%
if %partitio%==0 &; if "%ARG1:~-1,1%"==")" && set /a sectors=%startsec%+1 &; set FILE=%ARG1%%0+%sectors%
if %partitio%==0 &; set /a startHD=%startHD%+1 && set /a partsec=%partsec%-%sectrack% && set /a startsec=%sectrack%
if "%V%"=="/V" &; echo && echo Preview of EBR on extended partition %partitio% on %FILE%
if "%V%"=="/V" &; echo Total C/H/S=%cylinder%/%heads%/%sectrack%
if "%V%"=="/V" &; echo Partition ID: %partid%
if "%V%"=="/V" &; if %active%==0x80 && echo Active: Yes ! echo Active: No
if "%V%"=="/V" &; echo Begin CHS %startCYL%/%startHD%/%startSPT% End CHS %endCYL%/%endHD%/%endSPT% LBA Start=%startsec% Length=%partsec%
if "%V%"=="/V" &; setlocal && call :MBRhexview &; endlocal
goto :eof
::
:writembrbootcode
if "%~1"=="" && echo Error: in argument 'BC=bc' 'bc' (Boot code) not defined && set result= && goto :eof
#NOT WORKING#checkrange MSDOS71 calc %~1 || echo Error: Boot code '%~1' not supported && set result= && goto :eof
call :mbrbootcode%MBRBcode% "%FILE%"
goto :eof
::
:mbrbootcodeMSDOS71
setlocal && set *
set "target=%~1"
## LAST FOUR bytes different on LIMBO x86 (hd0) in MBR part (values instead of zeros!): \xEB\xB8\x00\x00\x80\x03\x05\x12
## MSDOS71-A
raw write %target% \x33\xC0\x8E\xD0\xBC\x00\x7C\xFB\x50\x07\x50\x1F\xFC\xBE\x1B\x7C\xBF\x1B\x06\x50\x57\xB9\xE5\x01\xF3\xA4\xCB\xBE\xBE\x07\xB1\x04\x38\x2C\x7C\x09\x75\x15\x83\xC6\x10\xE2\xF5\xCD\x18\x8B\x14\x8B\xEE\x83\xC6\x10\x49\x74\x16\x38\x2C\x74\xF6\xBE\x10\x07\x4E\xAC\x3C\x00\x74\xFA\xBB\x07\x00\xB4\x0E\xCD\x10\xEB\xF2\x89\x46\x25\x96\x8A\x46\x04\xB4\x06\x3C\x0E\x74\x11\xB4\x0B\x3C\x0C\x74\x05\x3A\xC4\x75\x2B\x40\xC6\x46\x25\x06\x75\x24\xBB\xAA\x55\x50\xB4\x41\xCD\x13\x58\x72\x16\x81\xFB\x55\xAA\x75\x10\xF6\xC1\x01\x74\x0B\x8A\xE0\x88\x56\x24\xC7\x06\xA1\x06\xEB\x1E\x88\x66\x04\xBF\x0A\x00\xB8\x01\x02\x8B\xDC\x33\xC9\x83\xFF\x05\x7F\x03\x8B\x4E\x25\x03\x4E\x02\xCD\x13\x72\x29\xBE\x46\x07\x81\x3E\xFE\x7D\x55\xAA\x74\x5A\x83\xEF\x05\x7F\xDA\x85\xF6\x75\x83\xBE\x27\x07\xEB\x8A\x98\x91\x52\x99\x03\x46\x08\x13\x56\x0A\xE8\x12\x00\x5A\xEB\xD5\x4F\x74\xE4\x33\xC0\xCD\x13\xEB\xB8\x00\x00\x00\x00\x00\x00\x56\x33\xF6\x56\x56\x52\x50\x06\x53\x51\xBE\x10\x00\x56\x8B\xF4\x50\x52\xB8\x00\x42\x8A\x56\x24\xCD\x13\x5A\x58\x8D\x64\x10\x72 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## START of partition information on LIMBO x86 (hd0): \x80\x01\x01\x00\x0B\x7F\xBF\x07\x3F\x00\x00\x00\xC1\xFB\x3F\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA
## MSDOS71-B
raw write --offset=256 %target% \x0A\x40\x75\x01\x42\x80\xC7\x02\xE2\xF7\xF8\x5E\xC3\xEB\x74\x49\x6E\x76\x61\x6C\x69\x64\x20\x70\x61\x72\x74\x69\x74\x69\x6F\x6E\x20\x74\x61\x62\x6C\x65\x00\x45\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8B\xFC\x1E\x57\x8B\xF5\xCB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul
## MSDOS71-B=DiskID+MBR-entries
#\x00\x00\x00\x00\x00\x00\x80\x01\x01\x00\x01\x0F\x3F\x1E\x3F\x00\x00\x00\xD1\x79\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA
if %@retval%>=1 && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
## NEW-WriteMysteryBytes
if not %result%==0 &; raw write --offset=220 %target% \x80\x%@time:~6,2%\x%@time:~3,2%\x%@time:~0,2% > nul
endlocal && set result=%result%
goto :eof
::
:mbrbootcodeMSDOS33
setlocal && set *
set "target=%~1"
## MSDOS33-A
raw write %target% \xFA\x33\xC0\x8E\xD0\xBC\x00\x7C\x8B\xF4\x50\x07\x50\x1F\xFB\xFC\xBF\x00\x06\xB9\x00\x01\xF2\xA5\xEA\x1D\x06\x00\x00\xBE\xBE\x07\xB3\x04\x80\x3C\x80\x74\x0E\x80\x3C\x00\x75\x1C\x83\xC6\x10\xFE\xCB\x75\xEF\xCD\x18\x8B\x14\x8B\x4C\x02\x8B\xEE\x83\xC6\x10\xFE\xCB\x74\x1A\x80\x3C\x00\x74\xF4\xBE\x8B\x06\xAC\x3C\x00\x74\x0B\x56\xBB\x07\x00\xB4\x0E\xCD\x10\x5E\xEB\xF0\xEB\xFE\xBF\x05\x00\xBB\x00\x7C\xB8\x01\x02\x57\xCD\x13\x5F\x73\x0C\x33\xC0\xCD\x13\x4F\x75\xED\xBE\xA3\x06\xEB\xD3\xBE\xC2\x06\xBF\xFE\x7D\x81\x3D\x55\xAA\x75\xC7\x8B\xF5\xEA\x00\x7C\x00\x00\x49\x6E\x76\x61\x6C\x69\x64\x20\x70\x61\x72\x74\x69\x74\x69\x6F\x6E\x20\x74\x61\x62\x6C\x65\x00\x45\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## MSDOS33-B
raw write --offset=256 %target% \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0
## MSDOS33-B=DiskID+MBR-entries
#\x00\x00\x00\x00\x00\x00\x80\x01\x01\x00\x01\x0F\x3F\x1E\x3F\x00\x00\x00\xD1\x79\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:mbrbootcodeNT5
setlocal && set *
set "target=%~1"
## NT5-A
raw write %target% \x33\xC0\x8E\xD0\xBC\x00\x7C\xFB\x50\x07\x50\x1F\xFC\xBE\x1B\x7C\xBF\x1B\x06\x50\x57\xB9\xE5\x01\xF3\xA4\xCB\xBD\xBE\x07\xB1\x04\x38\x6E\x00\x7C\x09\x75\x13\x83\xC5\x10\xE2\xF4\xCD\x18\x8B\xF5\x83\xC6\x10\x49\x74\x19\x38\x2C\x74\xF6\xA0\xB5\x07\xB4\x07\x8B\xF0\xAC\x3C\x00\x74\xFC\xBB\x07\x00\xB4\x0E\xCD\x10\xEB\xF2\x88\x4E\x10\xE8\x46\x00\x73\x2A\xFE\x46\x10\x80\x7E\x04\x0B\x74\x0B\x80\x7E\x04\x0C\x74\x05\xA0\xB6\x07\x75\xD2\x80\x46\x02\x06\x83\x46\x08\x06\x83\x56\x0A\x00\xE8\x21\x00\x73\x05\xA0\xB6\x07\xEB\xBC\x81\x3E\xFE\x7D\x55\xAA\x74\x0B\x80\x7E\x10\x00\x74\xC8\xA0\xB7\x07\xEB\xA9\x8B\xFC\x1E\x57\x8B\xF5\xCB\xBF\x05\x00\x8A\x56\x00\xB4\x08\xCD\x13\x72\x23\x8A\xC1\x24\x3F\x98\x8A\xDE\x8A\xFC\x43\xF7\xE3\x8B\xD1\x86\xD6\xB1\x06\xD2\xEE\x42\xF7\xE2\x39\x56\x0A\x77\x23\x72\x05\x39\x46\x08\x73\x1C\xB8\x01\x02\xBB\x00\x7C\x8B\x4E\x02\x8B\x56\x00\xCD\x13\x73\x51\x4F\x74\x4E\x32\xE4\x8A\x56\x00\xCD\x13\xEB\xE4\x8A\x56\x00\x60\xBB\xAA\x55\xB4\x41\xCD\x13\x72\x36\x81\xFB\x55\xAA\x75\x30\xF6\xC1\x01\x74\x2B\x61\x60 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## NT5-B
raw write --offset=256 %target% \x6A\x00\x6A\x00\xFF\x76\x0A\xFF\x76\x08\x6A\x00\x68\x00\x7C\x6A\x01\x6A\x10\xB4\x42\x8B\xF4\xCD\x13\x61\x61\x73\x0E\x4F\x74\x0B\x32\xE4\x8A\x56\x00\xCD\x13\xEB\xD6\x61\xF9\xC3\x49\x6E\x76\x61\x6C\x69\x64\x20\x70\x61\x72\x74\x69\x74\x69\x6F\x6E\x20\x74\x61\x62\x6C\x65\x00\x45\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x2C\x44\x63 > nul
## NT5-B=DiskID+MBR-entries
#\x89\x34\x8A\x34\x00\x00\x80\x01\x01\x00\x0B\x3F\xBF\x13\x3F\x00\x00\x00\xC1\xBA\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA
if %@retval%>=1 && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:mbrbootcodeVISTA
setlocal && set *
set "target=%~1"
## VISTA-A
raw write %target% \x33\xC0\x8E\xD0\xBC\x00\x7C\x8E\xC0\x8E\xD8\xBE\x00\x7C\xBF\x00\x06\xB9\x00\x02\xFC\xF3\xA4\x50\x68\x1C\x06\xCB\xFB\xB9\x04\x00\xBD\xBE\x07\x80\x7E\x00\x00\x7C\x0B\x0F\x85\x10\x01\x83\xC5\x10\xE2\xF1\xCD\x18\x88\x56\x00\x55\xC6\x46\x11\x05\xC6\x46\x10\x00\xB4\x41\xBB\xAA\x55\xCD\x13\x5D\x72\x0F\x81\xFB\x55\xAA\x75\x09\xF7\xC1\x01\x00\x74\x03\xFE\x46\x10\x66\x60\x80\x7E\x10\x00\x74\x26\x66\x68\x00\x00\x00\x00\x66\xFF\x76\x08\x68\x00\x00\x68\x00\x7C\x68\x01\x00\x68\x10\x00\xB4\x42\x8A\x56\x00\x8B\xF4\xCD\x13\x9F\x83\xC4\x10\x9E\xEB\x14\xB8\x01\x02\xBB\x00\x7C\x8A\x56\x00\x8A\x76\x01\x8A\x4E\x02\x8A\x6E\x03\xCD\x13\x66\x61\x73\x1E\xFE\x4E\x11\x0F\x85\x0C\x00\x80\x7E\x00\x80\x0F\x84\x8A\x00\xB2\x80\xEB\x82\x55\x32\xE4\x8A\x56\x00\xCD\x13\x5D\xEB\x9C\x81\x3E\xFE\x7D\x55\xAA\x75\x6E\xFF\x76\x00\xE8\x8A\x00\x0F\x85\x15\x00\xB0\xD1\xE6\x64\xE8\x7F\x00\xB0\xDF\xE6\x60\xE8\x78\x00\xB0\xFF\xE6\x64\xE8\x71\x00\xB8\x00\xBB\xCD\x1A\x66\x23\xC0\x75\x3B\x66\x81\xFB\x54\x43\x50\x41\x75\x32\x81\xF9\x02\x01\x72\x2C\x66\x68\x07 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## VISTA-B
raw write --offset=256 %target% \xBB\x00\x00\x66\x68\x00\x02\x00\x00\x66\x68\x08\x00\x00\x00\x66\x53\x66\x53\x66\x55\x66\x68\x00\x00\x00\x00\x66\x68\x00\x7C\x00\x00\x66\x61\x68\x00\x00\x07\xCD\x1A\x5A\x32\xF6\xEA\x00\x7C\x00\x00\xCD\x18\xA0\xB7\x07\xEB\x08\xA0\xB6\x07\xEB\x03\xA0\xB5\x07\x32\xE4\x05\x00\x07\x8B\xF0\xAC\x3C\x00\x74\xFC\xBB\x07\x00\xB4\x0E\xCD\x10\xEB\xF2\x2B\xC9\xE4\x64\xEB\x00\x24\x02\xE0\xF8\x24\x02\xC3\x49\x6E\x76\x61\x6C\x69\x64\x20\x70\x61\x72\x74\x69\x74\x69\x6F\x6E\x20\x74\x61\x62\x6C\x65\x00\x45\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x00\x00\x00\x62\x7A\x99 > nul
## VISTA-B=DiskID+MBR-entries
#\xFC\x79\x85\x94\x00\x00\x80\x20\x21\x00\x07\xFE\xFF\xFF\x00\x08\x00\x00\x00\xF0\xFF\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA
if %@retval%>=1 && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:mbrbootcodeWIN7
#-# Identical to https://thestarman.pcministry.com/asm/mbr/W7MBR.htm
setlocal && set *
set "target=%~1"
## WIN7-A
raw write %target% \x33\xC0\x8E\xD0\xBC\x00\x7C\x8E\xC0\x8E\xD8\xBE\x00\x7C\xBF\x00\x06\xB9\x00\x02\xFC\xF3\xA4\x50\x68\x1C\x06\xCB\xFB\xB9\x04\x00\xBD\xBE\x07\x80\x7E\x00\x00\x7C\x0B\x0F\x85\x0E\x01\x83\xC5\x10\xE2\xF1\xCD\x18\x88\x56\x00\x55\xC6\x46\x11\x05\xC6\x46\x10\x00\xB4\x41\xBB\xAA\x55\xCD\x13\x5D\x72\x0F\x81\xFB\x55\xAA\x75\x09\xF7\xC1\x01\x00\x74\x03\xFE\x46\x10\x66\x60\x80\x7E\x10\x00\x74\x26\x66\x68\x00\x00\x00\x00\x66\xFF\x76\x08\x68\x00\x00\x68\x00\x7C\x68\x01\x00\x68\x10\x00\xB4\x42\x8A\x56\x00\x8B\xF4\xCD\x13\x9F\x83\xC4\x10\x9E\xEB\x14\xB8\x01\x02\xBB\x00\x7C\x8A\x56\x00\x8A\x76\x01\x8A\x4E\x02\x8A\x6E\x03\xCD\x13\x66\x61\x73\x1C\xFE\x4E\x11\x75\x0C\x80\x7E\x00\x80\x0F\x84\x8A\x00\xB2\x80\xEB\x84\x55\x32\xE4\x8A\x56\x00\xCD\x13\x5D\xEB\x9E\x81\x3E\xFE\x7D\x55\xAA\x75\x6E\xFF\x76\x00\xE8\x8D\x00\x75\x17\xFA\xB0\xD1\xE6\x64\xE8\x83\x00\xB0\xDF\xE6\x60\xE8\x7C\x00\xB0\xFF\xE6\x64\xE8\x75\x00\xFB\xB8\x00\xBB\xCD\x1A\x66\x23\xC0\x75\x3B\x66\x81\xFB\x54\x43\x50\x41\x75\x32\x81\xF9\x02\x01\x72\x2C\x66\x68\x07\xBB\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## WIN7-B
raw write --offset=256 %target% \x00\x66\x68\x00\x02\x00\x00\x66\x68\x08\x00\x00\x00\x66\x53\x66\x53\x66\x55\x66\x68\x00\x00\x00\x00\x66\x68\x00\x7C\x00\x00\x66\x61\x68\x00\x00\x07\xCD\x1A\x5A\x32\xF6\xEA\x00\x7C\x00\x00\xCD\x18\xA0\xB7\x07\xEB\x08\xA0\xB6\x07\xEB\x03\xA0\xB5\x07\x32\xE4\x05\x00\x07\x8B\xF0\xAC\x3C\x00\x74\x09\xBB\x07\x00\xB4\x0E\xCD\x10\xEB\xF2\xF4\xEB\xFD\x2B\xC9\xE4\x64\xEB\x00\x24\x02\xE0\xF8\x24\x02\xC3\x49\x6E\x76\x61\x6C\x69\x64\x20\x70\x61\x72\x74\x69\x74\x69\x6F\x6E\x20\x74\x61\x62\x6C\x65\x00\x45\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x00\x00\x63\x7B\x9A > nul
## WINPE-B=DiskID+MBR-entries
if %@retval%>=1 && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
#MAYBELATER#:mbrbootcodeWINPE
setlocal && set *
set "target=%~1"
## WINPE-A
raw write %target% \x33\xC0\x8E\xD0\xBC\x00\x7C\x8E\xC0\x8E\xD8\xBE\x00\x7C\xBF\x00\x06\xB9\x00\x02\xFC\xF3\xA4\x50\x68\x1C\x06\xCB\xFB\xB9\x04\x00\xBD\xBE\x07\x80\x7E\x00\x00\x7C\x0B\x0F\x85\x0E\x01\x83\xC5\x10\xE2\xF1\xCD\x18\x88\x56\x00\x55\xC6\x46\x11\x05\xC6\x46\x10\x00\xB4\x41\xBB\xAA\x55\xCD\x13\x5D\x72\x0F\x81\xFB\x55\xAA\x75\x09\xF7\xC1\x01\x00\x74\x03\xFE\x46\x10\x66\x60\x80\x7E\x10\x00\x74\x26\x66\x68\x00\x00\x00\x00\x66\xFF\x76\x08\x68\x00\x00\x68\x00\x7C\x68\x01\x00\x68\x10\x00\xB4\x42\x8A\x56\x00\x8B\xF4\xCD\x13\x9F\x83\xC4\x10\x9E\xEB\x14\xB8\x01\x02\xBB\x00\x7C\x8A\x56\x00\x8A\x76\x01\x8A\x4E\x02\x8A\x6E\x03\xCD\x13\x66\x61\x73\x1C\xFE\x4E\x11\x75\x0C\x80\x7E\x00\x80\x0F\x84\x8A\x00\xB2\x80\xEB\x84\x55\x32\xE4\x8A\x56\x00\xCD\x13\x5D\xEB\x9E\x81\x3E\xFE\x7D\x55\xAA\x75\x6E\xFF\x76\x00\xE8\x8D\x00\x75\x17\xFA\xB0\xD1\xE6\x64\xE8\x83\x00\xB0\xDF\xE6\x60\xE8\x7C\x00\xB0\xFF\xE6\x64\xE8\x75\x00\xFB\xB8\x00\xBB\xCD\x1A\x66\x23\xC0\x75\x3B\x66\x81\xFB\x54\x43\x50\x41\x75\x32\x81\xF9\x02\x01\x72\x2C\x66\x68\x07\xBB\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## WINPE-B
raw write --offset=256 %target% \x00\x66\x68\x00\x02\x00\x00\x66\x68\x08\x00\x00\x00\x66\x53\x66\x53\x66\x55\x66\x68\x00\x00\x00\x00\x66\x68\x00\x7C\x00\x00\x66\x61\x68\x00\x00\x07\xCD\x1A\x5A\x32\xF6\xEA\x00\x7C\x00\x00\xCD\x18\xA0\xB7\x07\xEB\x08\xA0\xB6\x07\xEB\x03\xA0\xB5\x07\x32\xE4\x05\x00\x07\x8B\xF0\xAC\x3C\x00\x74\x09\xBB\x07\x00\xB4\x0E\xCD\x10\xEB\xF2\xF4\xEB\xFD\x2B\xC9\xE4\x64\xEB\x00\x24\x02\xE0\xF8\x24\x02\xC3\x49\x6E\x76\x61\x6C\x69\x64\x20\x70\x61\x72\x74\x69\x74\x69\x6F\x6E\x20\x74\x61\x62\x6C\x65\x00\x45\x72\x72\x6F\x72\x20\x6C\x6F\x61\x64\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x4D\x69\x73\x73\x69\x6E\x67\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x00\x00\x00\x63\x7B\x9A > nul
## WINPE-B=DiskID+MBR-entries
#......
if %@retval%>=1 && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
#NOT_USED_STANDARD_MBRs_instead#:mbrbootcodeGRUB
## Boot code only 423 bytes?
setlocal && set *
set "target=%~1"
## GRUB-A
raw write %target% \xEB\x5E\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x20\x39\xFF\xFF\x31\xDB\x8E\xD3\xBC\x80\x05\xE8\x00\x00\x5B\x81\xEB\x6A\x00\xC1\xEB\x04\x8C\xC8\x01\xC3\x53\x68\x7B\x00\xCB\x68\x00\x20\x17\xBC\x00\x90\x80\xFA\x00\x74\x02\xB2\x80\x16\x07\xB0\x10\x30\xF6\x31\xDB\xE8\xC2\x00\x72\x29\x0E\x1F\x31\xF6\x31\xFF\xB9\xDF\x00\xFC\xF3\xA5\xBB\xFC\x1F\x66\xB8\x47\x52\x55\xAA\x66\x39\x07\x75\x03\xE8\x98\x19\xEA\xB8\x00\x00\x20\x16\x1F\x66\x39\x07\x74\x1F\x80\xF2\x80\x68\xC0\x07\x07\xB0\x10\x30\xF6\x31\xDB\xE8\x87\x00\x72\x05\xEA\x00\x00\xC0\x07\xBE\x92\x01\xE8\xAF\x00\xEB\xFE\xBE\xBE\x01\xE8\x04\x10\xF6\x06\xA4\x01\x80\x0F\x84\x6C\x19\x83\xC6\x0C\x81\xFE\xFE\x01\x72\xEB\x77\x2D\xF6\x06\xA7\x01\x01\x0F\x85\x1E > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## GRUB-B=167 bytes?!
raw write --offset=256 %target% \x17\x80\x0E\xA7\x01\x01\xF6\x06\xA7\x01\x02\x75\xD4\x68\x00\x0D\x07\xB0\x04\x31\xD2\x31\xDB\xE8\x3C\x00\x73\xC2\xBE\xAD\x1C\xE8\x69\x00\xE9\xFA\x16\xF6\x06\xA7\x01\x01\x0F\x85\xF1\x16\x80\x0E\xA7\x01\x01\xE9\xD2\x16\x1E\x06\x52\x56\x57\x55\xF9\xCD\x13\x5D\x5F\x5E\x5A\x07\x1F\xC3\xFA\xB8\x00\x20\x8E\xD0\xBC\xDC\x8F\xFB\x66\x61\x07\x1F\xEB\x97\xB4\x02\xBF\x03\x00\xB9\x01\x00\x60\x50\x53\x51\xFE\xC8\x00\xC1\xD0\xE0\x00\xC7\xB0\x01\xE8\xC7\xFF\x59\x5B\x58\x72\x04\xFE\xC8\x75\xE7\x61\x73\x0B\x60\x31\xC0\xE8\xB5\xFF\x61\x4F\x75\xD9\xF9\xC3\xB4\x0E\xCD\x10\x2E\xAC\x3C\x00\x75\xF6\xC3\x0D\x0A\x4D\x69\x73\x73\x69\x6E\x67\x20\x68\x65\x6C\x70\x65\x72\x2E\x00\x00\x3F\xFF > nul
## GRUB-B=...
if %@retval%>=1 && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:mbrbootcodeZERO
#-# TOTAL 440 bytes zeroing!
setlocal && set *
set "target=%~1"
## ZERO-A
raw write %target% \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
## ZERO-B
raw write --offset=256 %target% \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=510 %target% \x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
#==================================================================================
# End of SUB-ROUTINES of :writembronrd ; start of SUB-ROUTINES of :writepbrbootcode #
#==================================================================================
:writepbrbootcode
setlocal
#DEBUG#pause %0 disk=%disk% fattype=%fattype% bootcode=%bootcode%
if %bootcode%==MSDOS70 &; set bootcode=MSWIN40
if %bootcode%==MSDOS71 &; if %fattype:~0,5%==FAT32 && set bootcode=MSDOS71 ! set bootcode=MSWIN41
if %bootcode%==GRUB &; if %fattype:~0,5%==FAT32 && set bootcode=GRLDR71 ! set bootcode=GRLDR40
if %bootcode%==FREEDOS &; if %fattype:~0,5%==FAT32 && set bootcode=FREEDOS71 ! set bootcode=FREEDOS51
if %bootcode%==NT5 &; if %fattype:~0,5%==FAT32 && set bootcode=NT5FAT32 ! set bootcode=NT5FAT
if %bootcode%==VISTA &; if %fattype:~0,5%==FAT32 && set bootcode=VISTAFAT32 ! set bootcode=VISTAFAT
if %bootcode%==WIN7 &; if %fattype:~0,5%==FAT32 && set bootcode=WIN7FAT32 ! set bootcode=VISTAFAT
if %bootcode%==WIN8 &; if %fattype:~0,5%==FAT32 && set bootcode=WIN10FAT32 ! set bootcode=VISTAFAT
if %bootcode%==WIN10 &; if %fattype:~0,5%==FAT32 && set bootcode=WIN10FAT32 ! set bootcode=WIN10FAT
if %bootcode%==REACTOS &; if %fattype:~0,5%==FAT32 && set bootcode=REACTOSFAT32 ! set bootcode=REACTOSFAT
if %bootcode%==DEF &; if %fattype:~0,5%==FAT32 && set bootcode=MSDOS71 ! if %disk:~1,2%==hd && set bootcode=MSWIN41 ! if %disk:~1,2%==fd && set bootcode=MSWIN40
#ORG#if %bootcode%==DEF &; if %fattype:~0,5%==FAT32 && set bootcode=MSDOS71 ! set bootcode=MSWIN41
if "%V%"=="/V" && set choice= &; set /p /u "choice= Write %bootcode% Boot code to PBR on (rd)%ptstart%+1? N=no Y=yes > " && echo ! echo && set choice=N &; if not %choice:~0,1%==Y && echo No bootcode written to PBR && endlocal && set bootcode= && goto :eof
if exist ptstart && call :pbrbootcode%bootcode% "(rd)%ptstart%" ! echo Abort: Variable 'ptstart' does not exist (anymore) && endlocal && set result=0 && goto :eof
#NONEED#if not "%Q%"=="/Q" &; if %result%==1 && echo %bootcode% Boot code succesfully written to PBR on (rd)%ptstart%+1 && set "BOOTCODE=%BOOTCODE%PBR boot code: %bootcode%" ! echo Failed to write %bootcode% Boot code to PBR
if not "%V%"=="/V" &; if not %result%==1 && echo Failed to write %bootcode% Boot code to PBR
if "%V%"=="/V" &; if %result%==1 && echo %bootcode% Boot code succesfully written to PBR on (rd)%ptstart%+1 ! echo Failed to write %bootcode% Boot code to PBR
endlocal && set result=%result% && set bootcode=%bootcode%
goto :eof
::
:pbrbootcodeMSDOS33
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSDOS3.3 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \x16\x07\xBB\x78\x00\x36\xC5\x37\x1E\x56\x16\x53\xBF\x2B\x7C\xB9\x0B\x00\xFC\xAC\x26\x80\x3D\x00\x74\x03\x26\x8A\x05\xAA\x8A\xC4\xE2\xF1\x06\x1F\x89\x47\x02\xC7\x07\x2B\x7C\xFB\x8A\x16\xFD\x7D\xCD\x13\x73\x03\xE9\x80\x00\xF6\x06\x24\x7C\x20\x74\x05\xC6\x06\x90\x04\x54\xA0\x10\x7C\x98\xF7\x26\x16\x7C\x03\x06\x0E\x7C\xA3\x3F\x7C\xA3\x37\x7C\xB8\x20\x00\xF7\x26\x11\x7C\x8B\x1E\x0B\x7C\x03\xC3\x48\xF7\xF3\x03\x06\x37\x7C\xA3\x3D\x7C\xE8\xCB\x00\xA3\x37\x7C\xA1\x3F\x7C\xE8\xC2\x00\xA3\x3F\x7C\xBB\x00\x05\xA1\x3F\x7C\xE8\x73\x00\xB0\x01\xE8\x88\x00\x72\x19\x8B\xFB\xB9\x0B\x00\xBE\xE0\x7D\xF3\xA6\x75\x0D\x8D\x7F\x20\xBE\xEB\x7D\xB9\x0B\x00\xF3\xA6\x74\x18\xBE\x87\x7D\xE8\x40\x00\x32\xE4\xCD\x16\x5E\x1F\x8F\x04\x8F\x44\x02\xCD\x19\xBE\xCF\x7D\xEB\xEB\xB9\x02\x00\xBB\x00\x07\xA1\x37\x7C\xE8\x2F\x00\xB0\x01\xE8\x44\x00\x72\xE8\xFF\x06\x37\x7C\x81\xC3\x00\x02\xE2\xE9\x8A\x2E\x15\x7C\x8A\x16\xFD\x7D\x8B\x1E\x3D\x7C\xEA\x00\x00\x70\x00\xAC\x0A\xC0\x74\x21\xB4\x0E\xB3\xFF\xCD\x10\xEB\xF3\x33\xD2\xF7\x36\x18\x7C\xFE\xC2\x88 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \x16\x3B\x7C\x33\xD2\xF7\x36\x1A\x7C\x88\x16\x2A\x7C\xA3\x39\x7C\xC3\x51\xB4\x02\x8B\x16\x39\x7C\x03\x16\x1E\x7C\x8A\xEA\xD0\xCE\xD0\xCE\x80\xE6\xC0\x8A\x0E\x3B\x7C\x80\xE1\x3F\x0A\xCE\x8A\x36\x2A\x7C\x8A\x16\xFD\x7D\xCD\x13\x59\xC3\x8B\x16\x0B\x7C\xB1\x09\xD3\xEA\xF7\xE2\x03\x06\x1C\x7C\xC3\x0D\x0A\x4E\x6F\x6E\x2D\x53\x79\x73\x74\x65\x6D\x20\x64\x69\x73\x6B\x20\x6F\x72\x20\x64\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\x0D\x0A\x52\x65\x70\x6C\x61\x63\x65\x20\x61\x6E\x64\x20\x70\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x77\x68\x65\x6E\x20\x72\x65\x61\x64\x79\x0D\x0A\x00\x0D\x0A\x42\x6F\x6F\x74\x20\x46\x61\x69\x6C\x75\x72\x65\x0D\x0A\x00\x49\x4F\x20\x20\x20\x20\x20\x20\x53\x59\x53\x4D\x53\x44\x4F\x53\x20\x20\x20\x53\x59\x53\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeMSDOS40
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSDOS4.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \xFA\x33\xC0\x8E\xD0\xBC\x00\x7C\x16\x07\xBB\x78\x00\x36\xC5\x37\x1E\x56\x16\x53\xBF\x3E\x7C\xB9\x0B\x00\xFC\xF3\xA4\x06\x1F\xC6\x45\xFE\x0F\x8B\x0E\x18\x7C\x88\x4D\xF9\x89\x47\x02\xC7\x07\x3E\x7C\xFB\xCD\x13\x72\x7C\x33\xC0\x39\x06\x13\x7C\x74\x08\x8B\x0E\x13\x7C\x89\x0E\x20\x7C\xA0\x10\x7C\xF7\x26\x16\x7C\x03\x06\x1C\x7C\x13\x16\x1E\x7C\x03\x06\x0E\x7C\x83\xD2\x00\xA3\x50\x7C\x89\x16\x52\x7C\xA3\x49\x7C\x89\x16\x4B\x7C\xB8\x20\x00\xF7\x26\x11\x7C\x8B\x1E\x0B\x7C\x03\xC3\x48\xF7\xF3\x01\x06\x49\x7C\x83\x16\x4B\x7C\x00\xBB\x00\x05\x8B\x16\x52\x7C\xA1\x50\x7C\xE8\x87\x00\x72\x20\xB0\x01\xE8\xA1\x00\x72\x19\x8B\xFB\xB9\x0B\x00\xBE\xDB\x7D\xF3\xA6\x75\x0D\x8D\x7F\x20\xBE\xE6\x7D\xB9\x0B\x00\xF3\xA6\x74\x18\xBE\x93\x7D\xE8\x51\x00\x32\xE4\xCD\x16\x5E\x1F\x8F\x04\x8F\x44\x02\xCD\x19\x58\x58\x58\xEB\xE8\xBB\x00\x07\xB9\x03\x00\xA1\x49\x7C\x8B\x16\x4B\x7C\x50\x52\x51\xE8\x3A\x00\x72\xE6\xB0\x01\xE8\x54\x00\x59\x5A\x58\x72\xC9\x05\x01\x00\x83\xD2\x00\x03\x1E\x0B\x7C\xE2\xE2\x8A\x2E\x15\x7C\x8A\x16\x24\x7C\x8B\x1E\x49 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \x7C\xA1\x4B\x7C\xEA\x00\x00\x70\x00\xAC\x0A\xC0\x74\x29\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xF2\x3B\x16\x18\x7C\x73\x19\xF7\x36\x18\x7C\xFE\xC2\x88\x16\x4F\x7C\x33\xD2\xF7\x36\x1A\x7C\x88\x16\x25\x7C\xA3\x4D\x7C\xF8\xC3\xF9\xC3\xB4\x02\x8B\x16\x4D\x7C\xB1\x06\xD2\xE6\x0A\x36\x4F\x7C\x8B\xCA\x86\xE9\x8A\x16\x24\x7C\x8A\x36\x25\x7C\xCD\x13\xC3\x0D\x0A\x4E\x6F\x6E\x2D\x53\x79\x73\x74\x65\x6D\x20\x64\x69\x73\x6B\x20\x6F\x72\x20\x64\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\x0D\x0A\x52\x65\x70\x6C\x61\x63\x65\x20\x61\x6E\x64\x20\x70\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x77\x68\x65\x6E\x20\x72\x65\x61\x64\x79\x0D\x0A\x00\x49\x4F\x20\x20\x20\x20\x20\x20\x53\x59\x53\x4D\x53\x44\x4F\x53\x20\x20\x20\x53\x59\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeMSDOS50
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSDOS5.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \xFA\x33\xC0\x8E\xD0\xBC\x00\x7C\x16\x07\xBB\x78\x00\x36\xC5\x37\x1E\x56\x16\x53\xBF\x3E\x7C\xB9\x0B\x00\xFC\xF3\xA4\x06\x1F\xC6\x45\xFE\x0F\x8B\x0E\x18\x7C\x88\x4D\xF9\x89\x47\x02\xC7\x07\x3E\x7C\xFB\xCD\x13\x72\x79\x33\xC0\x39\x06\x13\x7C\x74\x08\x8B\x0E\x13\x7C\x89\x0E\x20\x7C\xA0\x10\x7C\xF7\x26\x16\x7C\x03\x06\x1C\x7C\x13\x16\x1E\x7C\x03\x06\x0E\x7C\x83\xD2\x00\xA3\x50\x7C\x89\x16\x52\x7C\xA3\x49\x7C\x89\x16\x4B\x7C\xB8\x20\x00\xF7\x26\x11\x7C\x8B\x1E\x0B\x7C\x03\xC3\x48\xF7\xF3\x01\x06\x49\x7C\x83\x16\x4B\x7C\x00\xBB\x00\x05\x8B\x16\x52\x7C\xA1\x50\x7C\xE8\x92\x00\x72\x1D\xB0\x01\xE8\xAC\x00\x72\x16\x8B\xFB\xB9\x0B\x00\xBE\xE6\x7D\xF3\xA6\x75\x0A\x8D\x7F\x20\xB9\x0B\x00\xF3\xA6\x74\x18\xBE\x9E\x7D\xE8\x5F\x00\x33\xC0\xCD\x16\x5E\x1F\x8F\x04\x8F\x44\x02\xCD\x19\x58\x58\x58\xEB\xE8\x8B\x47\x1A\x48\x48\x8A\x1E\x0D\x7C\x32\xFF\xF7\xE3\x03\x06\x49\x7C\x13\x16\x4B\x7C\xBB\x00\x07\xB9\x03\x00\x50\x52\x51\xE8\x3A\x00\x72\xD8\xB0\x01\xE8\x54\x00\x59\x5A\x58\x72\xBB\x05\x01\x00\x83\xD2\x00\x03\x1E\x0B\x7C\xE2\xE2 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \x8A\x2E\x15\x7C\x8A\x16\x24\x7C\x8B\x1E\x49\x7C\xA1\x4B\x7C\xEA\x00\x00\x70\x00\xAC\x0A\xC0\x74\x29\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xF2\x3B\x16\x18\x7C\x73\x19\xF7\x36\x18\x7C\xFE\xC2\x88\x16\x4F\x7C\x33\xD2\xF7\x36\x1A\x7C\x88\x16\x25\x7C\xA3\x4D\x7C\xF8\xC3\xF9\xC3\xB4\x02\x8B\x16\x4D\x7C\xB1\x06\xD2\xE6\x0A\x36\x4F\x7C\x8B\xCA\x86\xE9\x8A\x16\x24\x7C\x8A\x36\x25\x7C\xCD\x13\xC3\x0D\x0A\x4E\x6F\x6E\x2D\x53\x79\x73\x74\x65\x6D\x20\x64\x69\x73\x6B\x20\x6F\x72\x20\x64\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\x0D\x0A\x52\x65\x70\x6C\x61\x63\x65\x20\x61\x6E\x64\x20\x70\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x77\x68\x65\x6E\x20\x72\x65\x61\x64\x79\x0D\x0A\x00\x49\x4F\x20\x20\x20\x20\x20\x20\x53\x59\x53\x4D\x53\x44\x4F\x53\x20\x20\x20\x53\x59\x53\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeMSWIN40
#-# Based on MS Boot-floppy
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSWIN4.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \xF1\x7D\xFA\x33\xC9\x8E\xD1\xBC\xFC\x7B\x16\x07\xBD\x78\x00\xC5\x76\x00\x1E\x56\x16\x55\xBF\x22\x05\x89\x7E\x00\x89\x4E\x02\xB1\x0B\xFC\xF3\xA4\x06\x1F\xBD\x00\x7C\xC6\x45\xFE\x0F\x8B\x46\x18\x88\x45\xF9\xFB\x38\x66\x24\x7C\x04\xCD\x13\x72\x3C\x8A\x46\x10\x98\xF7\x66\x16\x03\x46\x1C\x13\x56\x1E\x03\x46\x0E\x13\xD1\x50\x52\x89\x46\xFC\x89\x56\xFE\xB8\x20\x00\x8B\x76\x11\xF7\xE6\x8B\x5E\x0B\x03\xC3\x48\xF7\xF3\x01\x46\xFC\x11\x4E\xFE\x5A\x58\xBB\x00\x07\x8B\xFB\xB1\x01\xE8\x94\x00\x72\x47\x38\x2D\x74\x19\xB1\x0B\x56\x8B\x76\x3E\xF3\xA6\x5E\x74\x4A\x4E\x74\x0B\x03\xF9\x83\xC7\x15\x3B\xFB\x72\xE5\xEB\xD7\x2B\xC9\xB8\xD8\x7D\x87\x46\x3E\x3C\xD8\x75\x99\xBE\x80\x7D\xAC\x98\x03\xF0\xAC\x84\xC0\x74\x17\x3C\xFF\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEE\xBE\x83\x7D\xEB\xE5\xBE\x81\x7D\xEB\xE0\x33\xC0\xCD\x16\x5E\x1F\x8F\x04\x8F\x44\x02\xCD\x19\xBE\x82\x7D\x8B\x7D\x0F\x83\xFF\x02\x72\xC8\x8B\xC7\x48\x48\x8A\x4E\x0D\xF7\xE1\x03\x46\xFC\x13\x56\xFE\xBB\x00\x07\x53\xB1\x04\xE8\x16\x00\x5B\x72\xC8\x81\x3F\x4D\x5A\x75\xA7 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \x81\xBF\x00\x02\x42\x4A\x75\x9F\xEA\x00\x02\x70\x00\x50\x52\x51\x91\x92\x33\xD2\xF7\x76\x18\x91\xF7\x76\x18\x42\x87\xCA\xF7\x76\x1A\x8A\xF2\x8A\x56\x24\x8A\xE8\xD0\xCC\xD0\xCC\x0A\xCC\xB8\x01\x02\xCD\x13\x59\x5A\x58\x72\x09\x40\x75\x01\x42\x03\x5E\x0B\xE2\xCC\xC3\x03\x18\x01\x27\x0D\x0A\x49\x6E\x76\x61\x6C\x69\x64\x20\x73\x79\x73\x74\x65\x6D\x20\x64\x69\x73\x6B\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x49\x2F\x4F\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x52\x65\x70\x6C\x61\x63\x65\x20\x74\x68\x65\x20\x64\x69\x73\x6B\x2C\x20\x61\x6E\x64\x20\x74\x68\x65\x6E\x20\x70\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x0D\x0A\x00\x49\x4F\x20\x20\x20\x20\x20\x20\x53\x59\x53\x4D\x53\x44\x4F\x53\x20\x20\x20\x53\x59\x53\x80\x01\x00\x57\x49\x4E\x42\x4F\x4F\x54\x20\x53\x59\x53\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeMSWIN41
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSWIN4.1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \x33\xC9\x8E\xD1\xBC\xFC\x7B\x16\x07\xBD\x78\x00\xC5\x76\x00\x1E\x56\x16\x55\xBF\x22\x05\x89\x7E\x00\x89\x4E\x02\xB1\x0B\xFC\xF3\xA4\x06\x1F\xBD\x00\x7C\xC6\x45\xFE\x0F\x38\x4E\x24\x7D\x20\x8B\xC1\x99\xE8\x7E\x01\x83\xEB\x3A\x66\xA1\x1C\x7C\x66\x3B\x07\x8A\x57\xFC\x75\x06\x80\xCA\x02\x88\x56\x02\x80\xC3\x10\x73\xED\x33\xC9\xFE\x06\xD8\x7D\x8A\x46\x10\x98\xF7\x66\x16\x03\x46\x1C\x13\x56\x1E\x03\x46\x0E\x13\xD1\x8B\x76\x11\x60\x89\x46\xFC\x89\x56\xFE\xB8\x20\x00\xF7\xE6\x8B\x5E\x0B\x03\xC3\x48\xF7\xF3\x01\x46\xFC\x11\x4E\xFE\x61\xBF\x00\x07\xE8\x28\x01\x72\x3E\x38\x2D\x74\x17\x60\xB1\x0B\xBE\xD8\x7D\xF3\xA6\x61\x74\x3D\x4E\x74\x09\x83\xC7\x20\x3B\xFB\x72\xE7\xEB\xDD\xFE\x0E\xD8\x7D\x7B\xA7\xBE\x7F\x7D\xAC\x98\x03\xF0\xAC\x98\x40\x74\x0C\x48\x74\x13\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEF\xBE\x82\x7D\xEB\xE6\xBE\x80\x7D\xEB\xE1\xCD\x16\x5E\x1F\x66\x8F\x04\xCD\x19\xBE\x81\x7D\x8B\x7D\x1A\x8D\x45\xFE\x8A\x4E\x0D\xF7\xE1\x03\x46\xFC\x13\x56\xFE\xB1\x04\xE8\xC2\x00\x72\xD7\xEA\x00\x02\x70\x00\x52\x50\x06\x53\x6A\x01\x6A > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \x10\x91\x8B\x46\x18\xA2\x26\x05\x96\x92\x33\xD2\xF7\xF6\x91\xF7\xF6\x42\x87\xCA\xF7\x76\x1A\x8A\xF2\x8A\xE8\xC0\xCC\x02\x0A\xCC\xB8\x01\x02\x80\x7E\x02\x0E\x75\x04\xB4\x42\x8B\xF4\x8A\x56\x24\xCD\x13\x61\x61\x72\x0A\x40\x75\x01\x42\x03\x5E\x0B\x49\x75\x77\xC3\x03\x18\x01\x27\x0D\x0A\x49\x6E\x76\x61\x6C\x69\x64\x20\x73\x79\x73\x74\x65\x6D\x20\x64\x69\x73\x6B\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x49\x2F\x4F\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x52\x65\x70\x6C\x61\x63\x65\x20\x74\x68\x65\x20\x64\x69\x73\x6B\x2C\x20\x61\x6E\x64\x20\x74\x68\x65\x6E\x20\x70\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x0D\x0A\x00\x00\x49\x4F\x20\x20\x20\x20\x20\x20\x53\x59\x53\x4D\x53\x44\x4F\x53\x20\x20\x20\x53\x59\x53\x7F\x01\x00\x41\xBB\x00\x07\x60\x66\x6A\x00\xE9\x3B\xFF\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeMSDOS71
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90MSWIN4.1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \xFA\x33\xC9\x8E\xD1\xBC\xF8\x7B\x8E\xC1\xBD\x78\x00\xC5\x76\x00\x1E\x56\x16\x55\xBF\x22\x05\x89\x7E\x00\x89\x4E\x02\xB1\x0B\xFC\xF3\xA4\x8E\xD9\xBD\x00\x7C\xC6\x45\xFE\x0F\x8B\x46\x18\x88\x45\xF9\x38\x4E\x40\x7D\x25\x8B\xC1\x99\xBB\x00\x07\xE8\x97\x00\x72\x1A\x83\xEB\x3A\x66\xA1\x1C\x7C\x66\x3B\x07\x8A\x57\xFC\x75\x06\x80\xCA\x02\x88\x56\x02\x80\xC3\x10\x73\xED\xBF\x02\x00\x83\x7E\x16\x00\x75\x45\x8B\x46\x1C\x8B\x56\x1E\xB9\x03\x00\x49\x40\x75\x01\x42\xBB\x00\x7E\xE8\x5F\x00\x73\x26\xB0\xF8\x4F\x74\x1D\x8B\x46\x32\x33\xD2\xB9\x03\x00\x3B\xC8\x77\x1E\x8B\x76\x0E\x3B\xCE\x73\x17\x2B\xF1\x03\x46\x1C\x13\x56\x1E\xEB\xD1\x73\x0B\xEB\x27\x83\x7E\x2A\x00\x77\x03\xE9\xFD\x02\xBE\x7E\x7D\xAC\x98\x03\xF0\xAC\x84\xC0\x74\x17\x3C\xFF\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEE\xBE\x81\x7D\xEB\xE5\xBE\x7F\x7D\xEB\xE0\x98\xCD\x16\x5E\x1F\x66\x8F\x04\xCD\x19\x41\x56\x66\x6A\x00\x52\x50\x06\x53\x6A\x01\x6A\x10\x8B\xF4\x60\x80\x7E\x02\x0E\x75\x04\xB4\x42\xEB\x1D\x91\x92\x33\xD2\xF7\x76\x18\x91\xF7\x76\x18\x42\x87\xCA\xF7\x76 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x1A\x8A\xF2\x8A\xE8\xC0\xCC\x02\x0A\xCC\xB8\x01\x02\x8A\x56\x40\xCD\x13\x61\x8D\x64\x10\x5E\x72\x0A\x40\x75\x01\x42\x03\x5E\x0B\x49\x75\xB4\xC3\x03\x18\x01\x27\x0D\x0A\x49\x6E\x76\x61\x6C\x69\x64\x20\x73\x79\x73\x74\x65\x6D\x20\x64\x69\x73\x6B\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x49\x2F\x4F\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x52\x65\x70\x6C\x61\x63\x65\x20\x74\x68\x65\x20\x64\x69\x73\x6B\x2C\x20\x61\x6E\x64\x20\x74\x68\x65\x6E\x20\x70\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x0D\x0A\x00\x00\x00\x49\x4F\x20\x20\x20\x20\x20\x20\x53\x59\x53\x4D\x53\x44\x4F\x53\x20\x20\x20\x53\x59\x53\x7E\x01\x00\x57\x49\x4E\x42\x4F\x4F\x54\x20\x53\x59\x53\x00\x00\x55\xAA > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=1024 %target%+3 \xFA\x66\x0F\xB6\x46\x10\x66\x8B\x4E\x24\x66\xF7\xE1\x66\x03\x46\x1C\x66\x0F\xB7\x56\x0E\x66\x03\xC2\x33\xC9\x66\x89\x46\xFC\x66\xC7\x46\xF8\xFF\xFF\xFF\xFF\xFA\x66\x8B\x46\x2C\x66\x83\xF8\x02\x0F\x82\xCF\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\xC5\xFC\x66\x0F\xA4\xC2\x10\xFB\x52\x50\xFA\x66\xC1\xE0\x10\x66\x0F\xAC\xD0\x10\x66\x83\xE8\x02\x66\x0F\xB6\x5E\x0D\x8B\xF3\x66\xF7\xE3\x66\x03\x46\xFC\x66\x0F\xA4\xC2\x10\xFB\xBB\x00\x07\x8B\xFB\xB9\x01\x00\xE8\xBE\xFC\x0F\x82\xAA\xFC\x38\x2D\x74\x1E\xB1\x0B\x56\xBE\xD8\x7D\xF3\xA6\x5E\x74\x19\x03\xF9\x83\xC7\x15\x3B\xFB\x72\xE8\x4E\x75\xD6\x58\x5A\xE8\x66\x00\x72\xAB\x83\xC4\x04\xE9\x64\xFC\x83\xC4\x04\x8B\x75\x09\x8B\x7D\x0F\x8B\xC6\xFA\x66\xC1\xE0\x10\x8B\xC7\x66\x83\xF8\x02\x72\x3B\x66\x3D\xF8\xFF\xFF\x0F\x73\x33\x66\x48\x66\x48\x66\x0F\xB6\x4E\x0D\x66\xF7\xE1\x66\x03\x46\xFC\x66\x0F\xA4\xC2\x10\xFB\xBB\x00\x07\x53\xB9\x04\x00\xE8\x52\xFC\x5B\x0F\x82\x3D\xFC\x81\x3F\x4D\x5A\x75\x08\x81\xBF\x00\x02\x42\x4A\x74\x06\xBE\x80\x7D\xE9\x0E\xFC\xEA\x00\x02\x70\x00\x03\xC0\x13 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=1280 %target%+3 \xD2\x03\xC0\x13\xD2\xE8\x18\x00\xFA\x26\x66\x8B\x01\x66\x25\xFF\xFF\xFF\x0F\x66\x0F\xA4\xC2\x10\x66\x3D\xF8\xFF\xFF\x0F\xFB\xC3\xBF\x00\x7E\xFA\x66\xC1\xE0\x10\x66\x0F\xAC\xD0\x10\x66\x0F\xB7\x4E\x0B\x66\x33\xD2\x66\xF7\xF1\x66\x3B\x46\xF8\x74\x44\x66\x89\x46\xF8\x66\x03\x46\x1C\x66\x0F\xB7\x4E\x0E\x66\x03\xC1\x66\x0F\xB7\x5E\x28\x83\xE3\x0F\x74\x16\x3A\x5E\x10\x0F\x83\xA4\xFB\x52\x66\x8B\xC8\x66\x8B\x46\x24\x66\xF7\xE3\x66\x03\xC1\x5A\x52\x66\x0F\xA4\xC2\x10\xFB\x8B\xDF\xB9\x01\x00\xE8\xB4\xFB\x5A\x0F\x82\x9F\xFB\xFB\x8B\xDA\xC3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeGRLDR40
setlocal && set *
set "target=%~1"
## Is Working
raw write --offset=0 %target%+1 \xEB\x3C\x90IBM\x20\x202.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \xFA\xFC\x31\xC0\xBD\x00\x7C\x89\xEC\x8E\xD0\x8E\xD8\x8E\xC0\xFB\x89\x56\x24\xB4\x41\xBB\xAA\x55\x1E\x06\xCD\x13\x07\x1F\x72\x10\x81\xFB\x55\xAA\x75\x0A\xC0\xC9\x01\x73\x05\xC6\x06\x73\x7D\x42\x66\x0F\xB7\x5E\x0E\x66\x03\x5E\x1C\x66\x89\x5E\x28\x66\x0F\xB6\x46\x10\x66\x0F\xB7\x4E\x16\x66\xF7\xE1\x66\x01\xC3\x66\x89\x5E\x2C\x8B\x46\x11\x83\xC0\x0F\xB9\x10\x00\xF7\xF1\x66\x98\x89\xC1\x66\x01\xC3\x66\x89\x5E\x30\x66\x8B\x46\x2C\xC4\x9E\x8E\x01\xE8\x8E\x00\xC4\xBE\x8E\x01\xBE\xE3\x7D\xB1\x0B\x57\xF3\xA6\x5F\x74\x10\x83\xC7\x20\x74\x05\x26\x38\x2D\x75\xEB\xBE\xE0\x7D\xE9\xC6\x00\x26\xFF\x75\x1A\x8B\x4E\x16\x66\x8B\x46\x28\x06\xE8\x60\x00\x1F\x58\x1E\x16\x07\xBF\x00\x20\xAB\x89\xC6\x5A\x52\x01\xF6\x73\x03\x80\xC6\x10\x81\x7E\x39\x31\x32\x75\x13\x01\xC6\xC1\xEE\x01\xAD\x73 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=256 %target%+1 \x03\xC1\xE8\x04\x80\xE4\x0F\x3D\xF7\x0F\xEB\x06\x8E\xDA\xAD\x83\xF8\xF7\x76\xD2\x31\xC0\xAB\x07\x16\x1F\xBE\x00\x20\xAD\x83\xE8\x02\x72\x13\x66\x0F\xB7\xC0\x8A\x4E\x0D\x66\xF7\xE1\x66\x03\x46\x30\xE8\x0A\x00\xEB\xE7\x8B\x56\x24\x52\xFF\xAE\x8E\x01\x66\x60\x66\x31\xD2\x66\x52\x66\x50\x06\x53\x6A\x01\x6A\x10\x80\x3E\x73\x7D\x42\x74\x1D\x66\x31\xC9\x66\xFF\x76\x18\x59\x66\xF7\xF1\x42\x59\x52\x31\xD2\x66\xF7\xF1\x86\xD6\x59\x86\xC5\xC0\xE4\x06\x08\xE1\xB8\x01\x02\x89\xE6\x8A\x56\x24\x1E\x06\xCD\x13\x5B\x1F\x72\x11\x8D\x5F\x20\x8E\xC3\x61\x66\x61\x66\x40\xE2\xB1\xC3\x00\x00\x00\x20\xBE\xEF\x7D\xAC\xB4\x0E\xCD\x10\x3C\x00\x75\xF7\xEB\xFE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4E\x6F\x20\x47\x52\x4C\x44\x52\x20\x20\x20\x20\x20\x20\x00\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeGRLDR71
setlocal && set *
set "target=%~1"
## Is Working
raw write --offset=0 %target%+1 \xEB\x58\x90IBM\x20\x202.0 > nul && set result=1 ! set result=0
#BADwithtGRLDRNoFilesShownUnderMS-DOS7.1#raw write --offset=0 %target%%0+1 \xEB\x58\x90GRLDR\x20\x20\x20 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \xFA\xFC\x31\xC0\xBD\x00\x7C\x89\xEC\x8E\xD0\xFB\x50\x89\x56\x40\xB4\x41\xBB\xAA\x55\xCD\x13\x1F\x72\x0F\x81\xFB\x55\xAA\x75\x09\xD0\xC9\x73\x05\xC6\x06\x86\x7D\x42\x31\xDB\x66\x31\xC0\x66\x89\x46\x44\x8B\x46\x0E\x66\x03\x46\x1C\x66\x89\x46\x48\x66\x89\x46\x4C\x66\x8B\x46\x10\x66\xF7\x66\x24\x66\x01\x46\x4C\x66\x8B\x46\x2C\x66\x50\xE8\x8C\x00\xBE\xE0\x7D\x0F\x82\xEB\x00\x68\x00\x20\x07\x06\xE8\x99\x00\x07\x31\xFF\xB9\x0B\x00\xBE\xE3\x7D\xF3\xA6\x74\x15\x83\xC7\x20\x83\xE7\xE0\x3B\x7E\x0B\x75\xEB\x4A\x75\xDD\x66\x58\xE8\x29\x00\xEB\xCA\x26\xFF\x75\x09\x26\xFF\x75\x0F\x66\x58\x66\x50\xE8\x4C\x00\x73\x09\x8B\x56\x40\x52\xEA\x00\x00\x00\x20\xE8\x5A\x00\x4A\x75\xFA\x66\x58\xE8\x02\x00\xEB\xE3\x06\x66\xC1\xE0\x02\x66\x0F\xB7\x5E\x0B\x66\xF7\xF3\x66\x03\x46\x48\xBB\x60\x00\x8E\xC3\x31\xDB\x66\x3B\x46\x44\x74\x09\x66\x89\x46\x44\x06\xE8\x2A\x00\x07\x26\x67\x80\x62\x03\x0F\x26\x67\x66\x8B\x02\x07\xC3\x66\x3D\xF8\xFF\xFF\x0F\xF5\x72\x12\x66\x48\x66\x48\x66\x0F\xB6\x56\x0D\x52\x66\xF7\xE2\x5A\x66\x03\x46\x4C\xC3\x66\x60 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x66\x31\xD2\x66\x52\x66\x50\x06\x52\x6A\x01\x6A\x10\x66\x31\xC9\x66\xFF\x76\x18\x59\x66\xF7\xF1\x42\x59\x52\x31\xD2\x66\xF7\xF1\x86\xD6\x59\x86\xC5\xC0\xE4\x06\x08\xE1\xB8\x01\x02\x89\xE6\x8A\x56\x40\x06\x1E\xCD\x13\x1F\x5B\x72\x0B\x8D\x5F\x20\x8E\xC3\x61\x66\x61\x66\x40\xC3\xBE\xEF\x7D\xAC\xB4\x0E\xCD\x10\x3C\x00\x75\xF7\xEB\xFE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4E\x6F\x20\x47\x52\x4C\x44\x52\x20\x20\x20\x20\x20\x20\x00\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\x00\x00\x00\x00\x00\x55\xAA > nul
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeFREEDOS51
#-#+ Based on Setup-floppy FRDOS5.1
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90IBM\x20\x202.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \xFA\xFC\x31\xC0\x8E\xD8\xBD\x00\x7C\xB8\xE0\x1F\x8E\xC0\x89\xEE\x89\xEF\xB9\x00\x01\xF3\xA5\xEA\x5E\x7C\xE0\x1F\x00\x00\x60\x00\x8E\xD8\x8E\xD0\x8D\x66\xA0\xFB\x90\x90\x90\xC7\x46\xC0\x10\x00\xC7\x46\xC2\x01\x00\x8C\x5E\xC6\xC7\x46\xC4\xA0\x63\x8B\x76\x1C\x8B\x7E\x1E\x03\x76\x0E\x83\xD7\x00\x89\x76\xD2\x89\x7E\xD4\x8A\x46\x10\x98\xF7\x66\x16\x01\xC6\x11\xD7\x89\x76\xD6\x89\x7E\xD8\x8B\x5E\x0B\xB1\x05\xD3\xEB\x8B\x46\x11\x31\xD2\xF7\xF3\x50\x01\xC6\x83\xD7\x00\x89\x76\xDA\x89\x7E\xDC\x8B\x46\xD6\x8B\x56\xD8\x5F\xC4\x5E\x5A\xE8\x98\x00\xC4\x7E\x5A\xB9\x0B\x00\xBE\xF1\x7D\x57\xF3\xA6\x5F\x26\x8B\x45\x1A\x74\x0B\x83\xC7\x20\x26\x80\x3D\x00\x75\xE7\x72\x68\x50\xC4\x5E\x5A\x8B\x7E\x16\x8B\x46\xD2\x8B\x56\xD4\xE8\x6A\x00\x58\x1E\x07\x8E\x5E\x5C\xBF\x00\x20\xAB\x89\xC6\x01\xF6\x01\xC6\xD1\xEE\xAD\x73\x04\xB1\x04\xD3\xE8\x80\xE4\x0F\x3D\xF8\x0F\x72\xE8\x31\xC0\xAB\x0E\x1F\xC4\x5E\x5A\xBE\x00\x20\xAD\x09\xC0\x75\x05\x88\xD3\xFF\x6E\x5A\x48\x48\x8B\x7E\x0D\x81\xE7\xFF\x00\xF7\xE7\x03\x46\xDA\x13\x56\xDC\xE8\x20\x00\xEB > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \xE0\x5E\xAC\x56\xB4\x0E\xCD\x10\x3C\x2E\x75\xF5\xC3\xE8\xF1\xFF\x45\x72\x72\x6F\x72\x21\x2E\x30\xE4\xCD\x13\xCD\x16\xCD\x19\x56\x89\x46\xC8\x89\x56\xCA\x8C\x86\x9E\xE7\x89\x9E\x9C\xE7\xE8\xD0\xFF\x2E\xB4\x41\xBB\xAA\x55\x8A\x56\x24\x84\xD2\x74\x19\xCD\x13\x72\x15\xD1\xE9\x81\xDB\x54\xAA\x75\x0D\x8D\x76\xC0\x89\x5E\xCC\x89\x5E\xCE\xB4\x42\xEB\x26\x8B\x4E\xC8\x8B\x56\xCA\x8A\x46\x18\xF6\x66\x1A\x91\xF7\xF1\x92\xF6\x76\x18\x89\xD1\x88\xC6\x86\xE9\xD0\xC9\xD0\xC9\x08\xE1\x41\xC4\x5E\xC4\xB8\x01\x02\x8A\x56\x24\xCD\x13\x72\x89\x8B\x46\x0B\x57\xBE\xA0\x63\xC4\xBE\x9C\xE7\x89\xC1\xF3\xA4\x5F\xB1\x04\xD3\xE8\x01\x86\x9E\xE7\x83\x46\xC8\x01\x83\x56\xCA\x00\x4F\x75\x8B\xC4\x9E\x9C\xE7\x5E\xC3\x00\x00\x00\x00\x00\x00\x4B\x45\x52\x4E\x45\x4C\x20\x20\x53\x59\x53\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeFREEDOS71
#-#+ Based on br_fat32fd_0x52.h
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90MSWIN4.1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \xFC\xFA\x29\xC0\x8E\xD8\xBD\x00\x7C\xB8\xE0\x1F\x8E\xC0\x89\xEE\x89\xEF\xB9\x00\x01\xF3\xA5\xEA\x7A\x7C\xE0\x1F\x00\x00\x60\x00\x8E\xD8\x8E\xD0\x8D\x66\xE0\xFB\x88\x56\x40\xBE\xC1\x7D\xE8\xF4\x00\x66\x31\xC0\x66\x89\x46\x44\x8B\x46\x0E\x66\x03\x46\x1C\x66\x89\x46\x48\x66\x89\x46\x4C\x66\x8B\x46\x10\x66\xF7\x6E\x24\x66\x01\x46\x4C\xB8\x00\x02\x3B\x46\x0B\x74\x08\x01\xC0\xFF\x06\x34\x7D\xEB\xF3\x66\x8B\x46\x2C\x66\x50\xE8\x94\x00\x72\x4D\xC4\x5E\x76\xE8\xB7\x00\x31\xFF\xB9\x0B\x00\xBE\xF1\x7D\xF3\xA6\x74\x15\x83\xC7\x20\x83\xE7\xE0\x3B\x7E\x0B\x75\xEB\x4A\x75\xE0\x66\x58\xE8\x34\x00\xEB\xD2\x26\xFF\x75\x09\x26\xFF\x75\x0F\x66\x58\x29\xDB\x66\x50\xE8\x5A\x00\x72\x0D\xE8\x80\x00\x4A\x75\xFA\x66\x58\xE8\x14\x00\xEB\xEC\x8A\x5E\x40\xFF\x6E\x76\xBE\xEE\x7D\xE8\x64\x00\x30\xE4\xCD\x16\xCD\x19\x06\x57\x53\x89\xC7\xC1\xE7\x02\x50\x8B\x46\x0B\x48\x21\xC7\x58\x66\xC1\xE8\x07\x66\x03\x46\x48\xBB\x00\x20\x8E\xC3\x29\xDB\x66\x3B\x46\x44\x74\x07\x66\x89\x46\x44\xE8\x38\x00\x26\x80\x65\x03\x0F\x26\x66\x8B\x05\x5B\x5F\x07\xC3 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x66\x3D\xF8\xFF\xFF\x0F\x73\x15\x66\x48\x66\x48\x66\x0F\xB6\x56\x0D\x66\x52\x66\xF7\xE2\x66\x5A\x66\x03\x46\x4C\xC3\xF9\xC3\x31\xDB\xB4\x0E\xCD\x10\xAC\x3C\x00\x75\xF5\xC3\x52\x56\x57\x66\x50\x89\xE7\x6A\x00\x6A\x00\x66\x50\x06\x53\x6A\x01\x6A\x10\x89\xE6\x8A\x56\x40\xB4\x42\xCD\x13\x89\xFC\x66\x58\x73\x08\x50\x30\xE4\xCD\x13\x58\xEB\xD9\x66\x40\x03\x5E\x0B\x73\x07\x8C\xC2\x80\xC6\x10\x8E\xC2\x5F\x5E\x5A\xC3\x4C\x6F\x61\x64\x69\x6E\x67\x20\x46\x72\x65\x65\x44\x4F\x53\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4E\x6F\x20\x4B\x45\x52\x4E\x45\x4C\x20\x20\x53\x59\x53\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeNT5FAT32
#-#+ Based on Windows XP Home.vhd
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90MSWIN4.1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \x33\xC9\x8E\xD1\xBC\xF4\x7B\x8E\xC1\x8E\xD9\xBD\x00\x7C\x88\x4E\x02\x8A\x56\x40\xB4\x08\xCD\x13\x73\x05\xB9\xFF\xFF\x8A\xF1\x66\x0F\xB6\xC6\x40\x66\x0F\xB6\xD1\x80\xE2\x3F\xF7\xE2\x86\xCD\xC0\xED\x06\x41\x66\x0F\xB7\xC9\x66\xF7\xE1\x66\x89\x46\xF8\x83\x7E\x16\x00\x75\x38\x83\x7E\x2A\x00\x77\x32\x66\x8B\x46\x1C\x66\x83\xC0\x0C\xBB\x00\x80\xB9\x01\x00\xE8\x2B\x00\xE9\x48\x03\xA0\xFA\x7D\xB4\x7D\x8B\xF0\xAC\x84\xC0\x74\x17\x3C\xFF\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEE\xA0\xFB\x7D\xEB\xE5\xA0\xF9\x7D\xEB\xE0\x98\xCD\x16\xCD\x19\x66\x60\x66\x3B\x46\xF8\x0F\x82\x4A\x00\x66\x6A\x00\x66\x50\x06\x53\x66\x68\x10\x00\x01\x00\x80\x7E\x02\x00\x0F\x85\x20\x00\xB4\x41\xBB\xAA\x55\x8A\x56\x40\xCD\x13\x0F\x82\x1C\x00\x81\xFB\x55\xAA\x0F\x85\x14\x00\xF6\xC1\x01\x0F\x84\x0D\x00\xFE\x46\x02\xB4\x42\x8A\x56\x40\x8B\xF4\xCD\x13\xB0\xF9\x66\x58\x66\x58\x66\x58\x66\x58\xEB\x2A\x66\x33\xD2\x66\x0F\xB7\x4E\x18\x66\xF7\xF1\xFE\xC2\x8A\xCA\x66\x8B\xD0\x66\xC1\xEA\x10\xF7\x76\x1A\x86\xD6\x8A\x56\x40\x8A\xE8\xC0\xE4\x06\x0A\xCC\xB8 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x01\x02\xCD\x13\x66\x61\x0F\x82\x54\xFF\x81\xC3\x00\x02\x66\x40\x49\x0F\x85\x71\xFF\xC3\x4E\x54\x4C\x44\x52\x20\x20\x20\x20\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0D\x0A\x4E\x54\x4C\x44\x52\x20\x69\x73\x20\x6D\x69\x73\x73\x69\x6E\x67\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xAC\xBF\xCC\x00\x00\x55\xAA > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6144 %target%+13 \x66\x0F\xB6\x46\x10\x66\x8B\x4E\x24\x66\xF7\xE1\x66\x03\x46\x1C\x66\x0F\xB7\x56\x0E\x66\x03\xC2\x66\x89\x46\xFC\x66\xC7\x46\xF4\xFF\xFF\xFF\xFF\x66\x8B\x46\x2C\x66\x83\xF8\x02\x0F\x82\xA6\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\x9C\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x5E\x0D\x8B\xF3\x66\xF7\xE3\x66\x03\x46\xFC\xBB\x00\x82\x8B\xFB\xB9\x01\x00\xE8\x87\xFC\x38\x2D\x74\x1E\xB1\x0B\x56\xBE\x70\x7D\xF3\xA6\x5E\x74\x1B\x03\xF9\x83\xC7\x15\x3B\xFB\x72\xE8\x4E\x75\xDA\x66\x58\xE8\x65\x00\x72\xBF\x83\xC4\x04\xE9\x55\xFC\x00\x20\x83\xC4\x04\x8B\x75\x09\x8B\x7D\x0F\x8B\xC6\x66\xC1\xE0\x10\x8B\xC7\x66\x83\xF8\x02\x0F\x82\x3A\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\x30\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x4E\x0D\x66\xF7\xE1\x66\x03\x46\xFC\xBB\x00\x00\x06\x8E\x06\x81\x80\xE8\x1D\xFC\x07\x66\x58\xC1\xEB\x04\x01\x1E\x81\x80\xE8\x0E\x00\x0F\x83\x02\x00\x72\xD0\x8A\x56\x40\xEA\x00\x00\x00\x20\x66\xC1\xE0\x02\xE8\x11\x00\x26\x66\x8B\x01\x66\x25\xFF\xFF\xFF\x0F\x66\x3D\xF8\xFF\xFF\x0F\xC3\xBF\x00\x7E\x66\x0F\xB7\x4E\x0B\x66\x33 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6400 %target%+13 \xD2\x66\xF7\xF1\x66\x3B\x46\xF4\x74\x3A\x66\x89\x46\xF4\x66\x03\x46\x1C\x66\x0F\xB7\x4E\x0E\x66\x03\xC1\x66\x0F\xB7\x5E\x28\x83\xE3\x0F\x74\x16\x3A\x5E\x10\x0F\x83\xAB\xFB\x52\x66\x8B\xC8\x66\x8B\x46\x24\x66\xF7\xE3\x66\x03\xC1\x5A\x52\x8B\xDF\xB9\x01\x00\xE8\x9D\xFB\x5A\x8B\xDA\xC3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeNT5FAT
#-#+ Based on Setup-floppy FRDOS5.1
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSDOS5.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \x33\xC9\x8E\xD1\xBC\xF0\x7B\x8E\xD9\xB8\x00\x20\x8E\xC0\xFC\xBD\x00\x7C\x38\x4E\x24\x7D\x24\x8B\xC1\x99\xE8\x3C\x01\x72\x1C\x83\xEB\x3A\x66\xA1\x1C\x7C\x26\x66\x3B\x07\x26\x8A\x57\xFC\x75\x06\x80\xCA\x02\x88\x56\x02\x80\xC3\x10\x73\xEB\x33\xC9\x8A\x46\x10\x98\xF7\x66\x16\x03\x46\x1C\x13\x56\x1E\x03\x46\x0E\x13\xD1\x8B\x76\x11\x60\x89\x46\xFC\x89\x56\xFE\xB8\x20\x00\xF7\xE6\x8B\x5E\x0B\x03\xC3\x48\xF7\xF3\x01\x46\xFC\x11\x4E\xFE\x61\xBF\x00\x00\xE8\xE6\x00\x72\x39\x26\x38\x2D\x74\x17\x60\xB1\x0B\xBE\xA1\x7D\xF3\xA6\x61\x74\x32\x4E\x74\x09\x83\xC7\x20\x3B\xFB\x72\xE6\xEB\xDC\xA0\xFB\x7D\xB4\x7D\x8B\xF0\xAC\x98\x40\x74\x0C\x48\x74\x13\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEF\xA0\xFD\x7D\xEB\xE6\xA0\xFC\x7D\xEB\xE1\xCD\x16\xCD\x19\x26\x8B\x55\x1A\x52\xB0\x01\xBB\x00\x00\xE8\x3B\x00\x72\xE8\x5B\x8A\x56\x24\xBE\x0B\x7C\x8B\xFC\xC7\x46\xF0\x3D\x7D\xC7\x46\xF4\x29\x7D\x8C\xD9\x89\x4E\xF2\x89\x4E\xF6\xC6\x06\x96\x7D\xCB\xEA\x03\x00\x00\x20\x0F\xB6\xC8\x66\x8B\x46\xF8\x66\x03\x46\x1C\x66\x8B\xD0\x66\xC1\xEA\x10\xEB\x5E\x0F > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \xB6\xC8\x4A\x4A\x8A\x46\x0D\x32\xE4\xF7\xE2\x03\x46\xFC\x13\x56\xFE\xEB\x4A\x52\x50\x06\x53\x6A\x01\x6A\x10\x91\x8B\x46\x18\x96\x92\x33\xD2\xF7\xF6\x91\xF7\xF6\x42\x87\xCA\xF7\x76\x1A\x8A\xF2\x8A\xE8\xC0\xCC\x02\x0A\xCC\xB8\x01\x02\x80\x7E\x02\x0E\x75\x04\xB4\x42\x8B\xF4\x8A\x56\x24\xCD\x13\x61\x61\x72\x0B\x40\x75\x01\x42\x03\x5E\x0B\x49\x75\x06\xF8\xC3\x41\xBB\x00\x00\x60\x66\x6A\x00\xEB\xB0\x4E\x54\x4C\x44\x52\x20\x20\x20\x20\x20\x20\x0D\x0A\x52\x65\x6D\x6F\x76\x65\x20\x64\x69\x73\x6B\x73\x20\x6F\x72\x20\x6F\x74\x68\x65\x72\x20\x6D\x65\x64\x69\x61\x2E\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\xAC\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeVISTAFAT32
#-#+ Based on .... ?
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90MSWIN4.1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \x33\xC9\x8E\xD1\xBC\xF4\x7B\x8E\xC1\x8E\xD9\xBD\x00\x7C\x88\x4E\x02\x8A\x56\x40\xB4\x41\xBB\xAA\x55\xCD\x13\x72\x10\x81\xFB\x55\xAA\x75\x0A\xF6\xC1\x01\x74\x05\xFE\x46\x02\xEB\x2D\x8A\x56\x40\xB4\x08\xCD\x13\x73\x05\xB9\xFF\xFF\x8A\xF1\x66\x0F\xB6\xC6\x40\x66\x0F\xB6\xD1\x80\xE2\x3F\xF7\xE2\x86\xCD\xC0\xED\x06\x41\x66\x0F\xB7\xC9\x66\xF7\xE1\x66\x89\x46\xF8\x83\x7E\x16\x00\x75\x38\x83\x7E\x2A\x00\x77\x32\x66\x8B\x46\x1C\x66\x83\xC0\x0C\xBB\x00\x80\xB9\x01\x00\xE8\x2B\x00\xE9\x2C\x03\xA0\xFA\x7D\xB4\x7D\x8B\xF0\xAC\x84\xC0\x74\x17\x3C\xFF\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEE\xA0\xFB\x7D\xEB\xE5\xA0\xF9\x7D\xEB\xE0\x98\xCD\x16\xCD\x19\x66\x60\x80\x7E\x02\x00\x0F\x84\x20\x00\x66\x6A\x00\x66\x50\x06\x53\x66\x68\x10\x00\x01\x00\xB4\x42\x8A\x56\x40\x8B\xF4\xCD\x13\x66\x58\x66\x58\x66\x58\x66\x58\xEB\x33\x66\x3B\x46\xF8\x72\x03\xF9\xEB\x2A\x66\x33\xD2\x66\x0F\xB7\x4E\x18\x66\xF7\xF1\xFE\xC2\x8A\xCA\x66\x8B\xD0\x66\xC1\xEA\x10\xF7\x76\x1A\x86\xD6\x8A\x56\x40\x8A\xE8\xC0\xE4\x06\x0A\xCC\xB8\x01\x02\xCD\x13\x66 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x61\x0F\x82\x75\xFF\x81\xC3\x00\x02\x66\x40\x49\x75\x94\xC3\x42\x4F\x4F\x54\x4D\x47\x52\x20\x20\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0D\x0A\x42\x4F\x4F\x54\x4D\x47\x52\x20\x69\x73\x20\x6D\x69\x73\x73\x69\x6E\x67\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xAC\xC1\xCE\x00\x00\x55\xAA > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6144 %target%+13 \x66\x0F\xB6\x46\x10\x66\x8B\x4E\x24\x66\xF7\xE1\x66\x03\x46\x1C\x66\x0F\xB7\x56\x0E\x66\x03\xC2\x66\x89\x46\xFC\x66\xC7\x46\xF4\xFF\xFF\xFF\xFF\x66\x8B\x46\x2C\x66\x83\xF8\x02\x0F\x82\xC2\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\xB8\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x5E\x0D\x8B\xF3\x66\xF7\xE3\x66\x03\x46\xFC\xBB\x00\x82\x8B\xFB\xB9\x01\x00\xE8\xA3\xFC\x38\x2D\x74\x1E\xB1\x0B\x56\xBE\x69\x7D\xF3\xA6\x5E\x74\x1B\x03\xF9\x83\xC7\x15\x3B\xFB\x72\xE8\x4E\x75\xDA\x66\x58\xE8\x65\x00\x72\xBF\x83\xC4\x04\xE9\x71\xFC\x00\x20\x83\xC4\x04\x8B\x75\x09\x8B\x7D\x0F\x8B\xC6\x66\xC1\xE0\x10\x8B\xC7\x66\x83\xF8\x02\x0F\x82\x56\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\x4C\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x4E\x0D\x66\xF7\xE1\x66\x03\x46\xFC\xBB\x00\x00\x06\x8E\x06\x81\x80\xE8\x39\xFC\x07\x66\x58\xC1\xEB\x04\x01\x1E\x81\x80\xE8\x0E\x00\x0F\x83\x02\x00\x72\xD0\x8A\x56\x40\xEA\x00\x00\x00\x20\x66\xC1\xE0\x02\xE8\x11\x00\x26\x66\x8B\x01\x66\x25\xFF\xFF\xFF\x0F\x66\x3D\xF8\xFF\xFF\x0F\xC3\xBF\x00\x7E\x66\x0F\xB7\x4E\x0B\x66\x33 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6400 %target%+13 \xD2\x66\xF7\xF1\x66\x3B\x46\xF4\x74\x3A\x66\x89\x46\xF4\x66\x03\x46\x1C\x66\x0F\xB7\x4E\x0E\x66\x03\xC1\x66\x0F\xB7\x5E\x28\x83\xE3\x0F\x74\x16\x3A\x5E\x10\x0F\x83\xC7\xFB\x52\x66\x8B\xC8\x66\x8B\x46\x24\x66\xF7\xE3\x66\x03\xC1\x5A\x52\x8B\xDF\xB9\x01\x00\xE8\xB9\xFB\x5A\x8B\xDA\xC3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeVISTAFAT
#-#+ Based on AUTOCONV.EXE 6.0
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSDOS5.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \x33\xC9\x8E\xD1\xBC\xF0\x7B\x8E\xD9\xB8\x00\x20\x8E\xC0\xFC\xBD\x00\x7C\x38\x4E\x24\x7D\x24\x8B\xC1\x99\xE8\x3C\x01\x72\x1C\x83\xEB\x3A\x66\xA1\x1C\x7C\x26\x66\x3B\x07\x26\x8A\x57\xFC\x75\x06\x80\xCA\x02\x88\x56\x02\x80\xC3\x10\x73\xEB\x33\xC9\x8A\x46\x10\x98\xF7\x66\x16\x03\x46\x1C\x13\x56\x1E\x03\x46\x0E\x13\xD1\x8B\x76\x11\x60\x89\x46\xFC\x89\x56\xFE\xB8\x20\x00\xF7\xE6\x8B\x5E\x0B\x03\xC3\x48\xF7\xF3\x01\x46\xFC\x11\x4E\xFE\x61\xBF\x00\x00\xE8\xE6\x00\x72\x39\x26\x38\x2D\x74\x17\x60\xB1\x0B\xBE\xA1\x7D\xF3\xA6\x61\x74\x32\x4E\x74\x09\x83\xC7\x20\x3B\xFB\x72\xE6\xEB\xDC\xA0\xFB\x7D\xB4\x7D\x8B\xF0\xAC\x98\x40\x74\x0C\x48\x74\x13\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEF\xA0\xFD\x7D\xEB\xE6\xA0\xFC\x7D\xEB\xE1\xCD\x16\xCD\x19\x26\x8B\x55\x1A\x52\xB0\x01\xBB\x00\x00\xE8\x3B\x00\x72\xE8\x5B\x8A\x56\x24\xBE\x0B\x7C\x8B\xFC\xC7\x46\xF0\x3D\x7D\xC7\x46\xF4\x29\x7D\x8C\xD9\x89\x4E\xF2\x89\x4E\xF6\xC6\x06\x96\x7D\xCB\xEA\x03\x00\x00\x20\x0F\xB6\xC8\x66\x8B\x46\xF8\x66\x03\x46\x1C\x66\x8B\xD0\x66\xC1\xEA\x10\xEB\x5E\x0F > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \xB6\xC8\x4A\x4A\x8A\x46\x0D\x32\xE4\xF7\xE2\x03\x46\xFC\x13\x56\xFE\xEB\x4A\x52\x50\x06\x53\x6A\x01\x6A\x10\x91\x8B\x46\x18\x96\x92\x33\xD2\xF7\xF6\x91\xF7\xF6\x42\x87\xCA\xF7\x76\x1A\x8A\xF2\x8A\xE8\xC0\xCC\x02\x0A\xCC\xB8\x01\x02\x80\x7E\x02\x0E\x75\x04\xB4\x42\x8B\xF4\x8A\x56\x24\xCD\x13\x61\x61\x72\x0B\x40\x75\x01\x42\x03\x5E\x0B\x49\x75\x06\xF8\xC3\x41\xBB\x00\x00\x60\x66\x6A\x00\xEB\xB0\x42\x4F\x4F\x54\x4D\x47\x52\x20\x20\x20\x20\x0D\x0A\x42\x4F\x4F\x54\x4D\x47\x52\x20\x69\x73\x20\x6D\x69\x73\x73\x69\x6E\x67\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xAC\xC1\xCE\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeWIN7FAT32
#-#+ Based on ... ?
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90MSDOS5.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \x33\xC9\x8E\xD1\xBC\xF4\x7B\x8E\xC1\x8E\xD9\xBD\x00\x7C\x88\x4E\x02\x8A\x56\x40\xB4\x41\xBB\xAA\x55\xCD\x13\x72\x10\x81\xFB\x55\xAA\x75\x0A\xF6\xC1\x01\x74\x05\xFE\x46\x02\xEB\x2D\x8A\x56\x40\xB4\x08\xCD\x13\x73\x05\xB9\xFF\xFF\x8A\xF1\x66\x0F\xB6\xC6\x40\x66\x0F\xB6\xD1\x80\xE2\x3F\xF7\xE2\x86\xCD\xC0\xED\x06\x41\x66\x0F\xB7\xC9\x66\xF7\xE1\x66\x89\x46\xF8\x83\x7E\x16\x00\x75\x38\x83\x7E\x2A\x00\x77\x32\x66\x8B\x46\x1C\x66\x83\xC0\x0C\xBB\x00\x80\xB9\x01\x00\xE8\x2B\x00\xE9\x2C\x03\xA0\xFA\x7D\xB4\x7D\x8B\xF0\xAC\x84\xC0\x74\x17\x3C\xFF\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEE\xA0\xFB\x7D\xEB\xE5\xA0\xF9\x7D\xEB\xE0\x98\xCD\x16\xCD\x19\x66\x60\x80\x7E\x02\x00\x0F\x84\x20\x00\x66\x6A\x00\x66\x50\x06\x53\x66\x68\x10\x00\x01\x00\xB4\x42\x8A\x56\x40\x8B\xF4\xCD\x13\x66\x58\x66\x58\x66\x58\x66\x58\xEB\x33\x66\x3B\x46\xF8\x72\x03\xF9\xEB\x2A\x66\x33\xD2\x66\x0F\xB7\x4E\x18\x66\xF7\xF1\xFE\xC2\x8A\xCA\x66\x8B\xD0\x66\xC1\xEA\x10\xF7\x76\x1A\x86\xD6\x8A\x56\x40\x8A\xE8\xC0\xE4\x06\x0A\xCC\xB8\x01\x02\xCD\x13\x66 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x61\x0F\x82\x75\xFF\x81\xC3\x00\x02\x66\x40\x49\x75\x94\xC3\x42\x4F\x4F\x54\x4D\x47\x52\x20\x20\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0D\x0A\x42\x4F\x4F\x54\x4D\x47\x52\x20\x69\x73\x20\x6D\x69\x73\x73\x69\x6E\x67\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xAC\xC1\xCE\x00\x00\x55\xAA > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6144 %target%+13 \x66\x0F\xB6\x46\x10\x66\x8B\x4E\x24\x66\xF7\xE1\x66\x03\x46\x1C\x66\x0F\xB7\x56\x0E\x66\x03\xC2\x66\x89\x46\xFC\x66\xC7\x46\xF4\xFF\xFF\xFF\xFF\x66\x8B\x46\x2C\x66\x83\xF8\x02\x0F\x82\xC2\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\xB8\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x5E\x0D\x8B\xF3\x66\xF7\xE3\x66\x03\x46\xFC\xBB\x00\x82\x8B\xFB\xB9\x01\x00\xE8\xA3\xFC\x38\x2D\x74\x1E\xB1\x0B\x56\xBE\x69\x7D\xF3\xA6\x5E\x74\x1B\x03\xF9\x83\xC7\x15\x3B\xFB\x72\xE8\x4E\x75\xDA\x66\x58\xE8\x65\x00\x72\xBF\x83\xC4\x04\xE9\x71\xFC\x00\x20\x83\xC4\x04\x8B\x75\x09\x8B\x7D\x0F\x8B\xC6\x66\xC1\xE0\x10\x8B\xC7\x66\x83\xF8\x02\x0F\x82\x56\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\x4C\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x4E\x0D\x66\xF7\xE1\x66\x03\x46\xFC\xBB\x00\x00\x06\x8E\x06\x81\x80\xE8\x39\xFC\x07\x66\x58\xC1\xEB\x04\x01\x1E\x81\x80\xE8\x0E\x00\x0F\x83\x02\x00\x72\xD0\x8A\x56\x40\xEA\x00\x00\x00\x20\x66\xC1\xE0\x02\xE8\x11\x00\x26\x66\x8B\x01\x66\x25\xFF\xFF\xFF\x0F\x66\x3D\xF8\xFF\xFF\x0F\xC3\xBF\x00\x7E\x66\x0F\xB7\x4E\x0B\x66\x33 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6400 %target%+13 \xD2\x66\xF7\xF1\x66\x3B\x46\xF4\x74\x3A\x66\x89\x46\xF4\x66\x03\x46\x1C\x66\x0F\xB7\x4E\x0E\x66\x03\xC1\x66\x0F\xB7\x5E\x28\x83\xE3\x0F\x74\x16\x3A\x5E\x10\x0F\x83\xC7\xFB\x52\x66\x8B\xC8\x66\x8B\x46\x24\x66\xF7\xE3\x66\x03\xC1\x5A\x52\x8B\xDF\xB9\x01\x00\xE8\xB9\xFB\x5A\x8B\xDA\xC3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeWIN10FAT32
#-#+ Based on Windows 10 DISKMANAGEMENT
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90MSDOS5.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \x33\xC9\x8E\xD1\xBC\xF4\x7B\x8E\xC1\x8E\xD9\xBD\x00\x7C\x88\x56\x40\x88\x4E\x02\x8A\x56\x40\xB4\x41\xBB\xAA\x55\xCD\x13\x72\x10\x81\xFB\x55\xAA\x75\x0A\xF6\xC1\x01\x74\x05\xFE\x46\x02\xEB\x2D\x8A\x56\x40\xB4\x08\xCD\x13\x73\x05\xB9\xFF\xFF\x8A\xF1\x66\x0F\xB6\xC6\x40\x66\x0F\xB6\xD1\x80\xE2\x3F\xF7\xE2\x86\xCD\xC0\xED\x06\x41\x66\x0F\xB7\xC9\x66\xF7\xE1\x66\x89\x46\xF8\x83\x7E\x16\x00\x75\x39\x83\x7E\x2A\x00\x77\x33\x66\x8B\x46\x1C\x66\x83\xC0\x0C\xBB\x00\x80\xB9\x01\x00\xE8\x2C\x00\xE9\xA8\x03\xA1\xF8\x7D\x80\xC4\x7C\x8B\xF0\xAC\x84\xC0\x74\x17\x3C\xFF\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEE\xA1\xFA\x7D\xEB\xE4\xA1\x7D\x80\xEB\xDF\x98\xCD\x16\xCD\x19\x66\x60\x80\x7E\x02\x00\x0F\x84\x20\x00\x66\x6A\x00\x66\x50\x06\x53\x66\x68\x10\x00\x01\x00\xB4\x42\x8A\x56\x40\x8B\xF4\xCD\x13\x66\x58\x66\x58\x66\x58\x66\x58\xEB\x33\x66\x3B\x46\xF8\x72\x03\xF9\xEB\x2A\x66\x33\xD2\x66\x0F\xB7\x4E\x18\x66\xF7\xF1\xFE\xC2\x8A\xCA\x66\x8B\xD0\x66\xC1\xEA\x10\xF7\x76\x1A\x86\xD6\x8A\x56\x40\x8A\xE8\xC0\xE4\x06\x0A\xCC\xB8\x01 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x02\xCD\x13\x66\x61\x0F\x82\x74\xFF\x81\xC3\x00\x02\x66\x40\x49\x75\x94\xC3\x42\x4F\x4F\x54\x4D\x47\x52\x20\x20\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xAC\x01\xB9\x01\x00\x00\x55\xAA > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6144 %target%+13 \x0D\x0A\x41\x6E\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x20\x77\x61\x73\x6E\x27\x74\x20\x66\x6F\x75\x6E\x64\x2E\x20\x54\x72\x79\x20\x64\x69\x73\x63\x6F\x6E\x6E\x65\x63\x74\x69\x6E\x67\x20\x61\x6E\x79\x20\x64\x72\x69\x76\x65\x73\x20\x74\x68\x61\x74\x20\x64\x6F\x6E\x27\x74\x0D\x0A\x63\x6F\x6E\x74\x61\x69\x6E\x20\x61\x6E\x20\x6F\x70\x65\x72\x61\x74\x69\x6E\x67\x20\x73\x79\x73\x74\x65\x6D\x2E\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x66\x0F\xB6\x46\x10\x66\x8B\x4E\x24\x66\xF7\xE1\x66\x03\x46\x1C\x66\x0F\xB7\x56\x0E\x66\x03\xC2\x66\x89\x46\xFC\x66\xC7\x46\xF4\xFF\xFF\xFF\xFF\x66\x8B\x46\x2C\x66\x83\xF8\x02\x0F\x82\x47\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\x3D\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x5E\x0D\x8B\xF3\x66\xF7\xE3\x66\x03\x46\xFC\xBB\x00\x82\x8B\xFB\xB9\x01\x00\xE8\x28\xFC\x38\x2D\x74\x1E\xB1\x0B\x56\xBE\x6D\x7D\xF3\xA6\x5E\x74\x1B\x03\xF9\x83\xC7\x15\x3B\xFB\x72\xE8\x4E\x75\xDA\x66\x58\xE8\x65\x00\x72\xBF\x83\xC4\x04\xE9\xF6\xFB > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6400 %target%+13 \x00\x20\x83\xC4\x04\x8B\x75\x09\x8B\x7D\x0F\x8B\xC6\x66\xC1\xE0\x10\x8B\xC7\x66\x83\xF8\x02\x0F\x82\xDB\xFB\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\xD1\xFB\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x4E\x0D\x66\xF7\xE1\x66\x03\x46\xFC\xBB\x00\x00\x06\x8E\x06\x00\x81\xE8\xBE\xFB\x07\x66\x58\xC1\xEB\x04\x01\x1E\x00\x81\xE8\x0E\x00\x0F\x83\x02\x00\x72\xD0\x8A\x56\x40\xEA\x00\x00\x00\x20\x66\xC1\xE0\x02\xE8\x11\x00\x26\x66\x8B\x01\x66\x25\xFF\xFF\xFF\x0F\x66\x3D\xF8\xFF\xFF\x0F\xC3\xBF\x00\x7E\x66\x0F\xB7\x4E\x0B\x66\x33\xD2\x66\xF7\xF1\x66\x3B\x46\xF4\x74\x3A\x66\x89\x46\xF4\x66\x03\x46\x1C\x66\x0F\xB7\x4E\x0E\x66\x03\xC1\x66\x0F\xB7\x5E\x28\x83\xE3\x0F\x74\x16\x3A\x5E\x10\x0F\x83\x4C\xFB\x52\x66\x8B\xC8\x66\x8B\x46\x24\x66\xF7\xE3\x66\x03\xC1\x5A\x52\x8B\xDF\xB9\x01\x00\xE8\x3E\xFB\x5A\x8B\xDA\xC3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeWIN10FAT
#-#+ Based on Windows 10 DISKMANAGEMENT
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90MSDOS5.0 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \x33\xC9\x8E\xD1\xBC\xF0\x7B\x8E\xD9\xB8\x00\x20\x8E\xC0\xFC\xBD\x00\x7C\x38\x4E\x24\x7D\x24\x8B\xC1\x99\xE8\x3C\x01\x72\x1C\x83\xEB\x3A\x66\xA1\x1C\x7C\x26\x66\x3B\x07\x26\x8A\x57\xFC\x75\x06\x80\xCA\x02\x88\x56\x02\x80\xC3\x10\x73\xEB\x33\xC9\x8A\x46\x10\x98\xF7\x66\x16\x03\x46\x1C\x13\x56\x1E\x03\x46\x0E\x13\xD1\x8B\x76\x11\x60\x89\x46\xFC\x89\x56\xFE\xB8\x20\x00\xF7\xE6\x8B\x5E\x0B\x03\xC3\x48\xF7\xF3\x01\x46\xFC\x11\x4E\xFE\x61\xBF\x00\x00\xE8\xE6\x00\x72\x39\x26\x38\x2D\x74\x17\x60\xB1\x0B\xBE\xA1\x7D\xF3\xA6\x61\x74\x32\x4E\x74\x09\x83\xC7\x20\x3B\xFB\x72\xE6\xEB\xDC\xA0\xFB\x7D\xB4\x7D\x8B\xF0\xAC\x98\x40\x74\x0C\x48\x74\x13\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEF\xA0\xFD\x7D\xEB\xE6\xA0\xFC\x7D\xEB\xE1\xCD\x16\xCD\x19\x26\x8B\x55\x1A\x52\xB0\x01\xBB\x00\x00\xE8\x3B\x00\x72\xE8\x5B\x8A\x56\x24\xBE\x0B\x7C\x8B\xFC\xC7\x46\xF0\x3D\x7D\xC7\x46\xF4\x29\x7D\x8C\xD9\x89\x4E\xF2\x89\x4E\xF6\xC6\x06\x96\x7D\xCB\xEA\x03\x00\x00\x20\x0F\xB6\xC8\x66\x8B\x46\xF8\x66\x03\x46\x1C\x66\x8B\xD0\x66\xC1\xEA\x10\xEB\x5E\x0F > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%+1 \xB6\xC8\x4A\x4A\x8A\x46\x0D\x32\xE4\xF7\xE2\x03\x46\xFC\x13\x56\xFE\xEB\x4A\x52\x50\x06\x53\x6A\x01\x6A\x10\x91\x8B\x46\x18\x96\x92\x33\xD2\xF7\xF6\x91\xF7\xF6\x42\x87\xCA\xF7\x76\x1A\x8A\xF2\x8A\xE8\xC0\xCC\x02\x0A\xCC\xB8\x01\x02\x80\x7E\x02\x0E\x75\x04\xB4\x42\x8B\xF4\x8A\x56\x24\xCD\x13\x61\x61\x72\x0B\x40\x75\x01\x42\x03\x5E\x0B\x49\x75\x06\xF8\xC3\x41\xBB\x00\x00\x60\x66\x6A\x00\xEB\xB0\x42\x4F\x4F\x54\x4D\x47\x52\x20\x20\x20\x20\x0D\x0A\x52\x65\x6D\x6F\x76\x65\x20\x64\x69\x73\x6B\x73\x20\x6F\x72\x20\x6F\x74\x68\x65\x72\x20\x6D\x65\x64\x69\x61\x2E\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\xAC\xCB\xD8\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
#MAYBELATER#:pbrbootcodeWINPEFAT32
##-#+ Based on br_fat32pe...
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90MSWIN4.1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \x33\xC9\x8E\xD1\xBC\xF4\x7B\x8E\xC1\x8E\xD9\xBD\x00\x7C\x88\x4E\x02\x8A\x56\x40\xB4\x08\xCD\x13\x73\x05\xB9\xFF\xFF\x8A\xF1\x66\x0F\xB6\xC6\x40\x66\x0F\xB6\xD1\x80\xE2\x3F\xF7\xE2\x86\xCD\xC0\xED\x06\x41\x66\x0F\xB7\xC9\x66\xF7\xE1\x66\x89\x46\xF8\x83\x7E\x16\x00\x75\x38\x83\x7E\x2A\x00\x77\x32\x66\x8B\x46\x1C\x66\x83\xC0\x0C\xBB\x00\x80\xB9\x01\x00\xE8\x2B\x00\xE9\x48\x03\xA0\xFA\x7D\xB4\x7D\x8B\xF0\xAC\x84\xC0\x74\x17\x3C\xFF\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xEE\xA0\xFB\x7D\xEB\xE5\xA0\xF9\x7D\xEB\xE0\x98\xCD\x16\xCD\x19\x66\x60\x66\x3B\x46\xF8\x0F\x82\x4A\x00\x66\x6A\x00\x66\x50\x06\x53\x66\x68\x10\x00\x01\x00\x80\x7E\x02\x00\x0F\x85\x20\x00\xB4\x41\xBB\xAA\x55\x8A\x56\x40\xCD\x13\x0F\x82\x1C\x00\x81\xFB\x55\xAA\x0F\x85\x14\x00\xF6\xC1\x01\x0F\x84\x0D\x00\xFE\x46\x02\xB4\x42\x8A\x56\x40\x8B\xF4\xCD\x13\xB0\xF9\x66\x58\x66\x58\x66\x58\x66\x58\xEB\x2A\x66\x33\xD2\x66\x0F\xB7\x4E\x18\x66\xF7\xF1\xFE\xC2\x8A\xCA\x66\x8B\xD0\x66\xC1\xEA\x10\xF7\x76\x1A\x86\xD6\x8A\x56\x40\x8A\xE8\xC0\xE4\x06\x0A\xCC\xB8 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=346 %target%+1 \x01\x02\xCD\x13\x66\x61\x0F\x82\x54\xFF\x81\xC3\x00\x02\x66\x40\x49\x0F\x85\x71\xFF\xC3\x4E\x54\x4C\x44\x52\x20\x20\x20\x20\x20\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0D\x0A\x4E\x54\x4C\x44\x52\x20\x69\x73\x20\x6D\x69\x73\x73\x69\x6E\x67\xFF\x0D\x0A\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\xFF\x0D\x0A\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xAC\xBF\xCC\x00\x00\x55\xAA > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6144 %target%+13 \x66\x0F\xB6\x46\x10\x66\x8B\x4E\x24\x66\xF7\xE1\x66\x03\x46\x1C\x66\x0F\xB7\x56\x0E\x66\x03\xC2\x66\x89\x46\xFC\x66\xC7\x46\xF4\xFF\xFF\xFF\xFF\x66\x8B\x46\x2C\x66\x83\xF8\x02\x0F\x82\xA6\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\x9C\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x5E\x0D\x8B\xF3\x66\xF7\xE3\x66\x03\x46\xFC\xBB\x00\x82\x8B\xFB\xB9\x01\x00\xE8\x87\xFC\x38\x2D\x74\x1E\xB1\x0B\x56\xBE\x70\x7D\xF3\xA6\x5E\x74\x1B\x03\xF9\x83\xC7\x15\x3B\xFB\x72\xE8\x4E\x75\xDA\x66\x58\xE8\x65\x00\x72\xBF\x83\xC4\x04\xE9\x55\xFC\x00\x20\x83\xC4\x04\x8B\x75\x09\x8B\x7D\x0F\x8B\xC6\x66\xC1\xE0\x10\x8B\xC7\x66\x83\xF8\x02\x0F\x82\x3A\xFC\x66\x3D\xF8\xFF\xFF\x0F\x0F\x83\x30\xFC\x66\x50\x66\x83\xE8\x02\x66\x0F\xB6\x4E\x0D\x66\xF7\xE1\x66\x03\x46\xFC\xBB\x00\x00\x06\x8E\x06\x81\x80\xE8\x1D\xFC\x07\x66\x58\xC1\xEB\x04\x01\x1E\x81\x80\xE8\x0E\x00\x0F\x83\x02\x00\x72\xD0\x8A\x56\x40\xEA\x00\x00\x00\x20\x66\xC1\xE0\x02\xE8\x11\x00\x26\x66\x8B\x01\x66\x25\xFF\xFF\xFF\x0F\x66\x3D\xF8\xFF\xFF\x0F\xC3\xBF\x00\x7E\x66\x0F\xB7\x4E\x0B\x66\x33 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=6400 %target%+13 \xD2\x66\xF7\xF1\x66\x3B\x46\xF4\x74\x3A\x66\x89\x46\xF4\x66\x03\x46\x1C\x66\x0F\xB7\x4E\x0E\x66\x03\xC1\x66\x0F\xB7\x5E\x28\x83\xE3\x0F\x74\x16\x3A\x5E\x10\x0F\x83\xAB\xFB\x52\x66\x8B\xC8\x66\x8B\x46\x24\x66\xF7\xE3\x66\x03\xC1\x5A\x52\x8B\xDF\xB9\x01\x00\xE8\x9D\xFB\x5A\x8B\xDA\xC3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeREACTOSFAT
#-#+ Based on fat.bin on ReactOS-0.4.14-release-110-g3aedb6e.iso
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x3C\x90\x46\x72\x4C\x64\x72\x31\x2E\x30 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%+1 \x31\xC0\x8E\xD0\xBD\x00\x7C\xBC\xF0\x7B\x8E\xD8\x8E\xC0\x80\xBE\x24\x00\xFF\x75\x04\x88\x96\x24\x00\xB4\x08\x8A\x96\x24\x00\xCD\x13\x73\x05\xB9\xFF\xFF\x88\xCE\x88\xEB\x88\xCF\xC0\xEF\x06\x80\xE1\x3F\x66\x0F\xB6\xC6\x66\x0F\xB7\xDB\x66\x0F\xB6\xC9\x66\x40\x66\x43\x66\xF7\xE1\x66\xF7\xE3\x66\x89\x46\xF8\x31\xC0\x31\xC9\x8A\x86\x10\x00\xF7\xA6\x16\x00\x03\x86\x1C\x00\x13\x96\x1E\x00\x03\x86\x0E\x00\x11\xCA\x89\x46\xFC\x89\x56\xFE\x8B\xB6\x11\x00\x60\x31\xD2\xB8\x20\x00\xF7\xE6\x8B\x9E\x0B\x00\x01\xD8\x48\xF7\xF3\x01\x46\xFC\x11\x4E\xFE\x61\xBB\xE0\x07\x8E\xC3\x31\xDB\x31\xC9\x41\x31\xFF\x06\xE8\x75\x00\x07\x26\x38\x2D\x74\x3A\x60\xB1\x0B\xBE\xE6\x7D\xF3\xA6\x61\x74\x0E\x4E\x74\x2C\x83\xC7\x20\x81\xFF\x00\x02\x72\xE4\xEB\xD1\x26\x8B\x45\x1A\x50\x68\x80\x0F\x07\xE8\x38 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=256 %target%+1 \x00\x58\xC7\x46\xF6\x4B\x7D\xC7\x46\xF4\x39\x7D\xC7\x46\xF2\x22\x7D\xEA\x03\xF8\x00\x00\xBE\xD6\x7D\xE8\x06\x00\x31\xC0\xCD\x16\xCD\x19\xAC\x08\xC0\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xF2\xC3\xBE\xC9\x7D\xE8\xEB\xFF\xEB\xE3\x48\x48\x30\xED\x8A\x8E\x0D\x00\xF7\xE1\x03\x46\xFC\x13\x56\xFE\x31\xDB\x60\x49\x01\xC8\x83\xD2\x00\x3B\x56\xFA\x77\x07\x72\x33\x3B\x46\xF8\x76\x2E\x61\x60\x6A\x00\x6A\x00\x52\x50\x06\x53\x6A\x01\x6A\x10\x89\xE6\x8A\x96\x24\x00\xB4\x42\xCD\x13\x72\xB9\x83\xC4\x10\x61\x40\x83\xD2\x00\x53\x8C\xC3\x83\xC3\x20\x8E\xC3\x5B\xE2\xD4\xC3\x61\x60\x91\x92\x31\xD2\xF7\xB6\x18\x00\x91\xF7\xB6\x18\x00\x42\x87\xD1\xF7\xB6\x1A\x00\x88\xD6\x8A\x96\x24\x00\x88\xC5\xC0\xCC\x02\x08\xE1\xB8\x01\x02\xCD\x13\x0F\x82\x79\xFF\x61\x40\x75\x01\x42\x53\x8C\xC3\x83\xC3\x20\x8E\xC3\x5B\xE2\xC5\xC3\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\x0D\x0A\x00\x4C\x64\x72\x20\x6E\x6F\x74\x20\x66\x6F\x75\x6E\x64\x0D\x0A\x00\x46\x52\x45\x45\x4C\x44\x52\x20\x53\x59\x53\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:pbrbootcodeREACTOSFAT32
#-#+ Based on fat32.bin on ReactOS-0.4.14-release-110-g3aedb6e.iso
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x58\x90\x46\x72\x4C\x64\x72\x31\x2E\x30 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=90 %target%+1 \x31\xC0\x8E\xD8\x8E\xC0\x8E\xD0\xBD\x00\x7C\xBC\x00\x7C\x80\xBE\x40\x00\xFF\x75\x04\x88\x96\x40\x00\x83\xBE\x16\x00\x00\x75\x0F\x66\x83\xBE\x11\x00\x00\x75\x07\x83\xBE\x2A\x00\x00\x76\x03\xE9\x07\x01\xB8\x00\x08\x8A\x96\x40\x00\xCD\x13\x73\x05\xB9\xFF\xFF\x88\xCE\x88\xEB\x88\xCF\xC0\xEF\x06\x80\xE1\x3F\x66\x0F\xB6\xC6\x66\x0F\xB7\xDB\x66\x0F\xB6\xC9\x66\x40\x66\x43\x66\xF7\xE1\x66\xF7\xE3\x66\xA3\xB4\x7D\x66\xB8\x0E\x00\x00\x00\x66\x03\x86\x1C\x00\xB9\x01\x00\x31\xDB\x8E\xC3\xBB\x00\x7E\xE8\x03\x00\xE9\x25\x01\x06\x66\x3B\x06\xB4\x7D\x73\x1C\x66\x60\xB4\x41\xBB\xAA\x55\x8A\x96\x40\x00\xCD\x13\x72\x57\x81\xFB\x55\xAA\x75\x51\xF6\xC1\x01\x74\x4C\x66\x61\x66 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=256 %target%+1 \x60\x83\xF9\x40\x76\x03\xB9\x40\x00\x89\x0E\x45\x7D\x6A\x00\x6A\x00\x66\x50\x06\x53\x51\x6A\x10\x89\xE6\x8A\x96\x40\x00\xB4\x42\xCD\x13\x72\x67\x83\xC4\x10\x66\x61\x53\x66\x8B\x1E\x45\x7D\x66\x01\xD8\x66\xC1\xE3\x05\x8C\xC2\x01\xDA\x8E\xC2\x5B\x2B\x0E\x45\x7D\x75\xBC\x07\xC3\x00\x00\x00\x00\x66\x61\x66\x60\x66\x31\xD2\x66\x0F\xB7\x8E\x18\x00\x66\xF7\xF1\xFE\xC2\x88\xD1\x66\x89\xC2\x66\xC1\xEA\x10\xF7\xB6\x1A\x00\x88\xD6\x8A\x96\x40\x00\x88\xC5\xD0\xCC\xD0\xCC\x08\xE1\xB8\x01\x02\xCD\x13\x72\x0E\x66\x61\x66\x40\x8C\xC2\x83\xC2\x20\x8E\xC2\xE2\xC1\xC3\xBE\xB8\x7D\xE8\x14\x00\xEB\x06\xBE\xC5\x7D\xE8\x0C\x00\xBE\xD9\x7D\xE8\x06\x00\x31\xC0\xCD\x16\xCD\x19\xAC\x08\xC0\x74\x09\xB4\x0E\xBB\x07\x00\xCD\x10\xEB\xF2\xC3\x00\x00\x00\x00\x44\x69\x73\x6B\x20\x65\x72\x72\x6F\x72\x0D\x0A\x00\x46\x69\x6C\x65\x20\x73\x79\x73\x74\x65\x6D\x20\x65\x72\x72\x6F\x72\x0D\x0A\x00\x50\x72\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x72\x65\x73\x74\x61\x72\x74\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=7168 %target%+15 \x66\x8B\x86\x2C\x00\x66\x3D\xF8\xFF\xFF\x0F\x72\x03\xE9\x6C\x01\xBB\x00\x20\x8E\xC3\xE8\x26\x01\x31\xDB\x8A\x9E\x0D\x00\xC1\xE3\x04\xB8\x00\x20\x8E\xC0\x31\xFF\xBE\x9D\x7F\xB9\x0B\x00\xF3\xA6\x74\x2B\x4B\x75\x03\xE9\x44\x01\x8C\xC0\x83\xC0\x02\x8E\xC0\x31\xFF\xBE\x9D\x7F\xB9\x0B\x00\xF3\xA6\x74\x12\x4B\x75\xEA\x66\x8B\x86\x2C\x00\xE8\x6C\x00\x66\x89\x86\x2C\x00\xEB\xA3\xBE\xA8\x7F\xE8\x42\xFF\x31\xFF\x31\xD2\x26\x8B\x45\x14\x66\xC1\xE0\x10\x26\x8B\x45\x1A\x66\x83\xF8\x02\x73\x03\xE9\x17\xFF\x66\x3D\xF8\xFF\xFF\x0F\x72\x03\xE9\x0C\xFF\xBB\x80\x0F\x8E\xC3\x66\x3D\xF8\xFF\xFF\x0F\x73\x21\x66\x50\x31\xDB\x06\xE8\xA2\x00\x07\x31\xDB\x8A\x9E\x0D\x00\xC1\xE3\x05\x8C\xC0\x01\xD8\x8E\xC0\x66\x58\x06\xE8\x10\x00\x07\xEB\xD7\x8A\x96\x40\x00\x8A\x36\xFD\x7D\xEA\x00\xF8\x00\x00\x66\xC1\xE0\x02\x66\x89\xC1\x66\x31\xD2\x66\x0F\xB7\x9E\x0B\x00\x66\x53\x66\xF7\xF3\x66\x0F\xB7\x9E\x0E\x00\x66\x01\xD8\x66\x8B\x9E\x1C\x00\x66\x01\xD8\x66\x5B\x66\x4B\x66\x21\xD9\x66\x0F\xB7\x9E\x28\x00\x83\xE3\x0F\x74\x18\x3A\x9E\x10\x00\x72\x03 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=7424 %target%+15 \xE9\x90\xFE\x66\x50\x66\x8B\x86\x24\x00\x66\xF7\xE3\x66\x5A\x66\x01\xD0\x66\x51\xBB\x00\x90\x8E\xC3\x66\x3B\x06\x3A\x7F\x74\x0C\x66\xA3\x3A\x7F\x31\xDB\xB9\x01\x00\xE8\xAF\xFD\x66\x59\x26\x67\x66\x8B\x01\x66\x25\xFF\xFF\xFF\x0F\xC3\xFF\xFF\xFF\xFF\x66\x48\x66\x48\x66\x31\xD2\x66\x0F\xB6\x9E\x0D\x00\x66\xF7\xE3\x66\x50\x66\x31\xD2\x66\x0F\xB6\x86\x10\x00\x66\xF7\xA6\x24\x00\x66\x0F\xB7\x9E\x0E\x00\x66\x01\xD8\x66\x03\x86\x1C\x00\x66\x5B\x66\x01\xD8\x31\xDB\x0F\xB6\x8E\x0D\x00\xE8\x60\xFD\xC3\xBE\x85\x7F\xE8\x23\xFE\xE9\x14\xFE\x66\x72\x65\x65\x6C\x64\x72\x2E\x73\x79\x73\x20\x6E\x6F\x74\x20\x66\x6F\x75\x6E\x64\x0D\x0A\x00\x46\x52\x45\x45\x4C\x44\x52\x20\x53\x59\x53\x4C\x6F\x61\x64\x69\x6E\x67\x20\x46\x72\x65\x65\x4C\x6F\x61\x64\x65\x72\x2E\x2E\x2E\x0D\x0A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
#BAD#:pbrbootcodeFREEDOS33
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%%0+1 \xEB\x3C\x90FRDOS5.1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=62 %target%%0+1 \xFA\xFC\x31\xC0\x8E\xD8\xBD\x00\x7C\xB8\xE0\x1F\x8E\xC0\x89\xEE\x89\xEF\xB9\x00\x01\xF3\xA5\xEA\x5E\x7C\xE0\x1F\x00\x00\x60\x00\x8E\xD8\x8E\xD0\x8D\x66\xA0\xFB\x80\x7E\x24\xFF\x75\x03\x88\x56\x24\xC7\x46\xC0\x10\x00\xC7\x46\xC2\x01\x00\xE8\xE6\x00\x46\x72\x65\x65\x44\x4F\x53\x00\x8B\x76\x1C\x8B\x7E\x1E\x03\x76\x0E\x83\xD7\x00\x89\x76\xD2\x89\x7E\xD4\x8A\x46\x10\x98\xF7\x66\x16\x01\xC6\x11\xD7\x89\x76\xD6\x89\x7E\xD8\x8B\x5E\x0B\xB1\x05\xD3\xEB\x8B\x46\x11\x31\xD2\xF7\xF3\x89\x46\xD0\x01\xC6\x83\xD7\x00\x89\x76\xDA\x89\x7E\xDC\x8B\x46\xD6\x8B\x56\xD8\x8B\x7E\xD0\xC4\x5E\x5A\xE8\x98\x00\x72\x2F\xC4\x7E\x5A\xB9\x0B\x00\xBE\xF1\x7D\x57\xF3\xA6\x5F\x26\x8B\x45\x1A\x74\x0B\x83\xC7\x20\x26\x80\x3D\x00\x75\xE7\x72\x56\x50\xC4\x5E\x5A\x8B\x7E\x16\x8B\x46\xD2\x8B\x56\xD4\xE8\x68\x00\x58\x72\x43\x1E\x07\x8E\x5E\x5C\xBF\x00\x20\xAB\x89\xC6\x8B\x56\x5C\x01\xF6\x73\x03\x80\xC6\x10\x8E\xDA\xAD\x3D\xF8\xFF\x72\xEB\x31\xC0\xAB\x0E\x1F\xC4\x5E\x5A\xBE\x00\x20\xAD\x09\xC0\x74\x24\x48\x48\x8B\x7E\x0D\x81\xE7\xFF\x00\xF7\xE7\x03 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=318 %target%%0+1 \x46\xDA\x13\x56\xDC\xE8\x24\x00\x73\xE5\xE8\x17\x00\x20\x65\x72\x72\x00\x30\xE4\xCD\x16\xCD\x19\x8A\x5E\x24\xFF\x6E\x5A\x31\xDB\xB4\x0E\xCD\x10\x5E\xAC\x56\x3C\x00\x75\xF3\xC3\x56\x89\x46\xC8\x89\x56\xCA\x8C\x46\xC6\x89\x5E\xC4\xB4\x41\xBB\xAA\x55\x8A\x56\x24\x84\xD2\x74\x19\xCD\x13\x72\x15\xD1\xE9\x81\xDB\x54\xAA\x75\x0D\x8D\x76\xC0\x89\x5E\xCC\x89\x5E\xCE\xB4\x42\xEB\x2C\x8B\x4E\xC8\x8B\x56\xCA\x8A\x46\x18\xF6\x66\x1A\x91\xF7\xF1\x92\xF6\x76\x18\x89\xD1\x88\xC6\x86\xE9\xD0\xC9\xD0\xC9\x8A\x46\x18\x28\xE0\xFE\xC4\x08\xE1\xC4\x5E\xC4\xB8\x01\x02\x8A\x56\x24\xCD\x13\x73\x06\x30\xE4\xCD\x13\xEB\xA2\x8B\x46\x0B\xF6\x76\xC0\x01\x46\xC6\x83\x46\xC8\x01\x83\x56\xCA\x00\x4F\x75\xEA\x8E\x46\xC6\x5E\xC3\x00\x00\x00\x4B\x45\x52\x4E\x45\x4C\x20\x20\x53\x59\x53\x00\x00\x55\xAA > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
#:pbrbootcode....
setlocal && set *
set "target=%~1"
raw write --offset=0 %target%+1 \xEB\x..\x90OEMNAMEX > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=.. %target%+1 > nul && set result=1 ! set result=0
if not %result%==0 &; raw write --offset=.. %target%+... > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
#==========================================================================
# End of SUB-ROUTINES of :writepbrbootcode # Start of general SUB-ROUTINES #
#==========================================================================
:read
#-#+ Function: read 4 bytes in litte endian order from disk and return as hex
#-# Use: call :read ADDRESS FILE
#-# Remark: if less than 4 bytes needed, use AFTER returning from the call 'set /A result=%result%0xff' up to 'set /A result=%result%0xffffffff' (each 'ff' = 1 byte and ONE 'f' is a nibble)
setlocal && set LE= && set result=
set /A skip=%~1 &; set /a s=%@retval%
raw cat --hex --skip=%skip% --length=4 %~2 | set LE= &; if %s%<=10 && set "LE=%LE:~10,11%" ! call set "LE=%^LE:~%s%,11%" &; if "%LE:~0,1%"==" " && set "LE=%LE:~1%"
if not "%LE:~9,1%"==" " && set result=0x%LE:~9,2%%%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~6,1%"==" " && set result=0x%LE:~6,2%%%LE:~3,2%%%LE:~0,2% ! if not "%LE:~3,1%"==" " && set result=0x%LE:~3,2%%%LE:~0,2% ! if not "%LE:~0,1%"==" " && set result=0x%LE:~0,2%
endlocal && set result=%result%
goto :eof
::
:write
#-#+ Function: write max 4 bytes as litte endian to disk and return result
#-# Use:  call :write [--bytes=1-4] ADDRESS FILE VALUE
setlocal && set *
if /i "%~3"=="--bytes" && endlocal && set result=0 && goto :eof
if /i "%~1"=="--bytes" && set "bytes=--bytes=%~2" && shift && shift
set /A LE=%~3 &; set LE=00000000%LE:~2% &; set LE=\x%LE:~-2,2%\x%LE:~-4,2%\x%LE:~-6,2%\x%LE:~-8,2%
if /i "%~1"=="--bytes" && endlocal && set result=0 && goto :eof
raw write %bytes% --offset=%~1 %~2 %LE% > nul && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:wipesector
#-#+ UNUSED FOR NOW
if "%~1"=="" && set result=0 && goto :eof
setlocal && set *
set "address=%~1"
set "target=%~2"
raw write --offset=%address% %target% \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0 &; if %result%==0 && endlocal && set result=%result% && goto :eof
set /A address=%address%+256
raw write --offset=%address% %target% \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 > nul
if %@retval%>=1 && set result=1 ! set result=0
endlocal && set result=%result%
goto :eof
::
:SFN
set mdbase=0x300
if "%~1"=="PATH" && echo -n > (md)%mdbase%+1 && pause --wait=0 %~2 > (md)%mdbase%+1 && raw cat --locate=\x3D --replace=? (md)%mdbase%+1 > nul && raw cat --locate=\x2F --replace=\x0A (md)%mdbase%+1 > nul && cat (md)%mdbase%+1 | call :SFNFILE &; goto :eof
if "%~1"=="FILE" && shift
:SFNFILE
set "name=%~n1" &; echo -e "%name%" | set name= &; set "name=%name:~1,-1%" &; set /a namelen=%@retval% &; if not exist name && goto :eof ! if not %namelen%<=8 && set SFN=N && goto :eof
set "ext=%~x1" &; echo -e "%ext%" | set ext= &; set "ext=%ext:~1,-1%" &; set /a extlen=%@retval% &; if not %extlen%<=4 && set SFN=N && goto :eof ! set "ext=%ext:~1%"
call :SFNCHAR "\x20" "." "+" "," ";" "?" "[" "]" &; if %SFN%==N && goto :eof ! if not "%~2"=="" && shift && goto :SFNFILE ! goto :eof
::
:SFNCHAR
call Fn.11 "%name%" "%~1" && set SFN=N && goto :eof
call Fn.11 "%ext%" "%~1" && set SFN=N && goto :eof
if "%~2"=="" && goto :eof ! shift && goto :SFNCHAR
::
:Fn.4
#-#+ Sub-routine to call Fn.4 - h is max 0-255 chars per line, position (h,v) (0,0) is 0 and (0,1) is 256 (in grub4efi text mode 20221128+30: 16 & h max +64, on some line h is always the same ?!)
#-# Use: call :Fn.4
call Fn.4 ;; set /A h=%@retval% ;; set /a v=%h%>>8 ;; set /a h=%h%&0xff
goto :eof
::
:Fn.5
#-#+ Sub-routine to call Fn.5 - %~1=h, %~2=v
#-# Use: call :Fn.5 "%h%" "%v%"
call Fn.5 %~1 %~2
goto :eof
::
:lsspaces
#-#+ Needed for spaced LFN's
setlocal
set mdbase=0x300
set "ARG=%~1"
pause --wait=0 "%~2" > (md)%mdbase%+1
set numspace= && set skip=1
raw cat --locate=\x20 (md)%mdbase%+1 > nul ;; set /a numspace=%@retval% > nul
#NOTNOW#if %numspace%==0 && raw cat (md)%mdbase%+1 | set %ARG%= &; call set "%ARG%=%%%^ARG:~1,-1%%%" &; endlocal && call set "%ARG%=%%%ARG%%%" && goto :eof
if %numspace%==0 && if "%~1"=="PATH" && raw cat (md)%mdbase%+1 | set PATH= &; set "PATH=%PATH:~1,-1%" &; endlocal && set "PATH=%PATH%" && goto :eof
if %numspace%==0 && if "%~1"=="ARGNAME" && raw cat (md)%mdbase%+1 | set ARGNAME= &; set "ARGNAME=%ARGNAME:~1,-1%" &; endlocal && set "ARGNAME=%ARGNAME%" && goto :eof
if %numspace%==0 && if "%~1"=="ARGEXT" && raw cat (md)%mdbase%+1 | set ARGEXT= &; set "ARGEXT=%ARGEXT:~1,-1%" &; endlocal && set "ARGEXT=%ARGEXT%" && goto :eof
:looplsspaces
raw cat --skip=%skip% --locate=\x20 --number=1 (md)%mdbase%+1 > nul &; set /a skip=%?% > nul
set /A seek=%skip%+1 > nul
raw dd if=(md)%mdbase%+1 of=(md)%mdbase%+1 bs=1 skip=%skip% seek=%seek% > nul
raw cat --skip=%skip% --locate=\x20 --replace=\x5C --number=1 (md)%mdbase%+1 > nul
set /a numspace=%numspace%-1 > nul
#NOTNOW#if %numspace%==0 && raw cat (md)%mdbase%+1 | set %ARG%= &; call set "%ARG%=%%%^ARG:~1,-1%%%" &; endlocal && call set "%ARG%=%%%ARG%%%" && goto :eof
if %numspace%==0 && if "%~1"=="PATH" && raw cat (md)%mdbase%+1 | set PATH= &; set "PATH=%PATH:~1,-1%" &; endlocal && set "PATH=%PATH%" && goto :eof
if %numspace%==0 && if "%~1"=="ARGNAME" && raw cat (md)%mdbase%+1 | set ARGNAME= &; set "ARGNAME=%ARGNAME:~1,-1%" &; endlocal && set "ARGNAME=%ARGNAME%" && goto :eof
if %numspace%==0 && if "%~1"=="ARGEXT" && raw cat (md)%mdbase%+1 | set ARGEXT= &; set "ARGEXT=%ARGEXT:~1,-1%" &; endlocal && set "ARGEXT=%ARGEXT%" && goto :eof
set /A skip=%skip%+2 > nul
goto :looplsspaces
::
:help
clear
pager on
echo MKFATIMG.G4B v0.7 (20250910), by deomsh
echo Use 1:    MKFATIMG.G4B --size=n|--sectors=N|--CHS=C/H/S FILE switches
echo && echo Switches: [/HDD|/FDD] [/FAT12[:nk]|/FAT16[:nk]|/FAT32[:nk]] [/V:VOLUMENAME]
echo $[]          [/BOOT[:OS]] [/NOTACTIVE] [/LOG] [/CON] [/R] [/SPT:S] [/HEADS:H]
echo $[]          [/ROOTENTR:n] [/RSRV:n] [/SPC:n] [/NOTRM] [/FHD] [/HIDDSEC:n]
echo $[]          [/RDBASE:n] [/RDSIZE:n] [/HIDDSEC:n] [/Q|/T] [/Y]
echo && echo Use 2:    MKFATIMG.G4B FILE /F:floppysize switches
echo && echo Switches: [/V:VOLUMENAME] [/BOOT[:OS]] [/FAT16|/FAT32] [/CON] [/RSRV:n]
echo $[]          [/ROOTENTR:n] [/NOTRM] [/FHD] [/HIDDSEC:n] [/RDBASE:n] [/Q|/T] [/Y]
echo && echo Use 3:    MKFATIMG.G4B FILE /D:disktype switches
echo && echo Switches: [/SPT:S] [/HEADS:H] [/LOG] [/BOOT[:OS]] [/NOTACTIVE] [/R] [/CON]
echo $[]          [/FAT12|/FAT16|/FAT32] [/V:VOLUMENAME] [/ROOTENTR:n] [/RSRV:n]
echo $[]          [/RDBASE:n] [/Q|/T] [/Y]
echo && echo Use 4:    MKFATIMG.G4B FILE /COPY [/CON] [/Q|/T] [/Y]
#MAYBE#echo Use 4:    MKFATIMG.G4B FILE /COPY [/CON] [/RD:n|/FILE2] [/Q|/T] [/Y]
echo && echo Help:     MKFATIMG.G4B /?|--?|?
echo && echo Only the order of switches is free, all arguments are case-insensitive
echo Mandatory Arguments:
echo Use 1:
echo OR --size=n => n in bytes, k, m, g can be used => rounded down to balance C/H/S
#CHECK#
echo $[] FAT12: 160k-127m; FAT16: 2185k-2047m ; FAT32: 34m-4097m (higher on (rd) only)
echo $[] With FAT16 2g is accepted, with FAT32 4g => are rounded down
echo OR --sectors=N => N as number, k, m can be used; rounded down to balance C/H/S
#CHECK#
echo $[] FAT12: 320-261432; FAT16: 4370-4194302; FAT32: 66640-8388606
echo OR --CHS=C/H/S => force CHS (FAT-type depending on total sectors)
echo $[] Max: C=1024, H=255, S=63 (with MBR max C=1025, alway one empty test-cylinder)
echo FILE is name of image to be created, OR (rd) - 'Use 4': no (rd)!
echo $[] Only Short File Names in FILE (8+3) UNLESS libraries FATLFN.LLL & ATTRIBFT.LLL
echo $[]  can be loaded with insmod (or are loaded already with FULL names!)
echo $[] Extension = .IMG/.IMA/.RAW/.BIN/.HDD/.VMDK only!
echo $[]  (.HDD: FAT12 & max 15.98m on VBOX6, not on VBOX7 anymore)
#ORG#echo $[] Extension = .IMG/.IMA/.RAW/.BIN/.HDD only! (.HDD: FAT12 & max 15.98m on VBOX)
echo $[] DEVICE and PATH can be added freely, otherwise on current root
echo $[] Image-file creation on FAT-devices only!
echo && echo Use 2:
echo /F:floppysize => 4, 8, 12, 14, 16, 24, 28, 32, 64, 128, 160, 180, 320, 360, 400
echo $[] 640, 720, 800, 820, 1200, 1440, 1600, 1680, 1760, 1840, 1920, 2400, 2880, 3120
echo $[] 3200, 3520, 3600, 3825, 3840, 4320, 4590, 4800, 5760, 6000, 7200, 8100, 8400
echo $[] 8640, 9180, 9600, 10080, 10800, 11520, 12000, 12240, 12960, 13200, 14400, 15m
echo $[] 15840, 17280, 18m, 20160, 20385, 21m, 23040, 25920, 28800, 31680, 34560, 36m
echo $[] 120m, 240m (with 'm' in MB, otherwise always KB, 'k' is not needed here)
echo && echo Use 3:
echo /D:disktype => disktype: number in range 1-14 or 16-44 (IBM PC AT/ PS/2)
echo $[] C/H/S of HDD is predefined, size too (Sectors Per Track 17, or 25-39)
echo $[] Use /HEADS:N and/ or /SPT:S to change partition geometry
echo && echo Use 4:
echo /COPY => if set, FULL content of ram-disk will be copied to image-file
echo $[] If image-file not exists, image-file will be created (FAT only)
echo $[] Image-file with wrong size will be deleted and new image will be created
echo && echo Optional Arguments:
echo /FAT12 or /FAT16 or /FAT32 to force FATTYPE
echo $[] Without switch auto-set: up to 16MB FAT12, up to 512MB FAT16 and FAT32 above
echo $[] Alignment of FAT with /FAT12:nk (n=1,2), /FAT16:nk, /FAT32:nk (n=1,2,4,8,16)
echo /HDD|/FDD => hd-image with MBR or fd-image with PBR only
echo $[] Without switch auto-set: below 4MB FDD, above HDD
echo $[] Predefined floppies: see 'Use 2'; predefined fixed disks: see 'Use 3'
echo $[] fd-image always set as removable disk/ media, see switches /FHD and or /NOTRM
echo /V:VOLUMENAME => VOLUMENAME max. 11 legitimate characters
echo /BOOT => auto-write MS-DOS 3.3/7.1 MBR (with HDD) and PBR bootcode
echo $[] On FAT12/16 standard MS-DOS 3.3 (old) MBR
echo /BOOT:OS OS: MSDOS33 MSDOS40 MSDOS50 MSDOS70 MSDOS71 NT5 VISTA WIN7 WIN8 WIN10
echo $[] FREEDOS REACTOS GRUB (GRUB bootcode in PBR only, MBR is standard bootcode)
#TOTEST#: ZERO
echo $[] If MSDOS71 is forced, always in MBR; PBR is auto, depending on FAT-type
echo $[] If MSDOS70 is forced, WINBOOT.SYS included in HDD too (default FDD only)
echo $[] Bootcodes MSDOS33/MSDOS40/MSDOS50/MSDOS70 is not compatible with FAT32
echo $[] Boot code of NT5 is same for W2K and XP
echo $[] Without switch '/BOOT[:OS]' zerood, jump/OEM in PBR set to 'EB0090/IBM  2.0'
#BAD# 3600=>0xF0; 820=>0xF9;
echo /CON => if set contiguous image creation (max 10 attempts), not needed on (rd)
echo $[] All non-contiguous images will be renamed with extension .BK0-9 (auto-removed)
#ORG#echo $[]  (should be removed afterwards automatically)
echo /HEADS:N => force number of heads between 1-255
echo /SPT:N => force sectors per track. Floppies: 8-63. Fixed disk: 17-63
echo /ROOTENTR:n => set number of Root Directory Entries on FAT12/ FAT16
echo $[]               On FAT32 Reserved Root Entries (n=0-65536)
echo $[] Rounded down to multiples of 16 (option with switch '/F:floppysize' too)
#DoLater#echo /ROOTCLUS:n => set First Root Clusters on FAT32 (n=2-63m default=2)
echo /RSRV:n => set number of reserved sectors before start of first FAT (ignored
echo $[]  with switch '/F:floppysize')
echo $[] FAT12/16: 1-65535; FAT32: 32-65535 (maximum should be 16-bits = 0xFFFF)
echo /SPC:n => set number sectors per cluster, n=1-128 (powers of two!)
echo $[] Warning: 128 Sectors per Cluster NOT compatible wit MS-DOS' Scandisk!
#ORG#echo /SPC:n => set number sectors per cluster, n=1-64 (powers of two!)
#MaybeLater#echo /SPC:n => set number sectors per cluster, n=1-128
echo /RDBASE:n => set base memory of used ram-disk, n=(k/m/g)bytes
echo $[] Minimum value 64MB: /RDBASE:64m (default 290MB)
#NotAlwaysStableII#echo $[] Minimum value 64MB: /RDBASE:64m (default 256MB)
#NotAlwaysStableI#echo $[] Minimum value 32MB: /RDBASE:32m (default 64MB)
#NONEED##echo $[] Memory needed: base + full size if FILE=(rd), otherwise + max 16-24MB
#FORNOWmax4g#
echo /RDSIZE:n => set max memory-size of used ram-disk, n=(k/m/g)bytes|MAX (max 4g)
echo /Q => quiet operation, exports ONE variable only: 'result' (=1/0)
echo $[] No confirmations if image-files/ ram-disk exist: overwritten, or newly created
echo /T => talkative operation, more confirmations needed too
echo /Y => supress Make/ Overwrite dialogs (use with /Q: silent overwrite file too)
echo && echo Optional Arguments HDD only (for FDD ignored):
echo /NOTACTIVE => if set, hd-image will not be bootable, i.e. not 'active'
echo $[] (0x00 in MBR instead of 0x80)
echo $[] Without /BOOT hd-image ALWAYS set not 'active'
echo /LOG to make logical partition on hd-image ('hidden sectors': absolute offset)
echo /R to make MBR on hd-image read-only (DISKPART-style at 0x400)
echo && echo Optional Arguments FDD only (for HDD ignored):
echo /NOTRM => NOT Removable Media: Mediabyte=0xF8 (default floppy=0xF0, 0xF9-0xFF)
echo $[] Floppy with Mediabyte '0xF8' can have problems mounting in GRUB4DOS!
echo $[] Map to floppy changes back to 0xF0, can not be overwitten if --unsafe-boot set
#???#echo With /F:floppies: arguments /RM and Mediabyte auto-set with sizes above 4MB
#??#echo $[] FAT12 too if not otherwise specified
echo /FHD => set Floppy Disk Drive Number to 0x80 (default 0x00)
echo /HIDDSEC:n set false number of hidden sectors on Floppy Disk Drive (default 0)
#NOTNOW#echo $[] Map to floppy changes back to 0, but Mediabyte remains (experimental)
echo && echo Remarks:
echo Hard disk/ Ram-disk image with MBR: always written with ONE reserved cylinder
echo Hard disk image: always CHS partition types used (0x1, 0x4, 0x6, 0xB, LOG:0x5)
echo MBR Ram-disk images: > 1025 cylinders LBA partition types (0xE, 0xC, LOG:0xF)
echo $[] With switch '--CHS=C/H/S' include extra ending cylinder manually if desired
echo $[] Without switch /BOOT[:OS] MBR (and EBR) is never set active
echo && echo Grub4dos version 2017-08-30 or higher, compatible with Grub4dos for UEFI
echo Grubutil FAT needed in: (bd)/%^~d0, /, /grub, /boot/grub, /g4dll or current root
echo $[] Use FAT version from 2023, april or later for writing images >2GB
echo Long File Names with libraries: FATLFN.LLL (>=v0.3) and ATTRIBFT.LLL (>=v0.9)
echo $[] Libraries searched in: (bd)/%^~d0, /, /grub, /boot/grub, /g4dll or current root
echo && echo Default memory size 64MB + size of image; max 16-24MB used if FILE is NOT (rd)
echo $[] Used memory: 0x300+1 (one sector), needed memory starting at 0x91000 (default)
#ORG#echo $[] Used memory: 0x300+1 (one sector), needed memory starting at 0x20000 (default)
echo && echo Exported variables: result (1/0); RAMDISK (imgsize, rdbase, rdsize, disk, LOG)
echo $[] Needed if making image in (rd) first, copied to file-on-disk later => 'Use 4'
echo && echo Floppy media type: >=1440=>0xF0; 1200=>0xF9; 820=>0xF0; 800=>0xF0; 720=>0xF9
##CHECK!#, 820, 800, 600)
#NOTE# Scandisk changes Mediabyt in FAT to: 160 => FE; 180 => FC; 320 => FF
echo $[]           640=>0xFB; 400=>0xFD;  360=>0xFD; 320=>0xFF; 180=>0xFC; 160=>0xFE
#ORG-BAD???#echo $[] 360=>0xFD; 320=>0xFF; 180=>0xFD; 160=>0xFF
#BAD???#echo $[] Official: 180=0xFC and 160=0xFE, but both bad in MS-DOS7
echo $[]  8 Sectors per Track: 4, 8, 12, 16, 24, 32, 64, 128, 160, 320, 640
echo $[]  9 Sectors per Track: 360, 720
echo $[] 10 Sectors per Track: 400, 800, 820
echo $[] 14 Sectors per Track: 14, 28
echo $[] 15 Sectors per Track: 1200, 2400, 3600, 3825, 4800, 6000, 8400, 9600
echo $[]                       10800, 12000, 13200, 15m  (max El Torito Type 1,
echo $[]                        multiples of 1200 can give problems in VBOX)
echo $[] 18 Sectors per Track: 1440, 4320, 4590, 5760, 7200, 8640, 10080, 12960
echo $[]                       14400, 15840, 17280, 18m (max El Torito Type 2)
echo $[] 36 Sectors per Track: 2880, 8100, 9180, 11520, 20160, 23040, 25920,
echo $[]                       28800, 31680, 34560, 36m (max El Torito Type 3)
echo $[] 255 Tracks, 2 heads:  3825, 4590, 9180, 12240 (sometimes MS-DOS' BIOS maximum)
echo $[0x00]"$[]> 2 heads (FAT16):    120m, 240m
echo
:examples
echo Example:  MKFATIMG.G4B --size=512m (hd0,0)/MYIMAGE.IMG
echo Example:  MKFATIMG.G4B (hd0,0)/MyImage.IMG /F:2880 /V:F2880KIMAGE /CON
if exist pagersts && echo Example:  MKFATIMG.G4B (hd0,0)/MyImage.IMG  /F:1440 /V:F1440KiMaGe /BOOT
echo Example:  MKFATIMG.G4B --size=2g /H2GFAT16.IMG /V:HDD2GBFAT16 /FAT16 /BOOT
echo Example:  MKFATIMG.G4B --sectors=0x100000 "/Image with max 1m Sectors.IMG"
#ORG#echo Example:  MKFATIMG.G4B --sectors=0x100000 /MYSECTOR.IMG
if exist pagersts && echo Example:  MKFATIMG.G4B --CHS=144/64/32 /CALEB144.IMG /FDD
if exist pagersts && echo Example:  MKFATIMG.G4B --size=4g (hd2,0)/hddimage.img /V:MYFIRSTBIGHD /BOOT:NT5
if exist pagersts && echo Example:  MKFATIMG.G4B /HDDTYPE.IMG /D:25 /V:SPECIALTYPE /BOOT:FREEDOS
echo Example:  MKFATIMG.G4B /HDDTYPE.IMG /D:25 /HEADS:16 /SPT:63 /BOOT /NOTACTIVE
if exist pagersts && echo Example:  MKFATIMG.G4B --CHS=24/2/15 (hd1,0)/BOOTCD.IMG /BOOT:GRUB /Q
echo Example:  MKFATIMG.G4B --CHS=24/2/15 (rd) /BOOT:GRUB /T
echo Example:  MKFATIMG.G4B (hd1,0)/BOOTCD.IMG /COPY
if exist pagersts && echo Example:  MKFATIMG.G4B --CHS=1025/64/32 (hd2,0)/MAXCYL.img /V:MAXCYLINDER /BOOT
if exist pagersts && echo Example:  MKFATIMG.G4B --size=256m /256MFT12.img /V:OVERSIZEF12 /SPC:128 /FAT12
if exist pagersts && echo Example:  MKFATIMG.G4B --size=4g /4GBFAT16.img /V:OVERSIZEF16 /SPC:128 /FAT16
if exist pagersts && echo Example:  MKFATIMG.G4B --size=2g (rd) /FAT16 /V:MYFT16BIGRT /ROOTENTR:4096
if exist pagersts && echo Example:  MKFATIMG.G4B --size=4g (rd) /V:MYFT32BIGRT /ROOTENTR:4096
echo Example:  MKFATIMG.G4B --CHS=1025/255/63 (rd) /V:MYMAXCHS8GB /RDSIZE:64m
if exist pagersts && echo Example:  MKFATIMG.G4B --size=8g (rd) /V:MYPARTIALRD /RDSIZE:1g
if exist pagersts && echo $[]                         raw dd if=(rd)+1 of=(hd3)
if exist pagersts && echo Example:  MKFATIMG.G4B --size=1024g (rd) /V:MYTERABYTRD /RDSIZE:MAX
if exist pagersts && echo Example:  MKFATIMG.G4B --size=4g (rd) /V:MYALIGNEDRD /BOOT /HEADS:64 /SPT:32
if exist pagersts && echo Example:  MKFATIMG.G4B --size=4g (rd) /V:ALIGNEDTO2K /RSRV:33 /FAT32:2k /SPC:4
if not exist pagerstst && goto :eof
#MAYBE?#echo Example:  MKFATIMG.G4B --size=34m (hd2,0)/hddimage.img /v:MYFIRSTEFIHD /BOOT:EFI
goto :eov
#FORTESTING#
#OKE_XXvars##echo -n > (md)0x302+60 && set > (md)0x302+60 && raw cat --locate=\x0A (md)0x302+60 > nul &; echo %0 NUMVARS=%@retval% && cat --locate=\x0A --replace=\x20 (md)0x302+60 && raw cat (md)0x302+60 && echo && echo -n && pause Press a Key to Continue... && echo
